<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>3D Face Reconstruction in Deep Learning Era:A Survey</title>
    <url>/2022/07/11/3dface-paper/3d-face-reconstruction-survey/</url>
    <content><![CDATA[<h1 id="几个方向"><a href="#几个方向" class="headerlink" title="几个方向"></a>几个方向</h1><ol>
<li>精细的面部特征，纹理，牙齿…(可能要添加额外的传感器)</li>
<li>让表情更和谐(GCN)?</li>
<li>侧面角度图片重建</li>
<li>任意角度小序列输入重建</li>
</ol>
<h1 id="3D-face-reconstruction-技术分类"><a href="#3D-face-reconstruction-技术分类" class="headerlink" title="3D face reconstruction 技术分类"></a>3D face reconstruction 技术分类</h1><ol>
<li>3D morphable model(3DMM)</li>
<li>deeplearning</li>
<li>epipolar geometry(EG)(极线几何学)</li>
<li>one-shot learning(OSL)</li>
<li>shape from shading</li>
<li>hybird face reconstruction(混合人脸重建)</li>
</ol>
<p><img src="/./3d-face-reconstruction-survey/techniques.png" alt="techniques"></p>
<h2 id="3DMM"><a href="#3DMM" class="headerlink" title="3DMM"></a>3DMM</h2><p><img src="/./3d-face-reconstruction-survey/3dmm.png" alt="3dmm"></p>
<h2 id="Deep-Learning"><a href="#Deep-Learning" class="headerlink" title="Deep Learning"></a>Deep Learning</h2><h2 id="…"><a href="#…" class="headerlink" title="…"></a>…</h2><h2 id="评估指标"><a href="#评估指标" class="headerlink" title="评估指标"></a>评估指标</h2><p><img src="/./3d-face-reconstruction-survey/evaluate.png" alt="evaluate"></p>
<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><h2 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h2><ol>
<li>无监督</li>
<li>唇部重建</li>
<li>捕获牙齿和舌头，胡须可能会影响捕获牙齿和舌头</li>
<li>眼睛、眼睑</li>
<li>发型重建</li>
<li>完整的头部重建</li>
<li>没有足够大的公共可用数据集<br><img src="/./3d-face-reconstruction-survey/challenges.png" alt="challenges"></li>
</ol>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>3Dface</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>TODO</title>
    <url>/9000/01/01/TODO/</url>
    <content><![CDATA[<p>目的：<br>恢复更仿真的人脸：</p>
<p>回归3dmm参数生成大致shape和texture<br>学习text2face的方法，分开面部部件，shape上分开？分开才能精细可控<br>hair eye</p>
<p>额外的uv图用来恢复高清细节</p>
<p>模型去除光照渲染<br>反射率之类的东西<br>部件gcn<br>meshgcn</p>
<p>粗-细<br>眼镜</p>
<p>pyright opencv<br>clash for windows git加速(还是用qv2ray把)<br>舞蹈和人脸合成一起</p>
<p>纹理细节为什么不好？</p>
<p>无线电 群里的论文<br>expgan</p>
<p>i3: autotiling<br>i3: lxappearance</p>
<p>vim: vim-surround (ysiw3*)<br>vim: startify<br>vim: lightline, bufferline<br>vim: coc-explorer<br>vim: plugin - treesitter- too long ‘if,for,class,function…,’<br>vim: line tab4 highlight<br>vim: highlight func class…too long<br>vim: pwd at right top<br>vim: set autochdir 自动改变工作目录<br>：cd改变工作目录<br>see more details: <code>:h expand</code></p>
<p>.zshrc<br>alias todo&#x3D;’nvim ~&#x2F;BLOG&#x2F;source&#x2F;_posts&#x2F;TODO.md’</p>
<p>coc补全边框圆角显示问题巴拉巴拉，是alacritty的问题，更新最新版的alacritty，就好了</p>
<p>system: asd2123<br>ranger:select-editor</p>
<p>sogou<br>nvidia驱动</p>
<p>dwm,i3获取窗口<br>xprop<br>xwininfo<br>notify-osd<br>dunst!<br>dunst要不要加到开机启动？<br>vim:hex 16进制表示方法<br>:set laststatus&#x3D;2<br><code>:set statusline=%&lt;%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %P</code></p>
<p>dwm statusbar 日期部分显示异常，加正则表达式替换<br> cal | sed  ‘s&#x2F;_&#x2F;test&#x2F;g’ | nvim<br>：<br>cal | sed ‘s&#x2F;_^H&#x2F; &#x2F;‘ | sed ‘s&#x2F;  _^H&#x2F;&gt;&#x2F;‘<br>正则替换每一个可能的清空<br>dwm statusbar路径设置<br>vim 正则表达式替换<br>vim宏+1功能 c-a<br>ls20东蒙人工智能团支部p<br>clash for window<br>wsl代理需要设置防火墙<br>ip到底是哪个？</p>
<p>easyconnect 打开导致不能git push</p>
<p>proxy打开后，pip install报错 <a href="https://blog.csdn.net/tuzixini/article/details/88203910">https://blog.csdn.net/tuzixini/article/details/88203910</a><br>mason 不能安装python-lanuage-server <a href="https://www.saoniuhuo.com/question/detail-2133503.htmlcli">https://www.saoniuhuo.com/question/detail-2133503.htmlcli</a></p>
<p>2022-12-23T16:57:49 Warning  WARN Client 1 quit with exit code 1 and signal 0 ,checkhealth,是不是有依赖不匹配</p>
<ol>
<li>kitty and Chinese</li>
<li>Xauthority should be wadekiny’s, instaed, login loop</li>
<li>Nvidia driver should be 470.xxx. or black screen</li>
<li>a lot of nvim stateline</li>
<li>i3-gaps</li>
<li>fcitx</li>
<li>ranger kitty preview image</li>
<li>i3 picom ,is updating</li>
<li>betterlockscreen  need i3lock ..</li>
<li>git speed up</li>
<li>press mod+p to imput password</li>
<li>filename from window will be wired</li>
<li>kitty do not support chinese input method, rustup ,cargo and alacritty</li>
<li>ranger default text editor</li>
<li>删除团员</li>
<li>pynput need sudo apt install python3-tk python3-dev</li>
<li>pyautogui 可以弹窗</li>
</ol>
<p>import pyautogui</p>
<h1 id="显示一个简单的带文字和OK按钮的消息弹窗。用户点击后返回button的文字。"><a href="#显示一个简单的带文字和OK按钮的消息弹窗。用户点击后返回button的文字。" class="headerlink" title="显示一个简单的带文字和OK按钮的消息弹窗。用户点击后返回button的文字。"></a>显示一个简单的带文字和OK按钮的消息弹窗。用户点击后返回button的文字。</h1><p>pyautogui.alert(text&#x3D;’’, title&#x3D;’’, button&#x3D;’OK’)</p>
<p>~&#x2F;.fonts&#x2F; 添加字体文件，可以直接安装字体<br>dunst是系统自带的<br>&#x2F;usr&#x2F;share&#x2F;xsession&#x2F;dwm.desktop<br>lsp<br>dwm-statusbar有时候不显示，是因为temp里多了一对@,不知道为什么<br>windows的zip文件在ubuntu解压乱码k</p>
<p> install arch linux<br> merge code new roman and maiyuan<br>  fcixt5 vim<br> sound pulseaudio dwm shortcut change volume use pactl instead of axmier</p>
<p> how to view a key code? like<br>    { 0,    XF86XK_AudioLowerVolume,  spawn, SHCMD(“pactl set-sink-volume @DEFAULT_SINK@ -5%”) },                              &#x2F;* super shift down | 音量减                 *&#x2F;<br>    xkxxxxxxx</p>
<p>#include &lt;X11&#x2F;XF86keysym.h&gt;?</p>
<p> amd-display-xf?? 装了后显示异常，不如不装<br> pip 换源</p>
<p> 网卡驱动<br> realtek rtl8852be wifi 6 802.11ax pcie adapter  archlinux 驱动</p>
<p> 开机不自动换esc capslock？</p>
<p>grub add windows</p>
<p>feh dnust betterlockscreen rofi picom dwm </p>
<p>.Xresources<br>.xinitrc<br>免密自动登录 startx</p>
<p>clash for windows</p>
<p>aur makepkg<br>nm-applet 貌似是ubuntu下的，arch不能用 ,用nm-tray-git</p>
<p>esc2caps 和 fcitx5 -d 都放到autostart里不行</p>
<p>fcitx5 -d 不在autostart时，esc2caps起作用<br>起作用后在启动fcitx5 -d esc2caps 又不起作用了<br>再esc2caps,又起作用了</p>
<p>所以是fcitx5重置了esc2caps<br><a href="https://wiki.archlinux.org/title/fcitx">https://wiki.archlinux.org/title/fcitx</a><br>提到了 fcitx会覆盖xmodmap的作用<br>Fcitx now control keyboard layout and when switch layout, xmodmap setting will be overwritten. So fcitx-xkb provides an option to specify the xmodmap script and let fcitx loads it for you whenever keyboard layout changes. Or disable fcitx-xkb addon is also a solution for you, or if your requirement is simply, for example, switching Caps Lock and Esc, which is provided by xkb option, you can just set it with your desktop keyboard configuration tool (Gnome and KDE all support such configuration).</p>
<p>For more detailed explanation, xmodmap is a very low level tool, that doesn’t aware keyboard layout. For X11, keyboard layout is built on a set of profile, when such profile is loaded, anything you changed with xmodmap will be overwritten, this isn’t specific to fcitx, but all tool that support keyboard layout configuration. Xkb option is a set of profile that can do some pre-defined change over keyboard layout, including many thing that people usually do with xmodmap, for example, defining where dead key is, switching Caps Lock and Esc, and so on. Unless you have special requirements, xkb layout and xkb option is recommended.</p>
<p>Since 4.2.7, Fcitx will try to load ~&#x2F;.Xmodmap if it exists.</p>
<p>由于不只是fcitx会出现此情况，其他软件也有可能，解决方法最好是用xkb(Xorg&#x2F;Keyboard configuration)</p>
<p>setxkbmap -option “caps:swapescape”</p>
<p>neovide can implement cursors smooth but can not input Chinese<br>how to set fonts?????????</p>
<p>maiyuan font : 11904 start  end 184000 ,放弃了 并且使用jetbrains nerdfont字体，其他字体可能不会对齐</p>
<p>neovide不能输入中文，winit？</p>
<p>zotero</p>
<p>aur:<br>yay:<br>sudo pacman -S yay<br>坚果云 zotero</p>
<p>安装微信需要打开multilib<br><a href="https://blog.csdn.net/weixin_52027058/article/details/128346840">https://blog.csdn.net/weixin_52027058/article/details/128346840</a></p>
<p>fontforge合并字体之后 还要在小修改一下符号，避免边框对不起(然而含麻烦)</p>
<p>微信<a href="https://github.com/vufa/deepin-wine-wechat-arch#%E4%BB%8Eaur%E5%AE%89%E8%A3%85">https://github.com/vufa/deepin-wine-wechat-arch#%E4%BB%8Eaur%E5%AE%89%E8%A3%85</a></p>
<p><a href="https://github.com/vufa/deepin-wine-wechat-arch#%E4%BB%8Eaur%E5%AE%89%E8%A3%85">https://github.com/vufa/deepin-wine-wechat-arch#%E4%BB%8Eaur%E5%AE%89%E8%A3%85</a><br>o<a href="https://www.bilibili.com/video/BV1Z3411F7TL/?spm_id_from=333.337.search-card.all.click&vd_source=c59669dc10d72873dc1a840e4c9b6095">https://www.bilibili.com/video/BV1Z3411F7TL/?spm_id_from=333.337.search-card.all.click&amp;vd_source=c59669dc10d72873dc1a840e4c9b6095</a></p>
<p>flameshot 截图不能直接复制到qq 微信 no tray refer:<br><a href="https://wiki.archlinux.org/title/Flameshot">https://wiki.archlinux.org/title/Flameshot</a></p>
<p>vim 如何在浮动窗口和普通窗口切换<br>023-01-12T19:23:37 Messages  INFO line    8:<br>Needs xclip in X11 or wl-clipboard in Wayland.<br>2023-01-12T19:23:37 Error  ERROR Error detected while processing function MdPasteImage[5]..mdip#MarkdownClipboardImage[23]..<SNR>58_SaveFileTMP[6]..<SNR>58_SaveFileTMPLinux:<br>2023-01-12T19:23:49 Messages  INFO 2023-01-12T19:23:37 Messages  INFO line    8:<br>Needs xclip in X11 or wl-clipboard in Wayland.<br>2023-01-12T19:23:37 Error  ERROR Error detected while processing function MdPasteImage[5]..mdip#MarkdownClipboardImage[23]..<SNR>58_SaveFileTMP[6]..<SNR>58_SaveFileTMPLinux:<br>2023-01-12T19:24:01 Error  ERROR E488: Trailing characters: list</p>
<p>flameshot &amp;<br>flameshot gui<br><a href="https://github.com/flameshot-org/flameshot/issues/2496">https://github.com/flameshot-org/flameshot/issues/2496</a></p>
<p>xorg 缩放倍数<br>设置鼠标样式 大小<br><a href="https://wiki.archlinuxcn.org/zh-hans/%E5%85%89%E6%A0%87%E4%B8%BB%E9%A2%98">https://wiki.archlinuxcn.org/zh-hans/%E5%85%89%E6%A0%87%E4%B8%BB%E9%A2%98</a><br>lxapperance</p>
<p>文件夹可视化管理<br>nautilus</p>
<p>xrandr –output e-DP1 –scale 0.5x0.5</p>
<p>npm fanyi 的问题<br><a href="https://github.com/afc163/fanyi#error-spawn-festival-enoent">https://github.com/afc163/fanyi#error-spawn-festival-enoent</a><br>sudo apt-get install festival festvox-kallpc16k</p>
<p>arch无法识别typec接口显示器</p>
<p>设置亮度 sudo echo 50 &gt; &#x2F;sys&#x2F;class&#x2F;backligh^Cmdgpu_bl0&#x2F;brightness<br>root用户才行，sudo不能获取root全部权限</p>
<p>获取窗口名称？</p>
<p>挂载windows分区<a href="https://zhuanlan.zhihu.com/p/513859236">https://zhuanlan.zhihu.com/p/513859236</a></p>
<p>怎么有时候会卡死？好像和fcitx有关<br>grub不能识别windows<br>从archlinux.md中拆分 profile bashrcxxxxx优先级，形成一篇新的</p>
<p>Xresources修改dpi？<br><a href="https://zhuanlan.zhihu.com/p/513859236">https://zhuanlan.zhihu.com/p/513859236</a></p>
]]></content>
      <categories>
        <category>todo</category>
      </categories>
      <tags>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>3D人脸重建论文综述汇总</title>
    <url>/2022/07/20/3dface-paper/3dfacereconstruction-abstracts/</url>
    <content><![CDATA[<h1 id="基于3DMM"><a href="#基于3DMM" class="headerlink" title="基于3DMM"></a>基于3DMM</h1><h3 id="INORig"><a href="#INORig" class="headerlink" title="INORig"></a>INORig</h3><h4 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h4><ul>
<li><p>CVPR2021: Riggable 3D Face Reconstruction via In-Network Optimization</p>
</li>
<li><p>无训练代码，<a href="https://github.com/zqbai-jeremy/INORig">https://github.com/zqbai-jeremy/INORig</a></p>
</li>
<li><p>提供的思路：</p>
</li>
<li><p>自监督，面部重建，侧重于纹理</p>
</li>
<li><p>dataset:</p>
</li>
<li><p>输入：单张图片</p>
</li>
<li><p>损失函数：</p>
<p>  $L &#x3D; L_{pose}+L_{recon_geo}+L_{ns_geo}+\lambda_1L_{recon_pho}+\lambda_2 L_\beta + \lambda_3L_{ns_con}$</p>
</li>
<li><p>提出的问题：</p>
<ul>
<li>大部分专注于静态重建而不是个性化的face rig</li>
</ul>
</li>
<li><p>贡献：</p>
<ul>
<li><p>将深度学习，网络内优化 和 face rig结合。</p>
</li>
<li><p>提出了一种基于单目图像的face rig重建方法。(支持视频输入)</p>
</li>
<li><p>通过估计个性化的face rig，使得本方法比静态重建(static reconstructions)表现要好，并且实现了下游应用，如视频重定向。</p>
</li>
<li><p>与之前直接回归Rig参数的方法不同，本文的in-network optimization 迭代求解rig参数，并受到第一原则(first-principles) 的约束(e.g. multi-view consistency, landmark alignment, and photo-metric reconstruction)。获得了更好的几何精度和泛化能力</p>
</li>
</ul>
</li>
</ul>
<p><img src="/./riggable-3d-face-reconstruction/rig-frame.png" alt="rig-frame"></p>
<h3 id="GANFit"><a href="#GANFit" class="headerlink" title="GANFit"></a>GANFit</h3><h4 id="相关信息-1"><a href="#相关信息-1" class="headerlink" title="相关信息"></a>相关信息</h4><ul>
<li><p>CVPR2019: GANFIT: Generative Adversarial Network Fitting for High Fidelity 3D Face Reconstruction</p>
</li>
<li><p>TPAMI 2021: Fast-GANFIT: Generative Adversarial Network for High Fidelity 3D Face Reconstruction </p>
</li>
<li><p>无代码，<a href="https://github.com/barisgecer/GANFit">https://github.com/barisgecer/GANFit</a></p>
</li>
<li><p>提供的思路：高分辨率+gan+uv图</p>
</li>
<li><p>自监督，面部重建，侧重于纹理</p>
</li>
<li><p>dataset:</p>
<ul>
<li>MICC</li>
<li>MoFA-Test</li>
<li>300W-3D</li>
</ul>
</li>
<li><p>输入：单张图片</p>
</li>
<li><p>损失函数：$L &#x3D; L_{id} + L_{content} + L_{pixel}+L_{landmark}$</p>
<p>  其中,content是人脸识别网络的中间层输出损失</p>
</li>
<li><p>提出的问题：</p>
</li>
<li><p>贡献：</p>
<ul>
<li>大规模高分辨率基于UV图的重建(512*512)</li>
<li>GAN和3DMM结合</li>
<li>实现了高频细节重建</li>
</ul>
</li>
</ul>
<p><img src="/./3dfacereconstruction-abstracts/ganfit.png" alt="ganfit"></p>
<h3 id="3D-FACE-GCN"><a href="#3D-FACE-GCN" class="headerlink" title="3D-FACE-GCN"></a>3D-FACE-GCN</h3><h4 id="相关信息-2"><a href="#相关信息-2" class="headerlink" title="相关信息"></a>相关信息</h4><ul>
<li><p>CVPR2020: Towards High-Fidelity 3D Face Reconstruction from In-the-Wild Images Using Graph Convolutional Networks</p>
</li>
<li><p>有代码，tensorflow，<a href="https://github.com/FuxiCV/3D-Face-GCNs">https://github.com/FuxiCV/3D-Face-GCNs</a></p>
</li>
<li><p>提供的思路： GCN，顶点颜色</p>
</li>
<li><p>自监督，面部重建，侧重于纹理</p>
</li>
<li><p>dataset:</p>
<ul>
<li><p>CelebA</p>
</li>
<li><p>CelebA-HQ</p>
</li>
<li><p>MICC(3d)</p>
</li>
</ul>
</li>
<li><p>输入：单张图片</p>
</li>
<li><p>损失函数：<br>  $$<br>  L &#x3D; \sigma_1 (L_{pix}(I,R’) + \sigma_2L_{id}(I,R’)+ \sigma_3L_{adv}) + \sigma_4(L_{vert}(T,T’) + L_{vert}(T_p,\tilde{T}’))\<br>  \quad \<br>  fixed:\quad \sigma_2 &#x3D; 0.2, \sigma_3 &#x3D; 0.001 \<br>  Initially:\quad \sigma_1 &#x3D;0, \sigma_4&#x3D;1  \<br>  gradually:\quad \sigma_1 &#x3D;1, \sigma_4&#x3D;0<br>  $$</p>
</li>
<li><p>提出的问题：</p>
<ul>
<li>基于3DMM的方法在面部纹理的重建上缺乏缺乏细节，这是因为从3DMM计算的纹理无法捕捉输入图像的面部细节</li>
</ul>
</li>
<li><p>贡献：</p>
<ul>
<li>第一个使用图卷积网络从单个图像生成高保真人脸纹理的工作,在3DMM的基础之上，单视图重建具有高保真纹理的三维人脸，无需大规模人脸数据集</li>
</ul>
</li>
</ul>
<h4 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h4><p>由粗糙到精细，结合了3DMM和GCN，利用输入图像中的面部细节，将其他方法得到的3DMM模型输入到GCN进行细化，重建3DMM网格顶点颜色(detailed colors)， 而不是重建UV图。</p>
<ul>
<li><p>一个CNN用于从2D图像回归出3DMM的参数。将参数输入到PCA模型，计算形状和纹理，随后送入GCN</p>
</li>
<li><p>使用预训练的CNN从图像中提取人脸特征，随后送入GCN</p>
</li>
<li><p>使用3个GCN模型来细化面部纹理</p>
</li>
<li><p>采用了<strong>可微渲染层</strong>来实现自监督训练，并在使用<strong>GAN损失</strong>的情况下进一步改进了结果</p>
</li>
<li><p>3D重建结果投影到2D，与原图比较。<br><img src="/./home/wadekiny/face-reconstruction/gcn-3d-face-reconstruction/approach.png" alt="approach"></p>
</li>
</ul>
<h5 id="预训练的模型"><a href="#预训练的模型" class="headerlink" title="预训练的模型"></a>预训练的模型</h5><p>是预训练好的模型，其中</p>
<ul>
<li><p><em>Regressor</em>: </p>
<ul>
<li><p>用于回归<code>3DMM系数</code>(送入GCN)，<code>面部姿势，照明参数</code>(用于渲染2D图片)</p>
</li>
<li><p>回归出一个257维向量 $(c_i^{80},c_e^{64},c_t^{64},p^{6},l^{27}) \in  \mathbb{R}^{257}$</p>
</li>
<li><p>分别表示3DMM的shape, expression, texture; pose, lighting</p>
</li>
<li><p>使用公式生成S和T(点集)：<br>$$<br>S &#x3D; S_{mean} + c_iI_{base} + c_eE_{base} \<br>T &#x3D; T_{mean} + c_tT_{base} \<br>\quad \<br>S_{mean}, T_{mean}, I_{base}, T_{base} \in BFM \<br>E_{base} \in FaceWarehouse<br>$$<br>其中$S_{mean},T_{mean}$是数据库中人脸的平均形状和平均纹理，$I_{base}, E_{base}, T_{base}$是人脸数据库中的人脸基(类似向量空间的基)，理论上通过这些人脸基的加权和可以得到任何人脸。</p>
</li>
</ul>
</li>
<li><p><em>FaceNet</em>: </p>
<ul>
<li>提取图像的特征向量</li>
</ul>
</li>
</ul>
<h5 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h5><p>不可学习，用于将3DMM参数转化为面部形状S和粗糙的面部纹理T</p>
<h5 id="纹理细化-Texture-Refinement-GCN"><a href="#纹理细化-Texture-Refinement-GCN" class="headerlink" title="纹理细化(Texture Refinement, GCN)"></a>纹理细化(Texture Refinement, GCN)</h5><p>与使用UV作为面部纹理表示的工作不同，本文直接操作网格顶点上的反射率RGB值</p>
<p>$$<br>M &#x3D; (V,A),\<br>V \in \mathbb{R}^{n \times 3}, \<br>A \in {0,1}^{n\times n} \<br>$$</p>
<p><strong>GCN Refiner GCN Decoder</strong></p>
<ul>
<li><p>Refiner就是一个图卷积，输入的是图结构，输出也是图结构</p>
</li>
<li><p>Decoder中，输入是FaceNet得到的特征向量，输出是每个顶点的RGB值。</p>
<blockquote>
<p>feature怎么转化成图的结构？</p>
</blockquote>
</li>
<li><p>都用了残差块</p>
</li>
</ul>
<p><strong>Combine Net</strong></p>
<p>把Refiner 和 Decoder的两个图结构在channel维度上拼起来，送到一个新的图卷积中。</p>
<h5 id="渲染器-Rendering"><a href="#渲染器-Rendering" class="headerlink" title="渲染器(Rendering)"></a>渲染器(Rendering)</h5><ul>
<li>输入S，T，姿态，反射率颜色，光照。渲染出2D图像。</li>
</ul>
<h5 id="判别器-discriminator"><a href="#判别器-discriminator" class="headerlink" title="判别器(discriminator)"></a>判别器(discriminator)</h5><h4 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h4><ul>
<li><p>Pixel-wise Loss: </p>
<p>  最小化输入图像和渲染图像之间的差异，由于可能有遮挡问题，所以只计算部分面部区域$M_{face}$的欧氏距离。这个面部区域是由预训练的面部分割网络获得的。</p>
</li>
<li><p>Identity-Preserving Loss: </p>
<p>  重建的3D人脸可能<strong>看起来不像</strong>输入的2D人脸，特别是在某些<strong>极端</strong>情况下。因此定义了面部特征级别下的 LOSS。</p>
<blockquote>
<p>使用FaceNet，获得输入图像和渲染的2D图像的$feature$，计算余弦距离。</p>
</blockquote>
</li>
<li><p>Vertex-wise Loss: </p>
<ul>
<li>训练GCN时，由于遮挡，可能无法正确的学习到顶点上的RGB值。</li>
<li>在GCN模块训练的早期阶段，构造顶点级别的损失函数，然后逐渐减少这个这个损失项的权重</li>
<li>包含两组：<ol>
<li>regressor+pca生成的T，和GCN生成的T’</li>
<li>regressor+pca生成的T，映射回输入图像的颜色Tp，和GCN生成的T’在光照渲染下的颜色 $\tilde{T’}$(为了获得更多的面部细节)<br><img src="/./3dfacereconstruction-abstracts/gcnvloss.png" alt="gcnvloss"></li>
</ol>
</li>
</ul>
</li>
<li><p>Adversarial LOSS</p>
<ul>
<li>对抗损失</li>
</ul>
</li>
</ul>
<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><img src="/./home/wadekiny/face-reconstruction/gcn-3d-face-reconstruction/result.png" alt="result"><br><img src="/./home/wadekiny/face-reconstruction/gcn-3d-face-reconstruction/ablation.png" alt="ablation"></p>
<h3 id="DECA"><a href="#DECA" class="headerlink" title="DECA"></a>DECA</h3><h4 id="相关信息-3"><a href="#相关信息-3" class="headerlink" title="相关信息"></a>相关信息</h4><ul>
<li><p>SIGGRAPH2021: Learning an Animatable Detailed 3D Face ModTTel from In-The-Wild Images</p>
</li>
<li><p>有代码，<a href="https://github.com/YadiraF/DECA">https://github.com/YadiraF/DECA</a></p>
</li>
<li><p>提供的思路：几何细节与表情有关</p>
</li>
<li><p>自监督，头部重建，侧重于几何形状</p>
</li>
<li><p>dataset:</p>
<ul>
<li><p>VGGFace2 [Cao et al. 2018b]</p>
</li>
<li><p>BUPT-Balancedface [Wang et al. 2019] </p>
</li>
<li><p>VoxCeleb2 [Chung et al. 2018a]</p>
</li>
<li><p>NoW</p>
</li>
<li><p>在两百万张图片(224*224)上训练</p>
</li>
</ul>
</li>
<li><p>输入：同一个人多张图片</p>
</li>
<li><p>损失函数：<br>  $$<br>  LOSS : L_{coarse} &#x3D; +L_{lmk}+L_{eye}+L_{pho}+L_{id}+L_{sc}+L_{reg} \<br>  loss : L_{ detail } &#x3D; L_{phoD}+L_{mrf}+L_{sym}+L_{dc}+L_{regD}<br>  $$</p>
</li>
<li><p>提出的问题：</p>
<p>  提出了动态细节和静态细节的概念</p>
</li>
<li><p>贡献：</p>
<ul>
<li><p>改变表情参数，可以合成合理的几何细节(表情迁移)</p>
</li>
<li><p>使用一种<strong>细节一致性损失</strong>来将<strong>身份相关的细节</strong>和<strong>表情相关的细节</strong>分开</p>
</li>
<li><p>因为重建的是几何细节，对于遮挡，光照变化，姿势变化有鲁棒性</p>
</li>
</ul>
</li>
</ul>
<h4 id="使用的模型"><a href="#使用的模型" class="headerlink" title="使用的模型"></a>使用的模型</h4><h5 id="几何模型"><a href="#几何模型" class="headerlink" title="几何模型"></a>几何模型</h5><ul>
<li><p>FLAME</p>
</li>
<li><p>$M(\vec\beta,\vec\theta,\vec\psi)&#x3D;W(T_P(\vec\beta,\vec\theta,\vec\psi),\mathrm J(\vec\beta),\vec\theta,\mathcal W)$</p>
</li>
</ul>
<h5 id="外观模型"><a href="#外观模型" class="headerlink" title="外观模型"></a>外观模型</h5><ul>
<li><p>由于 FLAME 没有外观模型，所以把 BFM 的外观模型搬过来，用在 FLAME 上</p>
</li>
<li><p>BFM’s linear albedo subspace -&gt; FLAME UV layout</p>
</li>
<li><p>外观模型输出一个UV 反照率图：$A(\alpha) \in \mathbb R^{d\times d\times 3},\alpha\in \mathbb R^{|\alpha|}$</p>
</li>
</ul>
<h5 id="相机模型"><a href="#相机模型" class="headerlink" title="相机模型"></a>相机模型</h5><ul>
<li><p>将 3d mesh 投影到图片空间</p>
</li>
<li><p>$v &#x3D; s\Pi(M_i)+t,\quad \Pi\in\mathbb R^{2\times3},\quad M_i\in\mathbb R^3, \quad s\in\mathbb R(scale),\quad t\in\mathbb R^2(translation)$</p>
</li>
<li><p>用 $c$ 表示 $s,t$</p>
</li>
</ul>
<h5 id="照明模型"><a href="#照明模型" class="headerlink" title="照明模型"></a>照明模型</h5><ul>
<li><p>基于球谐函数 (Spherical Harmonics, SH, [Ramamoorthi and Hanrahan 2001])</p>
</li>
<li><p>有阴影的面部图像计算方法：$B(\alpha,\mathrm l,N_{uv})<em>{i,j} &#x3D; A(\alpha)</em>{i,j}\odot\sum_{k&#x3D;1}^9\mathrm l_kH_K(N)_{i,j}$</p>
</li>
<li><p>$A$ 是外观模型生成的UV反照率图，$N$ 是法线，$B$ 是有阴影的纹理，哈达马积后面的部分是 HS 的东西</p>
</li>
</ul>
<h5 id="纹理渲染"><a href="#纹理渲染" class="headerlink" title="纹理渲染"></a>纹理渲染</h5><ul>
<li><p>输入：$\mathrm{(\beta,\theta,\psi),\alpha,l,c}$ 分别是FLAME参数，反照率参数，照明参数，相机参数</p>
</li>
<li><p>$I_r &#x3D; \mathcal R(M,B,\mathrm c)$</p>
</li>
</ul>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul>
<li><p>发现：一些面部细节(皱纹)取决于表情，但是一些其他属性不随表情变化。</p>
</li>
<li><p>将面部细节分为两部分</p>
<ul>
<li><p><strong>静态面部细节</strong>因人而异。</p>
</li>
<li><p><strong>动态面部细节</strong>依赖于表情，在同一个人上也会有差异。</p>
</li>
</ul>
</li>
<li><p>重建流程分为两部分，分别是粗糙重建和细节重建</p>
</li>
</ul>
<p><img src="/./deca/unknowdeca.png" alt="unknowdeca"><br><img src="/./deca/framework.png" alt="framework"></p>
<h4 id="粗糙重建"><a href="#粗糙重建" class="headerlink" title="粗糙重建"></a>粗糙重建</h4><p>首先学习一个粗糙的重建(在flame的模型空间里)</p>
<p>LOSS : $L_{coarse} &#x3D; +L_{lmk}+L_{eye}+L_{pho}+L_{id}+L_{sc}+L_{reg}$</p>
<ul>
<li><p>关键点投影损失(landmark re-projection loss)</p>
<ul>
<li><p>比较<strong>2D输入图像的关键点坐标</strong>和<strong>3D mesh 投影到图片空间的坐标</strong>，是绝对位置误差</p>
</li>
<li><p>$L_{lmk}&#x3D;\sum_{i&#x3D;1}^{68}||k_i-s\Pi(M_i)+t||_1$</p>
</li>
</ul>
</li>
<li><p>眼部闭合损失(eye closure loss)</p>
<ul>
<li><p>这部分损失是平移不变的，是一种相对位置误差，不容易受投影3d人脸没有对齐的影响</p>
</li>
<li><p>$L_{eye}&#x3D;\sum_{(i,j)\in E}||k_i-k_j-s\Pi(M_i-M_j)||$</p>
</li>
<li><p>$E$ 是眼睛上轮廓，下轮廓的关键点对</p>
</li>
</ul>
</li>
<li><p>渲染损失(photometric loss)</p>
<ul>
<li><p>$L_{pho} &#x3D; ||V_I\odot(I-I_r)||_{1,1}$ </p>
</li>
<li><p>$V_I$ 是面部的mask</p>
</li>
</ul>
</li>
<li><p>身份损失(identity loss)</p>
<ul>
<li><p>使用预训练的人脸识别网络,余弦相似度</p>
</li>
<li><p>$L_{id} &#x3D; 1-\dfrac{f(I)f(I_r)}{||f(I)||_2\cdot||f(I_r)||_2}$</p>
</li>
</ul>
</li>
<li><p>形状一致性损失(shape consistency loss)</p>
<ul>
<li><p>给一个人的两张图，应该输出相同的 FLAME 形状参数，(i.e.$\beta_i&#x3D;\beta_j$), 之前有一些工作是最小参数$\beta$之间的距离,但是效果不是特别好</p>
</li>
<li><p>新策略：在渲染图像 $i$ 时，将 $\beta_i$ 替换为 $\beta_j$ </p>
</li>
<li><p>如果模型正确估计了同一个人两幅图像中的面部形状，则交换形状参数，渲染出的图像应当难以区分。所以在渲染图像上，使用渲染损失和身份损失</p>
</li>
<li><p>$L_{sc} &#x3D; L_{coarse}(I_i,I_r(\beta_j,…))$</p>
</li>
</ul>
</li>
<li><p>正则化损失</p>
<ul>
<li>$L_{reg}$ <ul>
<li>$E_\beta &#x3D; ||\beta||_2^2$</li>
<li>$E_\psi &#x3D; ||\psi||_2^2$</li>
<li>$E_\alpha &#x3D; ||\alpha||_2^2$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="细节重建"><a href="#细节重建" class="headerlink" title="细节重建"></a>细节重建</h4><p>通过细节的uv位移图$D\in[-0.01,0.01]^{d\times d}$增强粗糙的flame模型</p>
<ol>
<li><p>生成UV位移图</p>
<ul>
<li><p>将输入图像编码为128维向量 $\delta$</p>
</li>
<li><p>$D &#x3D; F_d(\delta,\psi,\theta_{jaw})$</p>
</li>
<li><p>$D\in[-0.01,0.01]^{d\times d}$</p>
</li>
<li><p>$\delta$ 控制静态的人物细节</p>
</li>
</ul>
</li>
<li><p>将mesh投影到UV空间，叠加细节</p>
<ul>
<li><p>将 mesh 和 法线转换到UV空间</p>
</li>
<li><p>$M’<em>{uv} &#x3D; M</em>{uv} + D \odot N_{uv}$</p>
</li>
</ul>
</li>
<li><p>根据叠加了细节的mesh，计算新的法线 $N’$</p>
</li>
<li><p>渲染图像</p>
<ul>
<li>$I’_r &#x3D; \mathcal R(M, B(\mathrm{\alpha,l},N’), c)$</li>
</ul>
</li>
</ol>
<p>Loss : $L_{ detail } &#x3D; L_{phoD}+L_{mrf}+L_{sym}+L_{dc}+L_{regD}$</p>
<ul>
<li><p>细节渲染损失</p>
<ul>
<li><p>$L_{phoD} &#x3D; ||V_I\odot(I-I_r)||_{1,1}$ </p>
</li>
<li><p>$V_I$ 是面部的mask</p>
</li>
</ul>
</li>
<li><p>ID-MRF 损失</p>
<ul>
<li><p>Implicit Diversified Markov Random Field (ID-MRF) loss [Wang et al. 2018]</p>
</li>
<li><p>$L_{mrf} &#x3D; 2L_M(conv4_2)+L_M(conv3_2)$</p>
</li>
</ul>
</li>
<li><p>软对称损失(soft symmetry loss)</p>
<ul>
<li><p>为了增加对自遮挡问题的鲁棒性，有助于解决在边界的伪影问题？</p>
</li>
<li><p>$L_{sym}&#x3D; ||V_{uv}\odot(D-flip(D))||_{1,1}$</p>
</li>
<li><p>$V_{uv}$ 是在UV空间的面部mask</p>
</li>
</ul>
</li>
<li><p>正则化损失</p>
<ul>
<li>$L_{regD} &#x3D; ||D||_{1,1}$</li>
</ul>
</li>
<li><p>细节一致性损失(detail consistency loss)</p>
<ul>
<li><p>为了控制人脸，要将静态细节(毛孔，眉毛等与表情无关)和动态细节(因表情而产生的皱纹)</p>
</li>
<li><p>静态细节受 $\delta$ 控制，动态细节受 $\psi,\theta_{jaw}$ 控制</p>
</li>
<li><p>类似粗重建过程中的形状一致性损失，利用同一个人的不同照片，其静态细节应该是一致的。</p>
</li>
<li><p>对于同一个人的不同照片，交换$\delta$参数</p>
</li>
<li><p>$L_{dc} &#x3D; L_{detail}(I_i,I_r(\delta_j…))$</p>
</li>
</ul>
</li>
</ul>
<h4 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h4><ul>
<li>三个公开数据集：VGGFace2，BUPT-Balancedface, VoxCeleb2</li>
<li>总共训练了200万张图像</li>
<li>使用FAN来预测68个2d 标志点</li>
<li>使用Pytorch3D的工具进行渲染</li>
<li>输入图像大小：224x224</li>
<li>uv空间大小：d&#x3D;256</li>
</ul>
<h4 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h4><h5 id="细节一致性损失"><a href="#细节一致性损失" class="headerlink" title="细节一致性损失"></a>细节一致性损失</h5><p><img src="/./deca/ldc.png" alt="ldc"></p>
<h5 id="ID-MRF-loss"><a href="#ID-MRF-loss" class="headerlink" title="ID-MRF loss"></a>ID-MRF loss</h5><p><img src="/./deca/mrf.png" alt="mrf"></p>
<h5 id="软对称损失"><a href="#软对称损失" class="headerlink" title="软对称损失"></a>软对称损失</h5><p><img src="/./deca/sym.png" alt="sym"></p>
<h3 id="CEST"><a href="#CEST" class="headerlink" title="CEST"></a>CEST</h3><h4 id="相关信息-4"><a href="#相关信息-4" class="headerlink" title="相关信息"></a>相关信息</h4><ul>
<li><p>ICCV2021: Self-Supervised 3D Face Reconstruction via Conditional Estimation</p>
</li>
<li><p>提供的思路：如何更好的分离3DMM参数</p>
</li>
<li><p>无代码</p>
</li>
<li><p>自监督，面部重建，侧重于纹理</p>
</li>
<li><p>dataset:</p>
<ul>
<li>VoxCeleb1</li>
<li>300W-LP</li>
<li>AFLW2000-3D(3d)</li>
<li>MICC(3d)</li>
</ul>
</li>
<li><p>输入: video</p>
</li>
<li><p>损失函数：<br>$$<br>\mathcal{L}<em>{ph} + \lambda_1 \mathcal L</em>{kp} + \lambda_2 \mathcal L_{rg} \<br>\quad \<br>\mathcal L <em>{ph} &#x3D; \dfrac{1}{N}\sum</em>{i&#x3D;1, \xi_j &#x3D; \xi_i}^N(\varepsilon(I_i,S_i,R_j,v_i,l_i,M_i) + \varepsilon(I_I,S_i,R_i^\Join,v_i,l_i,M_i ) )\<br>\quad \<br>\mathcal L_{kp} &#x3D; \dfrac 1{NN_{kp}} \sum_{i&#x3D;1}^N\sum_{j&#x3D;1}^{N_{kp}}||Q_i(k_j)-q_i(j)||<em>1 \<br>\quad \<br>\mathcal L</em>{rg} &#x3D; \dfrac 1{N}\sum_{i&#x3D;1}^N||\alpha_i||^2_2<br>$$</p>
</li>
<li><p>提出的问题：</p>
<ul>
<li><p>重建的纹理只是简单复制2d图像像素点的颜色，不能分离出照明参数，重建结果渲染的图像和输入图像很接近，但3d模型效果不好。 </p>
</li>
<li><p>解决办法：加入对称性损失，一致性损失。</p>
</li>
</ul>
</li>
<li><p>本文贡献：</p>
<ul>
<li><p>考虑了3DMM参数之间的关联性</p>
</li>
<li><p>按顺序推导参数</p>
</li>
<li><p>提出一种随机优化策略</p>
</li>
</ul>
</li>
</ul>
<h4 id="CEST的流程"><a href="#CEST的流程" class="headerlink" title="CEST的流程"></a>CEST的流程</h4><ol>
<li><p>预测视点参数。 </p>
<p> 包括空间上的旋转，平移，缩放因子。</p>
<p> $f_v(I;\theta_v):I\rightarrow v\in \mathbb R^7$</p>
</li>
<li><p>预测形状参数。</p>
<p> 在预测形状前，排除尽可能多的视点信息是有益的，利用$\theta_v$,可以将图像对齐。</p>
<p> $f_s(I\circ v;\theta_s):I\circ v \rightarrow \alpha \in \mathbb R^{228*1}$</p>
</li>
<li><p>预测反照率。</p>
<p> 先前的工作包括：</p>
<ul>
<li><p>基于预定义的模型，预测反照率参数</p>
</li>
<li><p>预测UV图(CEST选用此方法)</p>
</li>
<li><p>图结构表示反射率</p>
</li>
</ul>
<p> 预测反照率的流程</p>
<ol>
<li><p>将预测得到的形状盖在脸上，把2d图片展成uv图 $T$</p>
</li>
<li><p>得到包含照明因素的uv图 $T$</p>
</li>
<li><p>得到去除照明参数的uv图 $f_r(T;\theta_r):T\rightarrow A$</p>
</li>
</ol>
</li>
<li><p>预测照明参数。</p>
<p> $f_l(I,T,A;\theta_l):(I,T,A) \rightarrow l\in \mathbb R^{9\times 1}$</p>
</li>
<li><p>渲染2D图像，计算loss。</p>
<p> $\hat I &#x3D; \mathcal R(S,R,v,l)$</p>
<p> 分别代表渲染图像，渲染器，形状参数，反照率参数，视点参数，照明参数。</p>
</li>
</ol>
<p><img src="/./3dfacereconstruction-abstracts/cest0.png" alt="cest0"><br><img src="/./3dfacereconstruction-abstracts/cest-frame.png" alt="cest-frame"><br><img src="/./3dfacereconstruction-abstracts/cest-uv.png" alt="cest-uv"><br><img src="/./3dfacereconstruction-abstracts/cest-result0.png" alt="cest-result0"></p>
<h3 id="3D3M"><a href="#3D3M" class="headerlink" title="3D3M"></a>3D3M</h3><h4 id="相关信息-5"><a href="#相关信息-5" class="headerlink" title="相关信息"></a>相关信息</h4><ul>
<li>TMM2022: 3D3M: 3D Modulated Morphable Model for Monocular Face Reconstruction</li>
<li>无代码</li>
<li>对得到的3dmm参数进行随机混乱（不同脸之间），渲染出新的脸，再重新编码和渲染（用于自监督）</li>
<li>自监督,侧重于几何形状 </li>
<li>损失函数:<ul>
<li>两阶段，</li>
<li>1：landmark+图像损失</li>
<li>2：用已经decode的参数，再encode，decode，比较第二次decode后的参数和第一次decode的参数。<br><img src="/./3dfacereconstruction-abstracts/3d3mframe.png" alt="3d3mframe"></li>
</ul>
</li>
</ul>
<h3 id="GCN-GAN"><a href="#GCN-GAN" class="headerlink" title="GCN+GAN"></a>GCN+GAN</h3><ul>
<li>CVPR2020: Uncertainty-Aware Mesh Decoder for High Fidelity 3D Face Reconstruction</li>
<li>无代码</li>
</ul>
<h3 id="REDA"><a href="#REDA" class="headerlink" title="REDA"></a>REDA</h3><ul>
<li>CVPR2020: ReDA:Reinforced Differentiable Attribute for 3D Face Reconstruction</li>
<li>无代码</li>
</ul>
<h3 id="MICA"><a href="#MICA" class="headerlink" title="MICA"></a>MICA</h3><ul>
<li>ECCV2022: Towards Metrical Reconstruction of Human Faces</li>
<li>有代码，<a href="https://github.com/Zielon/MICA">https://github.com/Zielon/MICA</a></li>
<li>提供的思路：</li>
<li>自监督，头部重建，侧重于几何形状</li>
<li>dataset:</li>
<li>输入：</li>
<li>损失函数：</li>
<li>提出的问题：</li>
<li>贡献：</li>
</ul>
<h1 id="非参数化建模"><a href="#非参数化建模" class="headerlink" title="非参数化建模"></a>非参数化建模</h1><h3 id="LAP"><a href="#LAP" class="headerlink" title="LAP"></a>LAP</h3><h4 id="相关信息-6"><a href="#相关信息-6" class="headerlink" title="相关信息"></a>相关信息</h4><ul>
<li>CVPR2021: Learning to Aggregate and Personalize 3D Face from In-the-Wild Photo Collection</li>
<li>有代码，<a href="https://github.com/TencentYoutuResearch/3DFaceReconstruction-LAP">https://github.com/TencentYoutuResearch/3DFaceReconstruction-LAP</a></li>
<li>提供的思路：课程学习。计算深度图和rgb图</li>
<li>自监督，人脸重建，侧重于纹理</li>
<li>dataset:<ul>
<li>CelebAMask-HQ</li>
<li>CelebA</li>
<li>CASIAWebFace</li>
<li>3DFAW(3d)</li>
</ul>
</li>
<li>输入：同一个人的不同人脸照片</li>
<li>损失函数：分为两部分，对应于id重建和个性化重建</li>
<li>提出的问题：</li>
<li>贡献：<ul>
<li>分离了id一致的人脸</li>
<li>较高的分辨率</li>
</ul>
</li>
<li>大致流程：两个阶段，先输入多个同id图片，学习id一致的人脸。第二步：根据特定人脸加入表情等个性化因素。</li>
</ul>
<p><img src="/./3dfacereconstruction-abstracts/lapframe.png" alt="lapframe"><br><img src="/./3dfacereconstruction-abstracts/lapcomp.png" alt="lapcomp"></p>
<h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><h4 id="相关信息-7"><a href="#相关信息-7" class="headerlink" title="相关信息"></a>相关信息</h4><ul>
<li>TCSVT2022: Transformer-based 3D Face Reconstruction with End-to-end Shape-preserved Domain Transfer</li>
<li>无代码</li>
<li>不同面部区域loss权重不同</li>
<li>gan生成图像训练</li>
</ul>
<p><img src="/./3dfacereconstruction-abstracts/transformer.png" alt="transformer"></p>
<h3 id="UNSUP3d"><a href="#UNSUP3d" class="headerlink" title="UNSUP3d"></a>UNSUP3d</h3><ul>
<li>CVPR2020: Unsupervised Learning of Probably Symmetric Deformable 3D Objects from Images in the Wild</li>
<li>有代码，<a href="https://github.com/elliottwu/unsup3d">https://github.com/elliottwu/unsup3d</a></li>
</ul>
<h1 id="基于NERF"><a href="#基于NERF" class="headerlink" title="基于NERF"></a>基于NERF</h1><h3 id="HeadNeRF"><a href="#HeadNeRF" class="headerlink" title="HeadNeRF"></a>HeadNeRF</h3><ul>
<li>CVPR 2022: eadNeRF: A Real-time NeRF-based Parametric Head Model</li>
<li>无训练代码，<a href="https://github.com/CrisHY1995/headnerf">https://github.com/CrisHY1995/headnerf</a></li>
</ul>
<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><ol>
<li>眼睛、嘴唇、牙齿、头发的重建</li>
<li>3DMM模型参数空间维度较低，纹理模型比较简单，难以恢复高精度的人脸。PCA方法是否存在问题。</li>
<li>遮挡信息恢复</li>
<li>3DMM模型及其变种不能在各种场景下同时保持较好的性能</li>
<li>侧面角度重建</li>
<li>表情</li>
<li>多视角</li>
<li>无监督，除了映射回2D图有没有其他方法</li>
<li>怎么进行数据增强</li>
</ol>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>3Dface</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>Text2Face: Text-based Face Generation with Geometry and Apperance Control</title>
    <url>/2022/07/01/3dface-paper/Text-based-Face-Generation-with-Geometry-and-Apperance-Control/</url>
    <content><![CDATA[<h1 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h1><p>StyleGAN<br>geometry features and apperance features<br>semantic masks</p>
<p>本文:对面部的几何形状(geometry)和外观(apperance)之间的关系进行建模，更容易控制几何和外观特征</p>
<h1 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h1><ol>
<li>文本处理模块，把输入的句子对应为一组关键词，这些关键词用于从属性库中有条件地抽取特征，用于面部生成</li>
<li>特征提取模块，将每个面部组件的几何形状和外观区分开，用于构建属性库。</li>
<li>图推荐模块，包含两个子模块，分别从几何形状和外观的角度学习面部组件之间的一致性，因此可以对属性库中的部件进行优化，对未指定的面部部位提出建议。</li>
<li>全局生成模块，将生成的部件进行融合。</li>
</ol>
<h2 id="Text-Parsing-Module"><a href="#Text-Parsing-Module" class="headerlink" title="Text Parsing Module"></a>Text Parsing Module</h2><h2 id="Feature-Extraction-Module"><a href="#Feature-Extraction-Module" class="headerlink" title="Feature Extraction Module"></a>Feature Extraction Module</h2><p>This module serves for local geometry and appearance disentanglement.</p>
<p><strong>Input:</strong> real images of facial components $I^r_{part}$ belonging to a whole image $I$</p>
<p><strong>Output:</strong> </p>
<ul>
<li>geometry features: $f^{geo}_{part}$</li>
<li>apperance features: $f^{app}_{part}$</li>
</ul>
<h2 id="Graph-Recommendation-Module"><a href="#Graph-Recommendation-Module" class="headerlink" title="Graph Recommendation Module"></a>Graph Recommendation Module</h2><h3 id="Geometry-Graph"><a href="#Geometry-Graph" class="headerlink" title="Geometry Graph"></a>Geometry Graph</h3><p>recommending compatible geometry features for unspecified parts </p>
<h3 id="Apperance-Graph"><a href="#Apperance-Graph" class="headerlink" title="Apperance Graph"></a>Apperance Graph</h3><p>unifying the appearance of generated face image from part-level</p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>text2face</tag>
      </tags>
  </entry>
  <entry>
    <title>(CEST)Self-Supervised 3D Face Reconstruction via Conditional Estimation</title>
    <url>/2022/09/24/3dface-paper/cest/</url>
    <content><![CDATA[<p>一般的方法：，一般方法是从2D图像中提取形状、反射率、照明和视点参数。通过自我监督学习提取这些面部参数的回归模型：将提取的面部参数重新组合以渲染原始2D图像，并学习模型参数以最小化重建误差。</p>
<p>不同的参数，可能导致同一个2d图像<br>之前的工作没没有考虑到参数之间的关系。</p>
<p>本文贡献：</p>
<ol>
<li>提出CEST，用于人脸重建的条件估计框架，考虑了3d人脸参数之间的统计相关性。</li>
<li>分解了估计过程，把参数按顺序回归</li>
<li>提出了一种随机优化策略，以有效地将反射率对称性，一致性加入CEST(类似deca的形状一致性损失)，视频帧数增加，计算复杂度线性增加而不是平方次增加<br>(虽然训练需要多帧，实际应用的时候不一定需要)</li>
</ol>
<h1 id="框架0"><a href="#框架0" class="headerlink" title="框架0"></a>框架0</h1><p><img src="/./cest/fig1.png" alt="fig1"></p>
<p>基于3dmm</p>
<h2 id="viewpoint"><a href="#viewpoint" class="headerlink" title="viewpoint"></a>viewpoint</h2>]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>3Dface</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>(deca)Learning an Animatable Detailed 3D Face Model from In-The-Wild Images</title>
    <url>/2022/09/03/3dface-paper/deca/</url>
    <content><![CDATA[<p><img src="/./deca/pic.png" alt="pic"></p>
<h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><ul>
<li><p>改变表情参数，可以合成合理的几何细节</p>
</li>
<li><p>使用一种<strong>细节一致性损失</strong>来将<strong>身份相关的细节</strong>和<strong>表情相关的细节</strong>分开</p>
</li>
<li><p>因为重建的是几何细节，对于遮挡，光照变化，姿势变化有鲁棒性</p>
</li>
<li><p>两个基准上的SOTA(2021年)</p>
</li>
<li><p>主要困难：缺乏训练数据，本文不需要3d ground truth</p>
</li>
<li><p>开源</p>
</li>
</ul>
<h1 id="使用的模型"><a href="#使用的模型" class="headerlink" title="使用的模型"></a>使用的模型</h1><h2 id="几何模型"><a href="#几何模型" class="headerlink" title="几何模型"></a>几何模型</h2><ul>
<li><p>FLAME</p>
</li>
<li><p>$M(\vec\beta,\vec\theta,\vec\psi)&#x3D;W(T_P(\vec\beta,\vec\theta,\vec\psi),\mathrm J(\vec\beta),\vec\theta,\mathcal W)$</p>
</li>
</ul>
<h2 id="外观模型"><a href="#外观模型" class="headerlink" title="外观模型"></a>外观模型</h2><ul>
<li><p>由于 FLAME 没有外观模型，所以把 BFM 的外观模型搬过来，用在 FLAME 上</p>
</li>
<li><p>BFM’s linear albedo subspace -&gt; FLAME UV layout</p>
</li>
<li><p>外观模型输出一个UV 反照率图：$A(\alpha) \in \mathbb R^{d\times d\times 3},\alpha\in \mathbb R^{|\alpha|}$</p>
</li>
</ul>
<h2 id="相机模型"><a href="#相机模型" class="headerlink" title="相机模型"></a>相机模型</h2><ul>
<li><p>将 3d mesh 投影到图片空间</p>
</li>
<li><p>$v &#x3D; s\Pi(M_i)+t,\quad \Pi\in\mathbb R^{2\times3},\quad M_i\in\mathbb R^3, \quad s\in\mathbb R(scale),\quad t\in\mathbb R^2(translation)$</p>
</li>
<li><p>用 $c$ 表示 $s,t$</p>
</li>
</ul>
<h2 id="照明模型"><a href="#照明模型" class="headerlink" title="照明模型"></a>照明模型</h2><ul>
<li><p>基于球谐函数 (Spherical Harmonics, SH, [Ramamoorthi and Hanrahan 2001])</p>
</li>
<li><p>有阴影的面部图像计算方法：$B(\alpha,\mathrm l,N_{uv})<em>{i,j} &#x3D; A(\alpha)</em>{i,j}\odot\sum_{k&#x3D;1}^9\mathrm l_kH_K(N)_{i,j}$</p>
</li>
<li><p>$A$ 是外观模型生成的UV反照率图，$N$ 是法线，$B$ 是有阴影的纹理，哈达马积后面的部分是 HS 的东西</p>
</li>
</ul>
<h2 id="纹理渲染"><a href="#纹理渲染" class="headerlink" title="纹理渲染"></a>纹理渲染</h2><ul>
<li><p>输入：$\mathrm{(\beta,\theta,\psi),\alpha,l,c}$ 分别是FLAME参数，反照率参数，照明参数，相机参数</p>
</li>
<li><p>$I_r &#x3D; \mathcal R(M,B,\mathrm c)$</p>
</li>
</ul>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul>
<li><p>发现：一些面部细节(皱纹)取决于表情，但是一些其他属性不随表情变化。</p>
</li>
<li><p>将面部细节分为两部分</p>
<ul>
<li><strong>静态面部细节</strong>因人而异。</li>
<li><strong>动态面部细节</strong>依赖于表情，在同一个人上也会有差异。</li>
</ul>
</li>
</ul>
<p><img src="/./deca/unknowdeca.png" alt="unknowdeca"></p>
<h2 id="粗糙重建"><a href="#粗糙重建" class="headerlink" title="粗糙重建"></a>粗糙重建</h2><p>首先学习一个粗糙的重建(在flame的模型空间里)</p>
<p>LOSS : $L_{coarse} &#x3D; +L_{lmk}+L_{eye}+L_{pho}+L_{id}+L_{sc}+L_{reg}$</p>
<ul>
<li><p>关键点投影损失(landmark re-projection loss)</p>
<ul>
<li><p>比较<strong>2D输入图像的关键点坐标</strong>和<strong>3D mesh 投影到图片空间的坐标</strong>，是绝对位置误差</p>
</li>
<li><p>$L_{lmk}&#x3D;\sum_{i&#x3D;1}^{68}||k_i-s\Pi(M_i)+t||_1$</p>
</li>
</ul>
</li>
<li><p>眼部闭合损失(eye closure loss)</p>
<ul>
<li><p>这部分损失是平移不变的，是一种相对位置误差，不容易受投影3d人脸没有对齐的影响</p>
</li>
<li><p>$L_{eye}&#x3D;\sum_{(i,j)\in E}||k_i-k_j-s\Pi(M_i-M_j)||$</p>
</li>
<li><p>$E$ 是眼睛上轮廓，下轮廓的关键点对</p>
</li>
</ul>
</li>
<li><p>渲染损失(photometric loss)</p>
<ul>
<li><p>$L_{pho} &#x3D; ||V_I\odot(I-I_r)||_{1,1}$ </p>
</li>
<li><p>$V_I$ 是面部的mask</p>
</li>
</ul>
</li>
<li><p>身份损失(identity loss)</p>
<ul>
<li><p>使用预训练的人脸识别网络,余弦相似度</p>
</li>
<li><p>$L_{id} &#x3D; 1-\dfrac{f(I)f(I_r)}{||f(I)||_2\cdot||f(I_r)||_2}$</p>
</li>
</ul>
</li>
<li><p>形状一致性损失(shape consistency loss)</p>
<ul>
<li><p>给一个人的两张图，应该输出相同的 FLAME 形状参数，(i.e.$\beta_i&#x3D;\beta_j$), 之前有一些工作是最小参数$\beta$之间的距离,但是效果不是特别好</p>
</li>
<li><p>新策略：在渲染图像 $i$ 时，将 $\beta_i$ 替换为 $\beta_j$ </p>
</li>
<li><p>如果模型正确估计了同一个人两幅图像中的面部形状，则交换形状参数，渲染出的图像应当难以区分。所以在渲染图像上，使用渲染损失和身份损失</p>
</li>
<li><p>$L_{sc} &#x3D; L_{coarse}(I_i,I_r(\beta_j,…))$</p>
</li>
</ul>
</li>
<li><p>正则化损失?</p>
<ul>
<li>$L_{reg}$ <ul>
<li>$E_\beta &#x3D; ||\beta||_2^2$</li>
<li>$E_\psi &#x3D; ||\psi||_2^2$</li>
<li>$E_\alpha &#x3D; ||\alpha||_2^2$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="细节重建"><a href="#细节重建" class="headerlink" title="细节重建"></a>细节重建</h2><p>通过细节的uv位移图$D\in[-0.01,0.01]^{d\times d}$增强粗糙的flame模型</p>
<ol>
<li><p>生成UV位移图</p>
<ul>
<li><p>将输入图像编码为128维向量 $\delta$</p>
</li>
<li><p>$D &#x3D; F_d(\delta,\psi,\theta_{jaw})$</p>
</li>
<li><p>$D\in[-0.01,0.01]^{d\times d}$</p>
</li>
<li><p>$\delta$ 控制静态的人物细节</p>
</li>
</ul>
</li>
<li><p>将mesh投影到UV空间，叠加细节</p>
<ul>
<li><p>将 mesh 和 法线转换到UV空间</p>
</li>
<li><p>$M’<em>{uv} &#x3D; M</em>{uv} + D \odot N_{uv}$</p>
</li>
</ul>
</li>
<li><p>根据叠加了细节的mesh，计算新的法线 $N’$</p>
</li>
<li><p>渲染图像</p>
<ul>
<li>$I’_r &#x3D; \mathcal R(M, B(\mathrm{\alpha,l},N’), c)$</li>
</ul>
</li>
</ol>
<p>Loss : $L_{ detail } &#x3D; L_{phoD}+L_{mrf}+L_{sym}+L_{dc}+L_{regD}$</p>
<ul>
<li><p>细节渲染损失</p>
<ul>
<li><p>$L_{phoD} &#x3D; ||V_I\odot(I-I_r)||_{1,1}$ </p>
</li>
<li><p>$V_I$ 是面部的mask</p>
</li>
</ul>
</li>
<li><p>ID-MRF 损失</p>
<ul>
<li><p>Implicit Diversified Markov Random Field (ID-MRF) loss [Wang et al. 2018]</p>
</li>
<li><p>$L_{mrf} &#x3D; 2L_M(conv4_2)+L_M(conv3_2)$</p>
</li>
</ul>
</li>
<li><p>软对称损失(soft symmetry loss)</p>
<ul>
<li><p>为了增加对自遮挡问题的鲁棒性，有助于解决在边界的伪影问题？</p>
</li>
<li><p>$L_{sym}&#x3D; ||V_{uv}\odot(D-flip(D))||_{1,1}$</p>
</li>
<li><p>$V_{uv}$ 是在UV空间的面部mask</p>
</li>
</ul>
</li>
<li><p>正则化损失</p>
<ul>
<li>$L_{regD} &#x3D; ||D||_{1,1}$</li>
</ul>
</li>
<li><p>细节一致性损失(detail consistency loss)</p>
<ul>
<li><p>为了控制人脸，要将静态细节(毛孔，眉毛等与表情无关)和动态细节(因表情而产生的皱纹)</p>
</li>
<li><p>静态细节受 $\delta$ 控制，动态细节受 $\psi,\theta_{jaw}$ 控制</p>
</li>
<li><p>类似粗重建过程中的形状一致性损失，利用同一个人的不同照片，其静态细节应该是一致的。</p>
</li>
<li><p>对于同一个人的不同照片，交换$\delta$参数</p>
</li>
<li><p>$L_{dc} &#x3D; L_{detail}(I_i,I_r(\delta_j…))$</p>
</li>
</ul>
</li>
</ul>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><p><img src="/./deca/framework.png" alt="framework"></p>
<h1 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h1><ul>
<li>三个公开数据集：VGGFace2，BUPT-Balancedface, VoxCeleb2</li>
<li>总共训练了200万张图像</li>
<li>使用FAN来预测68个2d 标志点</li>
<li>使用Pytorch3D的工具进行渲染</li>
<li>输入图像大小：224x224</li>
<li>uv空间大小：d&#x3D;256</li>
</ul>
<h1 id="消融实验"><a href="#消融实验" class="headerlink" title="消融实验"></a>消融实验</h1><h2 id="细节一致性损失"><a href="#细节一致性损失" class="headerlink" title="细节一致性损失"></a>细节一致性损失</h2><p><img src="/./deca/ldc.png" alt="ldc"></p>
<h2 id="ID-MRF-loss"><a href="#ID-MRF-loss" class="headerlink" title="ID-MRF loss"></a>ID-MRF loss</h2><p><img src="/./deca/mrf.png" alt="mrf"></p>
<h2 id="软对称损失"><a href="#软对称损失" class="headerlink" title="软对称损失"></a>软对称损失</h2><p><img src="/./deca/sym.png" alt="sym"></p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>3Dface</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>Exp-GAN:3D-Aware Facial Image Generation with Expression Control</title>
    <url>/2022/07/26/3dface-paper/exp-gan/</url>
    <content><![CDATA[<ul>
<li><p>人脸图像生成器</p>
</li>
<li><p>显式控制面部表情</p>
</li>
<li><p>与之前的 3D aware GANs不同</p>
</li>
<li><p>支持面部形状和表情的细粒度控制(形状和表情是从姿态(pose)中分离出来的)</p>
</li>
<li><p>提出了一种新的混合方法，</p>
</li>
<li><p>采用具有神经纹理的三维可变模型作为面部区域<br>  a 3D morphablble model (3DMM) with neural textures for the facial region</p>
</li>
<li><p>采用具有多视角一致性的神经辐射场作为费面部区域<br>  a neural radiance field (NeRF) for non-facial regions with multi-view consistency.</p>
</li>
<li><p>NeRF包含非面部区域的提及特征</p>
</li>
<li><p>两种特征单独生成，在之后融合</p>
</li>
<li><p>我们还提出了一种训练方案，鼓励生成的图像如实反映对形状和表情的控制。实验结果表明，该方法成功地合成了具有细粒度控制的真实视图一致的人脸图像。</p>
</li>
<li><p>Exp GAN学习合成从身份和相机姿势中分离出来的各种面部表情</p>
</li>
</ul>
<p>近年来，基于生成模型（如生成对抗网络）的合成图像的照片真实感显著增加。为了更直观地控制包括面部形状和表情在内的语义属性，提出了几种将面部的3D可变形模型（3DMM）应用于2D GAN框架的方法[10、13、16]。在[13，16]中，渲染3D人脸网格，将人脸形状和表情的各种信息（RGB、法线、神经特征）注入生成器。然而，尽管使用了3D人脸网格模型，但由于2D GAN框架缺乏多视图一致性，他们的结果显示面部表情和其他属性（如相机姿势和身份）之间存在纠缠。</p>
<p>已经提出了3D感知GAN来合成具有多视图一致性的高保真人脸图像[17-22]。一般来说，3D感知GAN学习生成隐式体积特征场，该特征场可以通过体绘制实现为图像。由于隐式体积特征已经包含3D信息，因此可以成功训练3Daware GAN以生成具有多视图一致性的人脸图像。然而，据我们所知，尚未考虑在3D感知GANs中对面部形状和表情的控制。</p>
<p>本文提出了Exp-GAN，这是一种3D感知人脸图像生成器，它为我们提供了对具有多视图一致性的人脸形状和表情的显式控制。具体来说，Exp-GAN学习合成从身份和摄像机姿势中分离出来的各种面部表情，如图1所示。为了实现这一点，Exp-GAN采用了一种混合方法，将人脸的3D可变形模型（3DMM）和3D感知GAN结合到单个条件GAN框架中，该框架可以使用2D人脸图像集合进行训练。3DMM允许我们对面部形状和表情进行细粒度和直观的控制，而3D感知GAN支持多视图一致的照片真实感图像合成。</p>
<p>具体来说，Exp-GAN分别使用神经面部生成器和神经体积生成器来合成面部和非面部部分。神经人脸生成器采用具有神经纹理的3DMM来合成真实且多视图一致的人脸的特征，该特征充分反映了用户对混合形状系数给出的面部表情和形状的控制。神经体积生成器采用3D感知的GAN方法来生成体积特征，支持具有多视图一致性的多样化和逼真的图像合成。为了无缝集成两个单独生成的特征，我们还介绍了一种基于NeRF的体绘制过程的特征集成方法[23]。最后，我们提出了一种基于混合形状系数与鉴别器回归的训练方案，用于根据用户控制参数进行可靠的图像合成。</p>
<p>我们的经验表明，Exp-GAN可以生成各种表情、姿势和人脸形状。我们还表明，与以前使用2D样式提供表达控制的工作相比，该方法定量地改进了结果。我们的贡献可以总结如下：–我们提出了Exp-GAN，第一个3D感知人脸图像生成器，以实现多视图一致性和对面部表情的细粒度控制我们提出了基于3DMMs的具有面部表情控制的3D感知GAN的几何显式调节我们的混合方法结合了3DMM和体积特征来合成面部和非面部区域，并采用了一种新的深度集成方法来无缝集成单独合成的特征我们还提出了一种新的训练方案，利用具有回归分支的鉴别器来训练我们的网络，以忠实地反映用户控制。</p>
<p>网络结构-四部分：</p>
<ol>
<li>神经脸部生成器</li>
<li>神经体积生成器</li>
<li>图像合成模块</li>
<li>判别模块</li>
</ol>
<p>对于框架的合成部分，使用了基于StyleGAN2的生成器<br><img src="/./exp-gan/frame.png" alt="frame"></p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>3Dface</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning a model of facial shape and expression from 4D scans</title>
    <url>/2022/09/02/3dface-paper/flame_model/</url>
    <content><![CDATA[<p>主要贡献： 提出了一个头部模型，比现有的头部模型和面部模型更精确，更有表现力。</p>
<h2 id="Flame-and-SMPL"><a href="#Flame-and-SMPL" class="headerlink" title="Flame and SMPL"></a>Flame and SMPL</h2><ul>
<li>将SMPL模型扩展到头部<ul>
<li>SMPL中，几何变形是由于个体固有的形态变化或者姿势变化。</li>
<li>对于人脸，变形多是由肌肉激活的，而不是有关节的姿势变化</li>
</ul>
</li>
<li>与现有的游戏引擎兼容</li>
</ul>
<h2 id="Flame"><a href="#Flame" class="headerlink" title="Flame"></a>Flame</h2><p><img src="/./flame_model/flamemodel.png" alt="flamemodel"><br><img src="/./flame_model/jointlocation.png" alt="jointlocation"></p>
<ul>
<li>包含N&#x3D;5023个顶点</li>
<li>K&#x3D;4个关节点(颈部，下巴，眼球x2)</li>
<li>blendshapes<br>$<br>M(\vec\beta,\vec\theta,\vec\psi):\mathbb R^{|\vec\beta|\times|\vec\theta|\times|\vec\psi|}\rightarrow\mathbb R^{3N}<br>$ (return N vertices, dim &#x3D; 3)</li>
</ul>
<p>$<br>M(\vec\beta,\vec\theta,\vec\psi)&#x3D;W(T_P(\vec\beta,\vec\theta,\vec\psi),\mathrm J(\vec\beta),\vec\theta,\mathcal W)<br>$</p>
<p>$<br>T_P(\vec\beta,\vec\theta,\vec\psi) &#x3D;  \mathrm{\overline T} + B_S(\vec\beta;\mathcal S) + B_P(\vec\theta;\mathcal P) + B_E(\vec\psi;\mathcal E)<br>$</p>
<p>$<br>\mathrm J(\vec\beta;\mathcal J,\overline{\mathrm T},\mathcal S) &#x3D; \mathcal J(\overline{\mathrm T}+B_S(\vec\beta;\mathcal S))<br>$</p>
<p>$\mathcal J$ is a sparse matrix defining how to compute joint locations from mesh vertices</p>
<table>
<thead>
<tr>
<th>blendshape</th>
<th>公式</th>
<th>原空间</th>
<th>映射后的空间</th>
</tr>
</thead>
<tbody><tr>
<td>shape</td>
<td>$B_S(\vec\beta;\mathcal S)&#x3D;\sum_{n&#x3D;1}^{| \vec\beta| }\beta_nS_n$</td>
<td>$\mathbb R^{| \vec\beta| }$</td>
<td>$\mathbb R^{3N}$</td>
</tr>
<tr>
<td>pose</td>
<td>$B_P(\vec\theta;\mathcal P) &#x3D; \sum_{n&#x3D;1}^{9K}(R_n(\vec\theta)-R_n(\vec\theta^*))P_n$</td>
<td>$\mathbb R^{|\vec\theta|}  &#x3D;\mathbb R^{3K+1} \space (rotation)$</td>
<td>$\mathbb R^{3N}$</td>
</tr>
<tr>
<td>expression</td>
<td>$B_E(\vec\psi;\mathcal E) &#x3D;\sum_{n&#x3D;1}^{|\vec\psi|}\psi_nE_n$</td>
<td>$\mathbb R^{|\vec\psi|}$</td>
<td>$\mathbb R^{3N}$</td>
</tr>
</tbody></table>
<p>所有的blendshape都是关于模板mesh：$\overline{\mathrm T}$的偏移</p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>3Dface</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>Towards High-Fidelity 3D Face Reconstruction from In-the-Wild Images Using Graph Convolutional Networks</title>
    <url>/2022/08/10/3dface-paper/gcn-3d-face-reconstruction/</url>
    <content><![CDATA[<h1 id="CVPR2020"><a href="#CVPR2020" class="headerlink" title="CVPR2020"></a>CVPR2020</h1><h1 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h1><p>问题：</p>
<ul>
<li>基于3DMM的方法在面部纹理的重建上缺乏缺乏细节，这是因为从3DMM计算的纹理无法捕捉输入图像的面部细节。</li>
<li>基于高分辨率UV图的方法需要数据库难以获得</li>
</ul>
<p>本文：第一个使用图卷积网络从单个图像生成高保真人脸纹理的工作,在3DMM的基础之上，单视图重建具有高保真纹理的三维人脸，无需捕获大规模人脸人脸数据库</p>
<p>主要思想：<br>利用输入图像中的面部细节，将其他方法得到的3DMM模型输入到GCN进行细化，重建3DMM网格顶点颜色(detailed colors)， 而不是重建UV图。</p>
<p>网络结构：由粗糙到精细，结合了3DMM和GCN</p>
<ul>
<li><p>一个CNN用于从2D图像回归出3DMM的参数。将参数输入到PCA模型，计算形状和纹理，随后送入GCN</p>
</li>
<li><p>使用预训练的CNN从图像中提取人脸特征，随后送入GCN</p>
</li>
<li><p>使用3个GCN模型来细化面部纹理</p>
</li>
<li><p>采用了<strong>可微渲染层</strong>来实现自监督训练，并在使用<strong>GAN损失</strong>的情况下进一步改进了结果</p>
<ul>
<li>3D重建结果投影到2D，与原图比较。</li>
</ul>
<blockquote>
<p>Unsupervised training for 3d morphable model regression. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 8377–8386, 2018.</p>
</blockquote>
<blockquote>
<p>Improved training of wasserstein gans. In Advances in neural information processing systems, pages 5767–5777, 2017.</p>
</blockquote>
</li>
</ul>
<h1 id="approach"><a href="#approach" class="headerlink" title="approach"></a>approach</h1><p><img src="/./home/wadekiny/face-reconstruction/gcn-3d-face-reconstruction/approach.png" alt="approach"></p>
<h2 id="Regressor-and-FaceNet"><a href="#Regressor-and-FaceNet" class="headerlink" title="Regressor and FaceNet"></a>Regressor and FaceNet</h2><p>是预训练好的模型，其中</p>
<ul>
<li><p><em>Regressor</em>: </p>
<blockquote>
<p>Accurate 3d face reconstruction with weakly-supervised learning: From single image to image set. In IEEE Computer Vision and Pattern Recognition Workshops, 2019.</p>
</blockquote>
<ul>
<li><p>用于回归<code>3DMM系数</code>(送入GCN)，<code>面部姿势，照明参数</code>(用于渲染2D图片)</p>
</li>
<li><p>回归出一个257维向量 $(c_i^{80},c_e^{64},c_t^{64},p^{6},l^{27}) \in  \mathbb{R}^{257}$</p>
</li>
<li><p>分别表示3DMM的shape, expression, texture; pose, lighting</p>
</li>
<li><p>使用公式生成S和T(点集)：<br>  $$<br>  S &#x3D; S_{mean} + c_iI_{base} + c_eE_{base} \<br>  T &#x3D; T_{mean} + c_tT_{base} \<br>  \quad \<br>  S_{mean}, T_{mean}, I_{base}, T_{base} \in BFM \<br>  E_{base} \in FaceWarehouse<br>  $$<br>  其中$S_{mean},T_{mean}$是数据库中人脸的平均形状和平均纹理，$I_{base}, E_{base}, T_{base}$是人脸数据库中的人脸基(类似向量空间的基)，理论上通过这些人脸基的加权和可以得到任何人脸。</p>
<blockquote>
<p>A 3d face model for pose and illumination invariant face recognition. In 2009 Sixth IEEE International Conference on Advanced Video and Signal Based Surveillance, pages 296–301. Ieee, 2009</p>
</blockquote>
<blockquote>
<p>Facewarehouse: A 3d facial expression database for visual computing. IEEE Transactions on Visualization and Computer Graphics, 20(3):413–425, 2013.</p>
</blockquote>
</li>
</ul>
</li>
<li><p><em>FaceNet</em>: </p>
<blockquote>
<p>A unified embedding for face recognition and clustering. In Proceedings of the IEEE conference on computer vision and pattern recognition, pages 815–823, 2015.</p>
</blockquote>
<ul>
<li><p>提取图像的特征向量</p>
</li>
<li><p>作用：</p>
<ol>
<li><p>作为embedding输入到后面的GCN Decoder中，生成网格顶点的反射率颜色</p>
</li>
<li><p>用来构成一个LOSS项</p>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h2><p>不可学习，用于将3DMM参数转化为面部形状S和粗糙的面部纹理T</p>
<h2 id="Texture-Refinement-GCN"><a href="#Texture-Refinement-GCN" class="headerlink" title="Texture Refinement (GCN)"></a>Texture Refinement (GCN)</h2><p>与使用UV作为面部纹理表示的工作不同，本文直接操作网格顶点上的反射率RGB值</p>
<p>$$<br>M &#x3D; (V,A),\<br>V \in \mathbb{R}^{n \times 3}, \<br>A \in {0,1}^{n\times n} \<br>$$</p>
<p><strong>GCN Refiner GCN Decoder</strong></p>
<ul>
<li><p>Refiner就是一个图卷积，输入的是图结构，输出也是图结构</p>
</li>
<li><p>Decoder中，输入是FaceNet得到的特征向量，输出时每个顶点的RGB值。</p>
<blockquote>
<p>feature怎么转化成图的结构？</p>
</blockquote>
</li>
<li><p>都用了残差块</p>
</li>
</ul>
<p><strong>Combine Net</strong></p>
<p>把Refiner 和 Decoder的两个图结构在channel维度上拼起来，送到一个新的图卷积中。</p>
<h2 id="Rendering"><a href="#Rendering" class="headerlink" title="Rendering"></a>Rendering</h2><ul>
<li>输入S，T，姿态，反射率颜色，光照。渲染出2D图像。<br><img src="/./home/wadekiny/face-reconstruction/gcn-3d-face-reconstruction/rendering.png" alt="rendering"></li>
</ul>
<h2 id="Discriminator"><a href="#Discriminator" class="headerlink" title="Discriminator"></a>Discriminator</h2><ul>
<li>使用了对抗训练。判别器有6个卷积层</li>
</ul>
<h1 id="LOSS"><a href="#LOSS" class="headerlink" title="LOSS"></a>LOSS</h1><ul>
<li><p>Pixel-wise Loss: 最小化输入图像和渲染图像之间的差异，由于可能有遮挡问题，所以只计算部分面部区域$M_{face}$的欧氏距离。这个面部区域是由预训练的面部分割网络获得的。</p>
<blockquote>
<p>(Face-to-parameter translation for game character auto-creation; Interactive facial feature localization.)</p>
</blockquote>
</li>
</ul>
<p><img src="/./home/wadekiny/face-reconstruction/gcn-3d-face-reconstruction/loss1.png" alt="loss1"></p>
<ul>
<li><p>Identity-Preserving Loss: 重建的3D人脸可能<strong>看起来不像</strong>输入的2D人脸，特别是在某些<strong>极端</strong>情况下。因此定义了面部特征级别下的 LOSS。</p>
<ul>
<li>使用FaceNet，获得输入图像和渲染的2D图像的$feature$，计算余弦距离。</li>
</ul>
</li>
<li><p>Vertex-wise Loss: </p>
<ul>
<li>训练GCN时，由于遮挡，可能无法正确的学习到顶点上的RGB值。</li>
<li>在GCN模块训练的早期阶段，构造顶点级别的损失函数，然后逐渐减少这个这个损失项的权重</li>
<li>包含两组：<ol>
<li>regressor+pca生成的T，和GCN生成的T’</li>
<li>regressor+pca生成的T，映射回输入图像的颜色Tp，和GCN生成的T’在光照渲染下的颜色 $\tilde{T’}$(为了获得更多的面部细节)</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><img src="/./home/wadekiny/face-reconstruction/gcn-3d-face-reconstruction/vertex-loss.png" alt="vertex-loss"></p>
<ul>
<li><p>Adversarial LOSS</p>
<blockquote>
<p>Improved training of wasserstein gans. In Advances in neural information processing systems, pages 5767–5777, 2017</p>
</blockquote>
<p>  <img src="/./gcn-3d-face-reconstruction/adloss.png" alt="adloss"></p>
</li>
<li><p>最终的损失函数</p>
<p>  $$<br>  L &#x3D; \sigma_1 (L_{pix}(I,R’) + \sigma_2L_{id}(I,R’)+ \sigma_3L_{adv}) \<br>  \quad \</p>
<ul>
<li>\sigma_4(L_{vert}(T,T’) + L_{vert}(T_p,\tilde{T}’))\<br>  \quad \<br>  fixed:\quad \sigma_2 &#x3D; 0.2, \sigma_3 &#x3D; 0.001 \<br>  Initially:\quad \sigma_1 &#x3D;0, \sigma_4&#x3D;1  \<br>  gradually:\quad \sigma_1 &#x3D;1, \sigma_4&#x3D;0<br>  $$</li>
</ul>
</li>
</ul>
<h1 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h1><p><img src="/./home/wadekiny/face-reconstruction/gcn-3d-face-reconstruction/result.png" alt="result"></p>
<p><img src="/./home/wadekiny/face-reconstruction/gcn-3d-face-reconstruction/ablation.png" alt="ablation"></p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>3Dface</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>研究方向研究</title>
    <url>/2022/07/04/3dface-paper/research-direction/</url>
    <content><![CDATA[<ul>
<li>图神经网络</li>
</ul>
<h1 id="姿态估计-不做啦"><a href="#姿态估计-不做啦" class="headerlink" title="姿态估计 不做啦"></a>姿态估计 不做啦</h1><h1 id="动作识别-不做啦"><a href="#动作识别-不做啦" class="headerlink" title="动作识别 不做啦"></a>动作识别 不做啦</h1><ul>
<li>细粒度</li>
<li>动作识别和姿态估计联合</li>
<li>骨架旋转</li>
</ul>
<h1 id="text2face"><a href="#text2face" class="headerlink" title="text2face"></a>text2face</h1><ul>
<li>刑侦</li>
<li>图推荐模块那篇论文，感觉他的数据集不全</li>
<li>疤痕</li>
<li>整容</li>
</ul>
<h1 id="text2pose"><a href="#text2pose" class="headerlink" title="text2pose"></a>text2pose</h1><ul>
<li><del>手语</del></li>
</ul>
<h1 id="DNA2face"><a href="#DNA2face" class="headerlink" title="DNA2face"></a>DNA2face</h1><h1 id="人脸图像，3d重建"><a href="#人脸图像，3d重建" class="headerlink" title="人脸图像，3d重建"></a>人脸图像，3d重建</h1><h1 id="Google-scholar-关键词搜索结果-2021年以来"><a href="#Google-scholar-关键词搜索结果-2021年以来" class="headerlink" title="Google scholar 关键词搜索结果 2021年以来"></a>Google scholar 关键词搜索结果 2021年以来</h1><ul>
<li>3d human pose estimation: 16900</li>
<li>3d  pose estimation: 22300</li>
<li>3d face reconstruction: 20400</li>
<li>action recognition: 73800</li>
<li>text to image: 13500</li>
<li>text to face: 98900</li>
</ul>
<h1 id="dblp-CVPR-关键词搜索结果"><a href="#dblp-CVPR-关键词搜索结果" class="headerlink" title="dblp CVPR 关键词搜索结果"></a>dblp CVPR 关键词搜索结果</h1><ul>
<li>3d human pose estimation: 37</li>
<li>3d pose estimation: 74</li>
<li>3d face reconstruction: 17 </li>
<li>3d face expression: 5</li>
<li>action recognition: 168</li>
<li>text to iamge: 21</li>
<li>text to face: 2</li>
</ul>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
      </tags>
  </entry>
  <entry>
    <title>Riggable 3D Face Reconstruction via In-Network Optimization</title>
    <url>/2022/08/08/3dface-paper/riggable-3d-face-reconstruction/</url>
    <content><![CDATA[<h1 id="CVPR-2021"><a href="#CVPR-2021" class="headerlink" title="CVPR 2021"></a>CVPR 2021</h1><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="什么是face-rig"><a href="#什么是face-rig" class="headerlink" title="什么是face rig"></a>什么是face rig</h2><ul>
<li><p>在动画制作中，rigging是将不同身体部分绑定起来，从而更好地控制动画人物的运动。</p>
</li>
<li><p>这里的riggable，应该是可控制的意思，区别于静态重建(只考虑输入图像的重建)，一个riggable 3d face 可以被其他变量控制，如其他人脸，声音等等</p>
</li>
<li><p>该face rig可以用于角色动画，如人脸重定目标(retarget)和语音木偶(voice puppertry)。也可以用于3D人脸跟踪，作为个性化的先验知识，以缓解跟踪难度。</p>
</li>
<li><p>face rig是一个个性化的参数模型，可以生成一个特定人物在不同表情下的face</p>
</li>
<li><p>face rig: 一个参数化模型，输入表情参数 $\beta$,输出一个相应的3D mesh</p>
<ul>
<li>$(V,A)&#x3D;Rig(\beta)$,V代表网格顶点，A代表反射率颜色。</li>
</ul>
</li>
</ul>
<h2 id="什么是适定性问题"><a href="#什么是适定性问题" class="headerlink" title="什么是适定性问题"></a>什么是适定性问题</h2><p>适定性问题，满足：</p>
<ol>
<li>解存在</li>
<li>解唯一</li>
<li>解稳定</li>
</ol>
<p>通过2D人脸生成3D人脸，和2dpose-&gt;3dpose一样，解不唯一，是不适定性问题。</p>
<h2 id="先前工作存在的问题"><a href="#先前工作存在的问题" class="headerlink" title="先前工作存在的问题"></a>先前工作存在的问题</h2><ul>
<li><p>由于问题的不适定性，face rig 模型通常难以优化</p>
</li>
<li><p>基于三维数据的方法：严重依赖于专用设备（如密集摄像机&#x2F;照明阵列和深度传感器）提供的3D数据，这限制了应用领域。</p>
</li>
<li><p>基于传统方法：这类算法通常使用低维参数面部模型作为先验，使用面部模型(3dmm,multi-linear)来约束这个不适定性问题。通过优化器来求解这些模型的参数。但无法捕捉到精确的面部特征，在此基础上的改进需要很多额外的部件，模型比较脆弱，效率相对较低。</p>
</li>
<li><p>基于深度学习：大部分专注于静态重建而不是个性化的 face rig。</p>
</li>
</ul>
<h2 id="本文贡献"><a href="#本文贡献" class="headerlink" title="本文贡献"></a>本文贡献</h2><ul>
<li><p>将深度学习，optimization 和 face rig结合。</p>
</li>
<li><p>提出了一种基于单目图像的face rig重建方法。(支持视频输入)</p>
</li>
<li><p>通过估计个性化的face rig，使得本方法比静态重建(static reconstructions)表现要好，并且实现了下游应用，如视频重定向。</p>
</li>
<li><p>与之前直接回归Rig参数的方法不同，本文的in-network optimization 迭代求解rig参数，并受到第一原则(first-principles) 的约束(e.g. multi-view consistency, landmark alignment, and photo-metric reconstruction)。获得了更好的几何精度和泛化能力</p>
</li>
</ul>
<h2 id="本文思路"><a href="#本文思路" class="headerlink" title="本文思路"></a>本文思路</h2><ul>
<li><p>联合估计具有个性化的个性化的 “人脸 rig” 和每幅图图像的参数（包括表情，姿势，照明），有监督</p>
</li>
<li><p>设计了一个端到端网络，嵌入了一个可微的网络优化器</p>
<ul>
<li><p>decoder, Face Rig Parameterization 基于输入图像，将face rig 参数化为 rig code，来control the person-specific aspects (面貌？)</p>
</li>
<li><p>learnable optimization，用于估计rig code 和 每幅图的参数</p>
</li>
</ul>
</li>
<li><p>在网络优化中，显式地强制来自第一原理的约束，引入了比基于回归的方法更多的先验知识。最后，利用深度学习中的数据驱动先验约束不适定单目设置，缓解优化难度。</p>
</li>
<li><p>本文的方法：不是直接回归，而是使用’in-network optimization governed by the first-principles’这个额外的约束，加上深度学习学到的东西，提供了提高几何精度和泛化能力的潜力，同时解决了线性人脸模型表达能力有限的缺点</p>
</li>
</ul>
<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><p>网络有三级，这是一级的示意图，重复三次就是本文的网络结构。</p>
<ul>
<li>Face Rig Parameterization: 参数化 face rig 为一个可优化的编码$\alpha^l$, to control the person-specific aspects</li>
<li>Learnable Optimization：迭代更新$\alpha^l$和每幅图的参数(表情，姿态，照明)</li>
</ul>
<p><img src="/./riggable-3d-face-reconstruction/rig-frame.png" alt="rig-frame"></p>
<p>在1个阶段中主要有四个参数(共有3个阶段)：</p>
<ol>
<li>Rig Code $\alpha^l$ </li>
<li>lighting $\gamma$ 每幅输入图像都有这个参数</li>
<li>pose $P$ 每幅输入图像都有这个参数</li>
<li>expression $\beta$ 每幅输入图像都有这个参数</li>
</ol>
<h2 id="Face-Rig-Parameterization"><a href="#Face-Rig-Parameterization" class="headerlink" title="Face Rig Parameterization"></a>Face Rig Parameterization</h2><p>生成mesh的方法：</p>
<table>
<thead>
<tr>
<th>face rig</th>
<th>face rig parameterization (本文)</th>
</tr>
</thead>
<tbody><tr>
<td>$(V,A)&#x3D;Rig(\beta)$</td>
<td>$(V,A) &#x3D; Rig(\beta;\alpha,{I_i},{\hat{V}^{old}_i})$</td>
</tr>
<tr>
<td>V代表网格顶点，A代表反射率颜色,$\beta$是表情参数</td>
<td>V代表网格顶点，A代表反射率颜色,$\beta$是表情参数</td>
</tr>
<tr>
<td></td>
<td>$I_i$为输入图像</td>
</tr>
<tr>
<td></td>
<td>$\hat V_i^{old}$是之前的重建结果，<cr>每一幅图都有一个重建结果,<cr> <strong>目的是将图像映射到UV空间</strong></td>
</tr>
<tr>
<td></td>
<td>同时更新$\alpha^l$</td>
</tr>
</tbody></table>
<p>在face rig parameterization内部，主要有4个部件，每个部件有3个阶段</p>
<ul>
<li>特征提取：image feature extraction</li>
<li>生成中性mesh(静态)：neutral shape decoding</li>
<li>生成表情mesh(动态)：expression deformation decoding</li>
<li>反射率颜色解码：albedo decoding</li>
</ul>
<h3 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h3><ul>
<li><p>输入：</p>
<ul>
<li><p>N张图片</p>
</li>
<li><p>N个上一级重建结果(这个是从哪来的？)</p>
</li>
</ul>
</li>
<li><p>过程：用N个共享权重的网络提取特征，最大池化合在一起，经过残差块，得到$F_{uv}$</p>
</li>
<li><p>目的： 提取出一个UV特征图 $F_{uv}$, 对输入图像进行编码，用于后面的解码</p>
</li>
</ul>
<p><img src="/./riggable-3d-face-reconstruction/imagefeatureextraction.png" alt="imagefeatureextraction"></p>
<h3 id="中性mesh"><a href="#中性mesh" class="headerlink" title="中性mesh"></a>中性mesh</h3><ul>
<li><p>输入：</p>
<ul>
<li>UV特征图</li>
<li>netural shape code $\alpha_{ns}$, 是$\alpha$ 中的一部分</li>
</ul>
</li>
<li><p>过程： CNN</p>
</li>
<li><p>目的：</p>
<ul>
<li>计算一个neutral shape $V_{ns}$: 3D face mesh in neutral expression</li>
</ul>
</li>
<li><p>公式定义：</p>
<p>  $$<br>  V_{ns} &#x3D; \overline V + B_{bfm}\alpha_{ns}^1 + \sum_{l&#x3D;1}^3F_{ns}^l(\alpha_{ns}^l; F_{uv}^l)<br>  $$</p>
<p>  在第一个阶段，使用了BFM模型。$\overline V , B_{bfm}$ 分别是平均人脸mesh和PCA中的基</p>
<blockquote>
<p>A 3d face model for pose and illumination invariant face recognition. In 2009 Sixth IEEE International Conference on Advanced Video and Signal Based Surveillance, pages 296–301, 2009. 4, 5</p>
</blockquote>
</li>
</ul>
<p><img src="/./riggable-3d-face-reconstruction/neutral-shape.png" alt="neutral-shape"></p>
<h3 id="表情mesh"><a href="#表情mesh" class="headerlink" title="表情mesh"></a>表情mesh</h3><ul>
<li><p>输入：</p>
<ul>
<li>UV特征图 $F_{uv}^{l}$</li>
<li>$\alpha_{exp}^{l} \in \alpha^l$</li>
<li>$\beta$</li>
</ul>
</li>
<li><p>过程：使用三个子网络来获取 $D_{exp}$</p>
</li>
<li><p>目的：<br>  计算在中性mesh上点的位移 $D_{exp}$</p>
</li>
<li><p>公式：<br>  $$<br>  D_{exp} &#x3D; F_{exp_cnn}(F_{exp_mlp}(\beta;\theta_{mlp}))\</p>
<p>  \theta_{mlp} &#x3D; F_{exp}(\alpha_{exp};F_{uv})<br>  $$</p>
<p>  在第一个阶段，使用了Facewarehouse模型，所以最终公式变为：</p>
<p>  $$<br>  D_{exp} &#x3D; B_{exp}F_{exp_mlp}^1(\beta;\theta_{mlp}^1) + \sum_{l&#x3D;2}^3 F_{exp_cnn}(F_{exp_mlp}(\beta;\theta_{mlp}))\<br>  $$</p>
<blockquote>
<p>Facewarehouse: A 3d facial expression database for visual computing. IEEE Trans. Vis. Comput. Graph., 20(3):413–425, 2013. 1, 2, 4</p>
</blockquote>
</li>
</ul>
<p><img src="/./riggable-3d-face-reconstruction/expression-def.png" alt="expression-def"></p>
<ul>
<li>最终mesh的表达方式：$V &#x3D; V_{ns} + D_{exp}$</li>
</ul>
<h3 id="反射率颜色"><a href="#反射率颜色" class="headerlink" title="反射率颜色"></a>反射率颜色</h3><ul>
<li><p>输入：</p>
<ul>
<li><p>UV图$F_{uv}$</p>
</li>
<li><p>反射率编码 albedo code: $\alpha_{alb}$</p>
</li>
</ul>
</li>
<li><p>过程：</p>
<ul>
<li>由于只有少量的高频细节会随着表情变化，首先在前两个阶段估计静态反射率，在第三阶段添加一个额外组件</li>
</ul>
</li>
<li><p>公式：</p>
<p>  <img src="/./riggable-3d-face-reconstruction/alb.png" alt="alb"></p>
<blockquote>
<p>bfm</p>
</blockquote>
</li>
</ul>
<h2 id="Learnable-Optimization"><a href="#Learnable-Optimization" class="headerlink" title="Learnable Optimization"></a>Learnable Optimization</h2><h3 id="Reconstruction-from-parameters"><a href="#Reconstruction-from-parameters" class="headerlink" title="Reconstruction from parameters"></a>Reconstruction from parameters</h3><p>经过$(V,A) &#x3D; Rig(\beta;\alpha,{I_i},{\hat{V}^{old}_i})$后，得到了一个mesh，将这个mesh投影到图片上，用<strong>现有的模型</strong>渲染光照效果</p>
<blockquote>
<p>A signal-processing framework for inverse rendering. In Proceedings of the 28th annual conference on Computer graphics and interactive techniques, pages 117–128, 2001. 5</p>
</blockquote>
<h3 id="Energy-Formulation"><a href="#Energy-Formulation" class="headerlink" title="Energy Formulation"></a>Energy Formulation</h3><h3 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h3><ol>
<li><p>去掉所有rig decoders，得到一个初始的重建结果。p参数由预训练的模型回归出来,$\gamma$由公式计算出来</p>
<blockquote>
<p>Deep facial non-rigid multi-view stereo. In IEEE Conf. Comput. Vis. Pattern Recog., pages 5850–5860, 2020. 2, 3, 4, 5, 6, 7</p>
</blockquote>
</li>
<li><p>多阶段中的一个阶段</p>
<ol>
<li>input images and per-image meshes</li>
<li>extract UV feature</li>
<li></li>
</ol>
</li>
</ol>
<h2 id="LOSS"><a href="#LOSS" class="headerlink" title="LOSS"></a>LOSS</h2><p><img src="/./riggable-3d-face-reconstruction/loss.png" alt="loss"></p>
<h2 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h2><ul>
<li>Stirling&#x2F;ESRC 3D<ul>
<li>100+ subjects</li>
<li>8 expression</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>3Dface</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>3D Human Pose Regression Using Graph Convolutional Network</title>
    <url>/2022/02/15/3dpose-paper/3D-Human-Pose-Regression-Using-Graph-Convolutional-Networkmy-software/</url>
    <content><![CDATA[<h1 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h1><p>图卷积网络以邻接矩阵的形式对人体骨骼结构信息进行编码，有利于更好的进行姿态估计</p>
<ul>
<li>网络：PoseGraphNet<ul>
<li>使用了一个适应性的邻接矩阵 ( an adaptive adjacency matrix ) 和特定于邻居组的核 (kernels specific to neighbor groups)</li>
<li>学习关节之间有趣的邻接关系 (adjacency relations ) ，这些关节没有物理连接，但是行为相似</li>
</ul>
</li>
<li>方法：2D → 3D</li>
<li>数据集：Human3.6M</li>
<li>性能：接近目前水平</li>
<li>参数：少得多</li>
</ul>
<h1 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h1><ul>
<li><p>骨架的结构约束等附加信息进一步提高了性能。一些早期的工作中，结构信息由一个单独的统计模型，或一个基本姿势字典提供给系统。这些类型的结构模型需要分别学习</p>
<ul>
<li>限制：由于学习的结构模型依赖于训练数据集，因此也限制了可能的三维姿态的数量。</li>
</ul>
</li>
<li><p>GCNs 提供了一个轻量级的解决方案表示人体的结构，不需要额外开销。</p>
</li>
<li><p>PoseGraphNet 模型类似于[6]，但参数少得多。在human3.6m 数据及上的性能优于[6]，与[5]接近</p>
</li>
<li><p>相关论文：</p>
<ul>
<li>[5] Yujun Cai, Liuhao Ge, Jun Liu, Jianfei Cai, Tat-Jen Cham, Junsong Y uan, and Nadia Magnenat Thalmann, “Exploiting Spatial-temporal Relationships for 3D Pose Estimation via Graph Convolutional Networks,” in<br>ICCV, 2019</li>
<li>[6] Julieta Martinez, Rayat Hossain, Javier Romero, and James J Little, “A simple yet effective baseline for 3d human pose estimation,” inICCV, 2017.</li>
<li>[8] Long Zhao, Xi Peng, Y u Tian, Mubbasir Kapadia, and Dimitris N Metaxas, “Semantic Graph Convolutional Networks for 3D Human Pose Regression,” inCVPR, 2019.</li>
<li>[9] Bardia Doosti, Shujon Naha, Majid Mirbagheri, and David J. Crandall, “Hope-Net: A graph-based model for hand-Object pose estimation,”CVPR, 2020.</li>
</ul>
</li>
</ul>
<h1 id="POSEGRAPHNET"><a href="#POSEGRAPHNET" class="headerlink" title="POSEGRAPHNET"></a>POSEGRAPHNET</h1><p><img src="/3D-Human-Pose-Regression-Using-Graph-Convolutional-Networkmy-software/image-20220216003625411.png" alt="image-20220216003625411"></p>
<ul>
<li>人体骨骼表示：$G &#x3D; (V,E)$，</li>
<li>$V$表示关节点的集合，</li>
<li>$E$ 表示关节之间连接的边集，这些边用邻接矩阵 $A\in\mathbb{R}^{N \times N}$表示，</li>
<li>该图由节点级的特征和邻接矩阵 $A$ 表示</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul>
<li>基于[6]，而不是[5,9]，因为该网络复杂度低，不利用骨架结构信息的情况下性能良好。与[6]相比，增加了结构信息和图卷积</li>
<li>除了训练图卷积层的可训练权值，还训练邻接矩阵（adaptive adjacency matrix），预定义的邻接矩阵代表默认的人体结构。</li>
<li>躯干相对四肢是稳定的，邻接矩阵可以学习对于不同邻居的不同贡献率，也学习没有物理上相连但行为相似的连接？</li>
</ul>
<h3 id="隐藏层计算"><a href="#隐藏层计算" class="headerlink" title="隐藏层计算"></a>隐藏层计算</h3><p><img src="/3D-Human-Pose-Regression-Using-Graph-Convolutional-Networkmy-software/image-20220219192646644.png" alt="image-20220219192646644"></p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>deeplearning</tag>
        <tag>3Dpose</tag>
      </tags>
  </entry>
  <entry>
    <title>A Gentle Introduction to Graph Neural Networks</title>
    <url>/2022/02/17/3dpose-paper/A-Gentle-Introduction-to-Graph-Neural-Networks/</url>
    <content><![CDATA[<h1 id="图神经网络"><a href="#图神经网络" class="headerlink" title="图神经网络"></a>图神经网络</h1><p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217170936126.png" alt="image-20220217170936126"></p>
<ul>
<li>什么样的数据可以表示成一张图</li>
<li>图跟其他数据有什么不同</li>
<li>GNN 的各个模块</li>
<li>GNN playground</li>
</ul>
<h1 id="什么样的数据可以表示成一张图"><a href="#什么样的数据可以表示成一张图" class="headerlink" title="什么样的数据可以表示成一张图"></a>什么样的数据可以表示成一张图</h1><h2 id="图是什么"><a href="#图是什么" class="headerlink" title="图是什么"></a>图是什么</h2><p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217171705110.png" alt="image-20220217171705110"></p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217171746654.png" alt="image-20220217171746654"></p>
<h2 id="数据如何表示成图"><a href="#数据如何表示成图" class="headerlink" title="数据如何表示成图"></a>数据如何表示成图</h2><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ul>
<li><p>一般情况下：三维的 tensor (e.g., $244 \times 244 \times 3$)</p>
</li>
<li><p>表示成图：</p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217172440822.png" alt="image-20220217172440822"></p>
</li>
</ul>
<h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul>
<li>表示成图：</li>
</ul>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217172711351.png" alt="image-20220217172711351"></p>
<h2 id="什么样的数据可以表示成图"><a href="#什么样的数据可以表示成图" class="headerlink" title="什么样的数据可以表示成图"></a>什么样的数据可以表示成图</h2><ul>
<li>图层面</li>
<li>顶点层面</li>
<li>边层面</li>
</ul>
<h3 id="图层面"><a href="#图层面" class="headerlink" title="图层面"></a>图层面</h3><ul>
<li>预测整个图的属性</li>
<li>如图像分类，情绪分析</li>
</ul>
<h3 id="顶点层面"><a href="#顶点层面" class="headerlink" title="顶点层面"></a>顶点层面</h3><ul>
<li>与每个节点的身份或角色有关</li>
<li>如图像分割，语义分割，预测文本中单词的词性</li>
</ul>
<h3 id="边层面"><a href="#边层面" class="headerlink" title="边层面"></a>边层面</h3><ul>
<li>预测顶点间的关系</li>
</ul>
<h2 id="图用到神经网络上的挑战"><a href="#图用到神经网络上的挑战" class="headerlink" title="图用到神经网络上的挑战"></a>图用到神经网络上的挑战</h2><ul>
<li>怎样表示图，使图与神经网络是兼容的</li>
<li>表示连接性的邻接矩阵，可能会有的问题：<ul>
<li>顶点多，矩阵很大，稀疏矩阵难以高效计算</li>
<li>一个图可以有多种邻接矩阵（顶点的排序不同），不能保证这些不同的矩阵在神经网络中产生相同的结果</li>
</ul>
</li>
</ul>
<h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217175346381.png" alt="image-20220217175346381"></p>
<h1 id="GNN"><a href="#GNN" class="headerlink" title="GNN"></a>GNN</h1><ul>
<li><p>GNN 是对图上所有的属性进行<strong>可以优化的变换</strong>（置换不变）</p>
</li>
<li><p>输入是图，输出是图</p>
</li>
<li><p>不会改变图的连接性，只改变顶点和边的属性</p>
</li>
</ul>
<h2 id="最简单的-GNN-模型"><a href="#最简单的-GNN-模型" class="headerlink" title="最简单的 GNN 模型"></a>最简单的 GNN 模型</h2><p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217195750251.png" alt="image-20220217195750251"></p>
<h3 id="GNN-输出"><a href="#GNN-输出" class="headerlink" title="GNN 输出"></a>GNN 输出</h3><ul>
<li><p>已知节点（边缘），预测节点（边缘）</p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217200401762.png" alt="image-20220217200401762"></p>
</li>
<li><p>节点中没有信息，通过边缘信息预测节点</p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217200507968.png" alt="image-20220217200507968"></p>
<ul>
<li>只有边信息，预测顶点<img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217200552495.png" alt="image-20220217200552495"></li>
</ul>
</li>
<li><p>只有节点信息，预测边</p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217200716833.png" alt="image-20220217200716833"></p>
</li>
<li><p>预测全局，类似于 CNN 的全局池化层</p>
</li>
</ul>
<h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217203422477.png" alt="image-20220217203422477"></p>
<h2 id="信息传递"><a href="#信息传递" class="headerlink" title="信息传递"></a>信息传递</h2><h3 id="最简单的方法"><a href="#最简单的方法" class="headerlink" title="最简单的方法"></a>最简单的方法</h3><p>顶点向量或边向量单独输入到 MLP </p>
<h3 id="信息传递的方法"><a href="#信息传递的方法" class="headerlink" title="信息传递的方法"></a>信息传递的方法</h3><p>一个顶点的向量和邻居向量加和，类似于卷积（卷积核的权重都一样），卷积过程中的多通道对应于一个顶点向量的维度</p>
<ul>
<li><p>节点之间的信息汇聚</p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217204557150.png" alt="image-20220217204557150"></p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217210054621.png" alt="image-20220217210054621"></p>
</li>
<li><p>节点和边之间的信息汇聚</p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217210818660.png" alt="image-20220217210818660"></p>
</li>
</ul>
<h3 id="全局信息"><a href="#全局信息" class="headerlink" title="全局信息"></a>全局信息</h3><p>全局信息 $U$ 和所有的顶点、边相连。在汇聚顶点和边的时候都会用到全局信息。</p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220217211211018.png" alt="image-20220217211211018"></p>
<h1 id="超参数对模型的影响"><a href="#超参数对模型的影响" class="headerlink" title="超参数对模型的影响"></a>超参数对模型的影响</h1><h1 id="GNN-相关话题"><a href="#GNN-相关话题" class="headerlink" title="GNN 相关话题"></a>GNN 相关话题</h1><h2 id="mutigraph"><a href="#mutigraph" class="headerlink" title="mutigraph"></a>mutigraph</h2><p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220219160758420.png" alt="image-20220219160758420"></p>
<h2 id="hypergraph"><a href="#hypergraph" class="headerlink" title="hypergraph"></a>hypergraph</h2><p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220219160807852.png" alt="image-20220219160807852"></p>
<h2 id="对图进行采样"><a href="#对图进行采样" class="headerlink" title="对图进行采样"></a>对图进行采样</h2><ul>
<li><p>网络和比较深，图比较大的时候，最后一层做信息汇聚的时候保存的中间变量很多，计算量可能无法承受</p>
</li>
<li><p>采样方法（有点像dropout）：</p>
<p><img src="/A-Gentle-Introduction-to-Graph-Neural-Networks/image-20220219161211192.png" alt="image-20220219161211192"></p>
</li>
</ul>
<h2 id="batching"><a href="#batching" class="headerlink" title="batching"></a>batching</h2><ul>
<li>每一个顶点的邻居个数不一样，怎么合并成一个规则的张量？</li>
</ul>
<h2 id="图神经网络的假设"><a href="#图神经网络的假设" class="headerlink" title="图神经网络的假设"></a>图神经网络的假设</h2><ul>
<li>图的对称性：交换顶点的顺序，GNN 对它的作用保持不变</li>
</ul>
<h2 id="汇聚操作"><a href="#汇聚操作" class="headerlink" title="汇聚操作"></a>汇聚操作</h2><ul>
<li>min, max, mean 都差不多</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>艺术哲学与审美问题</title>
    <url>/2022/01/30/art-caligraphy/philosopyh-of-art/</url>
    <content><![CDATA[<h1 id="艺术哲学的旨趣"><a href="#艺术哲学的旨趣" class="headerlink" title="艺术哲学的旨趣"></a>艺术哲学的旨趣</h1><p>当我们阐发艺术作品重大价值的时候，它一定事关人生</p>
<h2 id="哲学代表一种修养"><a href="#哲学代表一种修养" class="headerlink" title="哲学代表一种修养"></a>哲学代表一种修养</h2><ul>
<li>哲学并没有使用价值</li>
<li>每个人的艺术生活差别很大，不同的人有不同的爱好</li>
<li>在艺术作品的接受中，会引起比较深入的思考，如果深入到一定层面那就是哲学，它代表了一种修养</li>
</ul>
<h2 id="艺术是人类最高的精神活动之一（超验）"><a href="#艺术是人类最高的精神活动之一（超验）" class="headerlink" title="艺术是人类最高的精神活动之一（超验）"></a>艺术是人类最高的精神活动之一（超验）</h2><p>黑格尔：绝对精神的三个领域：艺术、宗教、哲学。</p>
<p>尼采：我们通过科学，从事物中发现的东西，其实是预先塞进去的，塞进去叫艺术和宗教，重新把它领出来，叫科学。</p>
<ul>
<li>哲学<ul>
<li>不离日用常行内，直造先天未画前</li>
</ul>
</li>
<li>艺术<ul>
<li>言有尽而意无穷</li>
</ul>
</li>
<li>宗教</li>
</ul>
<h2 id="什么是创新的源泉"><a href="#什么是创新的源泉" class="headerlink" title="什么是创新的源泉"></a>什么是创新的源泉</h2><ul>
<li>性灵</li>
</ul>
<h2 id="美与真理的关系"><a href="#美与真理的关系" class="headerlink" title="美与真理的关系"></a>美与真理的关系</h2><ol>
<li>什么是美的？</li>
<li>美是什么？</li>
</ol>
<ul>
<li>艺术批评的停止，表示这个民族的艺术创作的衰落</li>
<li>审美标准有不同</li>
<li>美不是实体，对美的本质探讨，应当转变为对艺术本性的讨论<ul>
<li>这样一个转折就是艺术哲学取代美学</li>
</ul>
</li>
<li>口味无争辩，趣味有高下</li>
<li>我们始终在接触作品的过程中，不知不觉地从事着最起码的艺术批评</li>
</ul>
<h2 id="艺术判断"><a href="#艺术判断" class="headerlink" title="艺术判断"></a>艺术判断</h2><ul>
<li>主观的感觉判断具有个体的相对性</li>
<li>审美存在个体差异</li>
<li>在艺术和审美的领域，我们都是为他人做判断</li>
<li>审美判断是感性普遍性质判断，不是对感性特殊型与个别性的判断。<ul>
<li>花是植物的一部分（理性判断）</li>
<li>花是香的（感官 “判断”）</li>
<li>花是美的（审美判断，感性且普遍）</li>
</ul>
</li>
</ul>
<h2 id="审美判断的普遍性"><a href="#审美判断的普遍性" class="headerlink" title="审美判断的普遍性"></a>审美判断的普遍性</h2><p>如果屈服于权威性，就不必讨论艺术哲学了</p>
<ul>
<li>艺术的历史表明了：美的客观性是可疑的</li>
<li>伟大的艺术作品一定是民族的，也是世界的</li>
<li>美是<strong>普遍的</strong>，是<strong>客观的</strong></li>
<li>美是非逻辑的，不建立在概念的基础上</li>
</ul>
<h3 id="体和用"><a href="#体和用" class="headerlink" title="体和用"></a>体和用</h3><p>体是根据，才有效用，没有时间上的关系</p>
<ul>
<li>人类对外部事物的感知有一种先验共通感（体）</li>
<li>审美判断（用）</li>
</ul>
<h3 id="康德的三大批判主题"><a href="#康德的三大批判主题" class="headerlink" title="康德的三大批判主题"></a>康德的三大批判主题</h3><ul>
<li>第一大批判的主题：对外部事物的客观可靠的知识（也就是真）如何可能（真）</li>
<li>第二大批判的主题：人类社会的自由如何可能，善如何可能（善）</li>
<li>第三大批判的主题（判断力批判，判断力就是审美判断的能力）：美是如何可能的，美的存在事实（美）<ul>
<li>愉悦因判断而生，判断因愉悦而生</li>
<li>愉悦 → 判断：因为花的气味感到快适，所以说花是香的（没有时间上的先后）</li>
<li>判断 → 愉悦：人类的先验共通感放到这个事物上，成功了，所以是美的（没有时间上的先后）</li>
</ul>
</li>
</ul>
<h2 id="哲学与科学的差别"><a href="#哲学与科学的差别" class="headerlink" title="哲学与科学的差别"></a>哲学与科学的差别</h2><ul>
<li>科学从事实出发，属于实证主义的精神</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>art</category>
      </categories>
      <tags>
        <tag>art</tag>
      </tags>
  </entry>
  <entry>
    <title>章法</title>
    <url>/2022/01/31/art-caligraphy/zhangfa/</url>
    <content><![CDATA[<h1 id="什么是章法"><a href="#什么是章法" class="headerlink" title="什么是章法"></a>什么是章法</h1><ol>
<li>诗文布局谋篇的法则</li>
<li>办事的程序和规则</li>
<li>古历法名词</li>
</ol>
<ul>
<li>在书法中，章法指一件作品中各种视觉因素的组织。</li>
</ul>
<h2 id="章法的重要性"><a href="#章法的重要性" class="headerlink" title="章法的重要性"></a>章法的重要性</h2><ul>
<li>王羲之《笔势论十二章》： 方圆大小各不相犯，倘一点失所，若美人之病一目。一画失节，如壮士之折一肱。</li>
<li>孙过庭《书谱》： 一点成一字之规，一字乃终篇之准。</li>
</ul>
<h2 id="章法的核心规律"><a href="#章法的核心规律" class="headerlink" title="章法的核心规律"></a>章法的核心规律</h2><ul>
<li>文似看山不喜平，书法同样适用</li>
<li>单字，逐字，行间的布白关系</li>
<li>结体在单字，章法是单字以外的整体问题</li>
<li>有变化，变化中有统一</li>
<li>文质相称</li>
<li>自然而然</li>
<li>平中见奇，远山近树</li>
<li>变而有度</li>
<li>为我所用</li>
</ul>
<h1 id="章法与单字"><a href="#章法与单字" class="headerlink" title="章法与单字"></a>章法与单字</h1><h1 id="名帖"><a href="#名帖" class="headerlink" title="名帖"></a>名帖</h1><ul>
<li>杨凝式韭花帖（空灵）</li>
</ul>
<p><img src="/zhangfa/image-20220131011506588.png" alt="image-20220131011506588"></p>
]]></content>
      <categories>
        <category>art</category>
      </categories>
      <tags>
        <tag>art</tag>
        <tag>calligraphy</tag>
      </tags>
  </entry>
  <entry>
    <title>GAN:Generative Adversarial Net</title>
    <url>/2022/07/30/classical-paper/gan/</url>
    <content><![CDATA[<p>G: 生成模型，用于捕获数据分布，输入随机噪声<br>D: 判别模型，判断样本的来源（G或者真实样本）</p>
<p>生成器：以图片为例，学习一个<em>pg</em>的分布。给一个随机噪声pz(z)作为输入，映射到真实的图片x。G(z;$\theta$)</p>
<p>D(x;$\theta d$)输出一个标量，表示x来自真实数据还是生成器。</p>
<p><img src="/./gan/aimfunc.png" alt="aimfunc"></p>
<p>先更新判别模型，再更新生成器<br><img src="/./gan/algorithm.png" alt="algorithm"></p>
<h2 id="KL散度，JS散度"><a href="#KL散度，JS散度" class="headerlink" title="KL散度，JS散度"></a>KL散度，JS散度</h2><h3 id="KL散度-相对熵，是两个概率分部的差异"><a href="#KL散度-相对熵，是两个概率分部的差异" class="headerlink" title="KL散度(相对熵，是两个概率分部的差异)"></a>KL散度(相对熵，是两个概率分部的差异)</h3><p>对于分类问题：</p>
<table>
<thead>
<tr>
<th>(a cat image)</th>
<th>cat</th>
<th>dog</th>
</tr>
</thead>
<tbody><tr>
<td>predict</td>
<td>0.9</td>
<td>0.1</td>
</tr>
<tr>
<td>label</td>
<td>1.0</td>
<td>0.0</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>deeplearning</tag>
      </tags>
  </entry>
  <entry>
    <title>Principle of Automatic Control</title>
    <url>/2021/02/13/course-note/Principle-of-Automatic-Control/</url>
    <content><![CDATA[<!-- vim-markdown-toc Redcarpet -->

<ul>
<li><a href="#1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD">1.基本概念和术语</a><ul>
<li><a href="#1-1-%E5%9F%BA%E6%9C%AC%E5%85%83%E4%BB%B6">1.1.基本元件</a></li>
<li><a href="#1-2-%E6%9C%AF%E8%AF%AD">1.2.术语</a></li>
<li><a href="#1-3-%E8%87%AA%E5%8A%A8%E6%8E%A7%E5%88%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86">1.3.自动控制的基本原理</a></li>
<li><a href="#1-4-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%86%E7%B1%BB">1.4.控制系统的分类</a></li>
<li><a href="#1-5-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A6%81%E6%B1%82">1.5.控制系统的基本要求</a></li>
<li><a href="#1-6-%E5%BD%B1%E5%93%8D%E7%B3%BB%E7%BB%9F%E5%93%8D%E5%BA%94%E7%9A%84%E5%9B%A0%E7%B4%A0">1.6. 影响系统响应的因素</a></li>
</ul>
</li>
<li><a href="#2-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA%E6%A8%A1%E5%9E%8B">2.控制系统的输入-输出模型</a><ul>
<li><a href="#2-1-%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B%EF%BC%88%E6%97%B6%E5%9F%9F%EF%BC%89">2.1.微分方程（时域）</a><ul>
<li><a href="#2-1-1-%E5%9B%9B%E7%A7%8D%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BB%BA%E6%A8%A1">2.1.1.四种系统的建模</a></li>
</ul>
</li>
<li><a href="#2-2-%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0-s">2.2.传递函数$(s)$</a><ul>
<li><a href="#2-2-1-%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89">2.2.1.传递函数定义</a></li>
<li><a href="#2-2-2-%E8%A1%A8%E7%A4%BA%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%96%B9%E6%B3%95">2.2.2.表示系统的方法</a><ul>
<li><a href="#%E6%96%B9%E6%A1%86%E5%9B%BE">方框图</a></li>
<li><a href="#%E4%BF%A1%E5%8F%B7%E6%B5%81%E5%9B%BE">信号流图</a></li>
<li><a href="#%E6%A2%85%E6%A3%AE%E5%85%AC%E5%BC%8F">梅森公式</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#2-3-%E9%A2%91%E5%9F%9F%E7%89%B9%E6%80%A7%E5%87%BD%E6%95%B0-j-omega">2.3.频域特性函数$(j\omega)$</a><ul>
<li><a href="#2-3-1-%E9%A2%91%E5%9F%9F%E7%89%B9%E6%80%A7%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89">2.3.1.频域特性函数定义</a></li>
<li><a href="#2-3-2-%E9%A2%91%E5%9F%9F%E7%89%B9%E6%80%A7%E7%9A%84%E5%9B%BE%E7%A4%BA%E6%96%B9%E6%B3%95">2.3.2.频域特性的图示方法</a><ul>
<li><a href="#%E5%A5%88%E5%A5%8E%E6%96%AF%E7%89%B9%E5%9B%BE">奈奎斯特图</a></li>
<li><a href="#%E4%BC%AF%E5%BE%B7%E5%9B%BE">伯德图</a></li>
</ul>
</li>
<li><a href="#2-3-3-%E5%85%B8%E5%9E%8B%E7%8E%AF%E8%8A%82%E7%9A%84%E9%A2%91%E5%9F%9F%E7%89%B9%E6%80%A7">2.3.3.典型环节的频域特性</a><ul>
<li><a href="#%E6%8C%AF%E8%8D%A1%E7%8E%AF%E8%8A%82%E7%9A%84%E9%A2%91%E7%8E%87%E7%89%B9%E6%80%A7">振荡环节的频率特性</a></li>
</ul>
</li>
<li><a href="#2-3-4-%E6%9C%80%E5%B0%8F%E7%9B%B8%E4%BD%8D%E7%B3%BB%E7%BB%9F">2.3.4 最小相位系统</a></li>
</ul>
</li>
<li><a href="#2-4-%E9%87%87%E6%A0%B7%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F">2.4.采样控制系统</a><ul>
<li><a href="#2-4-2-%E9%87%87%E6%A0%B7%E5%99%A8">2.4.2.采样器</a></li>
<li><a href="#2-4-3-%E9%9B%B6%E9%98%B6%E4%BF%9D%E6%8C%81%E5%99%A8%EF%BC%88zoh%EF%BC%89">2.4.3.零阶保持器（ZOH）</a></li>
<li><a href="#2-4-4-%E5%B7%AE%E5%88%86%E6%96%B9%E7%A8%8B">2.4.4.差分方程</a></li>
<li><a href="#2-4-5-%E8%84%89%E5%86%B2%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0">2.4.5.脉冲传递函数</a><ul>
<li><a href="#%E9%87%87%E6%A0%B7%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%81%94%E6%8E%A5">采样系统的联接</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#3-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%9E%8B">3.控制系统的状态空间模型</a><ul>
<li><a href="#3-1-%E7%8A%B6%E6%80%81%E6%96%B9%E7%A8%8B%E5%92%8C%E8%BE%93%E5%87%BA%E6%96%B9%E7%A8%8B">3.1.状态方程和输出方程</a></li>
<li><a href="#3-2-%E8%BF%9E%E7%BB%AD%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%9E%8B">3.2. 连续状态空间模型</a><ul>
<li><a href="#3-2-1-%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%9E%8B-%3E-io%E6%A8%A1%E5%9E%8B%EF%BC%88%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E7%9F%A9%E9%98%B5%EF%BC%89">3.2.1. 状态空间模型 &#x3D;&gt; IO模型（传递函数矩阵）</a></li>
<li><a href="#3-2-2-io%E6%A8%A1%E5%9E%8B%EF%BC%88%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E7%9F%A9%E9%98%B5%EF%BC%89-%3E-%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%9E%8B">3.2.2. IO模型（传递函数矩阵）&#x3D;&gt; 状态空间模型</a></li>
</ul>
</li>
<li><a href="#3-3-%E8%BF%9E%E7%BB%AD%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%B1%82%E8%A7%A3-%E5%81%87%E8%AE%BEd%E4%B8%BA0">3.3.连续状态空间求解(假设D为0)</a><ul>
<li><a href="#3-3-1-%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9F%A9%E9%98%B5">3.3.1.状态转移矩阵</a></li>
<li><a href="#3-3-2-%E7%BA%BF%E6%80%A7%E5%AE%9A%E5%B8%B8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%85%A8%E5%93%8D%E5%BA%94">3.3.2.线性定常系统的全响应</a></li>
</ul>
</li>
<li><a href="#3-4-%E7%A6%BB%E6%95%A3%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%9E%8B">3.4.离散状态空间模型</a><ul>
<li><a href="#3-4-1-%E8%BF%9E%E7%BB%AD%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%9E%8B-%3E%E7%A6%BB%E6%95%A3%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%9E%8B">3.4.1. 连续状态空间模型&#x3D;&gt;离散状态空间模型</a></li>
<li><a href="#3-4-2-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%A8%A1%E5%9E%8B%EF%BC%88%E8%84%89%E5%86%B2%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%EF%BC%89-%3E%E7%A6%BB%E6%95%A3%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%A8%A1%E5%9E%8B">3.4.2. 输入输出模型（脉冲传递函数）&#x3D;&gt;离散状态空间模型</a></li>
</ul>
</li>
<li><a href="#3-5-%E7%A6%BB%E6%95%A3%E7%8A%B6%E6%80%81%E7%A9%BA%E9%97%B4%E6%B1%82%E8%A7%A3">3.5. 离散状态空间求解</a><ul>
<li><a href="#3-5-1-%E7%A6%BB%E6%95%A3%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E7%9F%A9%E9%98%B5">3.5.1. 离散系统的状态转移矩阵</a></li>
<li><a href="#3-5-2-%E6%B1%82%E8%A7%A3%E7%BA%BF%E6%80%A7%E7%A6%BB%E6%95%A3%E7%B3%BB%E7%BB%9F">3.5.2. 求解线性离散系统</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#4-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%88%86%E6%9E%90">4.控制系统的稳定性分析</a><ul>
<li><a href="#4-1-%E6%9D%8E%E9%9B%85%E6%99%AE%E8%AF%BA%E5%A4%AB%E7%A8%B3%E5%AE%9A%E6%80%A7%E7%9A%84%E6%A6%82%E5%BF%B5">4.1.李雅普诺夫稳定性的概念</a></li>
<li><a href="#4-2-%E7%BA%BF%E6%80%A7%E5%AE%9A%E5%B8%B8%E7%B3%BB%E7%BB%9F%E7%A8%B3%E5%AE%9A%E7%9A%84%E5%85%85%E8%A6%81%E6%9D%A1%E4%BB%B6">4.2.线性定常系统稳定的充要条件</a></li>
<li><a href="#4-3-%E7%B3%BB%E7%BB%9F%E7%A8%B3%E5%AE%9A%E6%80%A7%E7%9A%84%E4%BB%A3%E6%95%B0%E5%88%A4%E6%8D%AE">4.3.系统稳定性的代数判据</a></li>
<li><a href="#4-4-%E6%A0%B9%E8%BD%A8%E8%BF%B9">4.4.根轨迹</a><ul>
<li><a href="#4-4-1-%E4%B8%A4%E4%B8%AA%E6%A0%B9%E6%9C%AC%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6%EF%BC%9A%E5%B9%85%E5%80%BC%E6%9D%A1%E4%BB%B6%E5%92%8C%E7%9B%B8%E8%A7%92%E6%9D%A1%E4%BB%B6">4.4.1.两个根本约束条件：幅值条件和相角条件</a></li>
<li><a href="#4-4-2-%E6%A0%B9%E8%BD%A8%E8%BF%B9%E7%BB%98%E5%88%B6%E8%A7%84%E5%88%99">4.4.2.根轨迹绘制规则</a></li>
</ul>
</li>
<li><a href="#4-5-%E5%A5%88%E5%A5%8E%E6%96%AF%E7%89%B9%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%88%A4%E6%8D%AE">4.5.奈奎斯特稳定性判据</a><ul>
<li><a href="#4-5-1-%E7%A8%B3%E5%AE%9A%E8%A3%95%E5%BA%A6">4.5.1. 稳定裕度</a></li>
</ul>
</li>
<li><a href="#4-6-%E6%9D%8E%E9%9B%85%E6%99%AE%E8%AF%BA%E5%A4%AB%E7%AC%AC%E4%BA%8C%E6%B3%95">4.6. 李雅普诺夫第二法</a></li>
</ul>
</li>
<li><a href="#5-%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%97%B6%E5%9F%9F%E8%BF%90%E5%8A%A8%E5%88%86%E6%9E%90">5.控制系统的时域运动分析</a><ul>
<li><a href="#5-1-%E6%97%B6%E5%9F%9F%E5%93%8D%E5%BA%94%E6%B1%82%E8%A7%A3">5.1.时域响应求解</a><ul>
<li><a href="#5-1-1-%E8%BF%9E%E7%BB%AD%E7%B3%BB%E7%BB%9F">5.1.1.连续系统</a></li>
<li><a href="#5-1-2-%E7%A6%BB%E6%95%A3%E7%B3%BB%E7%BB%9F">5.1.2.离散系统</a></li>
</ul>
</li>
<li><a href="#5-2-%E7%9E%AC%E6%80%81%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87">5.2.瞬态性能指标</a></li>
<li><a href="#5-3-%E4%B8%80%E9%98%B6%E7%B3%BB%E7%BB%9F%E7%9E%AC%E6%80%81%E6%80%A7%E8%83%BD">5.3.一阶系统瞬态性能</a><ul>
<li><a href="#5-3-1-%E6%9E%81%E7%82%B9%E5%88%86%E5%B8%83">5.3.1.极点分布</a></li>
<li><a href="#5-3-2-%E9%98%B6%E8%B7%83%E5%93%8D%E5%BA%94">5.3.2.阶跃响应</a></li>
</ul>
</li>
<li><a href="#5-4-%E4%BA%8C%E9%98%B6%E7%B3%BB%E7%BB%9F%E7%9E%AC%E6%80%81%E6%80%A7%E8%83%BD">5.4.二阶系统瞬态性能</a><ul>
<li><a href="#5-4-1-%E6%9E%81%E7%82%B9%E5%88%86%E5%B8%83">5.4.1.极点分布</a></li>
<li><a href="#5-4-2-%E9%98%B6%E8%B7%83%E5%93%8D%E5%BA%94">5.4.2. 阶跃响应</a></li>
<li><a href="#5-4-3-%E4%BA%8C%E9%98%B6%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E6%94%B9%E5%96%84">5.4.3. 二阶系统性能改善</a></li>
</ul>
</li>
<li><a href="#5-5-%E9%AB%98%E9%98%B6%E7%B3%BB%E7%BB%9F">5.5 高阶系统</a></li>
<li><a href="#5-6-%E7%A8%B3%E6%80%81%E8%AF%AF%E5%B7%AE%E5%88%86%E6%9E%90">5.6.稳态误差分析</a></li>
</ul>
</li>
<li><a href="#7-%E6%A0%A1%E6%AD%A3">7. 校正</a><ul>
<li><a href="#7-1-%E9%99%84%E5%8A%A0%E9%9B%B6%E6%9E%81%E7%82%B9%E5%AF%B9%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D">7.1 附加零极点对系统性能的影响</a><ul>
<li><a href="#%E5%BC%80%E7%8E%AF%E9%9B%B6%E6%9E%81%E7%82%B9">开环零极点</a></li>
<li><a href="#%E9%97%AD%E7%8E%AF%E9%9B%B6%E6%9E%81%E7%82%B9">闭环零极点</a></li>
<li><a href="#%E5%8E%9F%E7%82%B9%E9%99%84%E8%BF%91%E5%BC%80%E7%8E%AF%E5%81%B6%E6%9E%81%E5%AD%90">原点附近开环偶极子</a></li>
</ul>
</li>
<li><a href="#7-2-%E6%A0%B9%E8%BD%A8%E8%BF%B9%E6%A0%A1%E6%AD%A3">7.2.根轨迹校正</a></li>
</ul>
</li>
<li><a href="#%E9%99%84%E5%BD%95">附录</a><ul>
<li><a href="#%E6%8B%89%E6%B0%8F%E5%8F%98%E6%8D%A2%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E5%AE%9A%E7%90%86">拉氏变换几个重要定理</a></li>
<li><a href="#z%E5%8F%98%E6%8D%A2%E5%87%A0%E4%B8%AA%E9%87%8D%E8%A6%81%E5%AE%9A%E7%90%86">Z变换几个重要定理</a></li>
<li><a href="#%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0%E6%8B%89%E6%B0%8F%E5%8F%98%E6%8D%A2%E5%92%8Cz%E5%8F%98%E6%8D%A2">常见函数拉氏变换和Z变换</a></li>
<li><a href="#%E5%85%B8%E5%9E%8B%E7%8E%AF%E8%8A%82%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0%E5%92%8C%E9%A2%91%E7%8E%87%E7%89%B9%E6%80%A7">典型环节传递函数和频率特性</a></li>
</ul>
</li>
</ul>
<!-- vim-markdown-toc -->

<h1 id="1-基本概念和术语"><a href="#1-基本概念和术语" class="headerlink" title="1.基本概念和术语"></a>1.基本概念和术语</h1><h2 id="1-1-基本元件"><a href="#1-1-基本元件" class="headerlink" title="1.1.基本元件"></a>1.1.基本元件</h2><ul>
<li><p>给定：给出被控量应取的值</p>
</li>
<li><p>测量：检测被控量大小</p>
</li>
<li><p>比较：得到给定值与被控量之间的误差。常用差动放大器、电桥等。计算机控制系统中直接进行数值计算。</p>
</li>
<li><p>放大：放大误差信号，驱动执行机构。可以是电子元件网络，也可以是电机放大器等。</p>
</li>
<li><p>执行：执行控制命令，驱动被控对象。</p>
</li>
<li><p>校正：改善系统的性能。使用电路系统、计算机程序实现</p>
</li>
<li><p>能源：提供能源</p>
</li>
</ul>
<h2 id="1-2-术语"><a href="#1-2-术语" class="headerlink" title="1.2.术语"></a>1.2.术语</h2><ul>
<li><p>被控量：被测量和被控制的量</p>
</li>
<li><p>控制量：由控制器改变的量</p>
</li>
<li><p>对象：一个设备</p>
</li>
<li><p>系统：一些部件的组合</p>
</li>
<li><p>扰动：一种对系统的输出量产生不利影响的因素或信号。分为内部扰动和外部扰动</p>
<p>  外部扰动：增加扰动输入</p>
<p>  内部扰动：传递函数不稳定</p>
</li>
<li><p>系统的型别：v表示开环传递函数积分环节的个数，v&#x3D;几,就是几型系统。</p>
</li>
</ul>
<h2 id="1-3-自动控制的基本原理"><a href="#1-3-自动控制的基本原理" class="headerlink" title="1.3.自动控制的基本原理"></a>1.3.自动控制的基本原理</h2><ul>
<li><p>反馈控制</p>
</li>
<li><p>前馈控制（顺馈控制）</p>
<p>  <font color="#000066">介绍一下前馈控制:</font><br /><br>  测量扰动后经过补偿装置直接接到系统输入端。</p>
</li>
</ul>
<p><font color="#000066">对比闭环控制和开环控制:</font><br /> </p>
<table>
<thead>
<tr>
<th>开环</th>
<th>闭环</th>
</tr>
</thead>
<tbody><tr>
<td>结构简单</td>
<td>结构复杂</td>
</tr>
<tr>
<td>抗干扰能力弱</td>
<td>抗干扰能力强</td>
</tr>
</tbody></table>
<h2 id="1-4-控制系统的分类"><a href="#1-4-控制系统的分类" class="headerlink" title="1.4.控制系统的分类"></a>1.4.控制系统的分类</h2><ul>
<li><p>恒值调节系统和随动系统</p>
</li>
<li><p>线性系统和非线性系统</p>
<p>  <font color="#000066">线性和非线性的区别:</font><br /></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>线性</th>
<th>非线性</th>
</tr>
</thead>
<tbody><tr>
<td>满足叠加定理</td>
<td>不满足叠加定理</td>
</tr>
<tr>
<td>稳定性只和系统结构参数有关</td>
<td></td>
</tr>
<tr>
<td>正弦信号的输入，输出同频</td>
<td></td>
</tr>
<tr>
<td>会产生自激振荡</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><p>定常系统和时变系统</p>
</li>
<li><p>连续系统和离散系统</p>
</li>
</ul>
<h2 id="1-5-控制系统的基本要求"><a href="#1-5-控制系统的基本要求" class="headerlink" title="1.5.控制系统的基本要求"></a>1.5.控制系统的基本要求</h2><ul>
<li>稳定性</li>
<li>瞬态性能</li>
<li>稳态性能</li>
</ul>
<h2 id="1-6-影响系统响应的因素"><a href="#1-6-影响系统响应的因素" class="headerlink" title="1.6. 影响系统响应的因素"></a>1.6. 影响系统响应的因素</h2><ul>
<li>输入         $\to 1(t)$</li>
<li>初始条件     $\to$ 0初始 (传递函数是在0初始条件下（0状态）)</li>
<li>系统的结构参数</li>
</ul>
<h1 id="2-控制系统的输入-输出模型"><a href="#2-控制系统的输入-输出模型" class="headerlink" title="2.控制系统的输入-输出模型"></a>2.控制系统的输入-输出模型</h1><p><font color="#000066">控制系统的数学模型有:</font><br /> </p>
<table>
<thead>
<tr>
<th>域</th>
<th>连续</th>
<th>离散</th>
</tr>
</thead>
<tbody><tr>
<td>t</td>
<td>微分方程</td>
<td>差分方程</td>
</tr>
<tr>
<td>t</td>
<td>状态方程</td>
<td>状态方程</td>
</tr>
<tr>
<td>s&#x2F;z</td>
<td>传递函数</td>
<td>脉冲传递函数</td>
</tr>
<tr>
<td>s&#x2F;z</td>
<td>方框图</td>
<td>方框图</td>
</tr>
<tr>
<td>j</td>
<td>频率特性</td>
<td>频率特性</td>
</tr>
</tbody></table>
<ol>
<li>微分方程</li>
<li>传递函数</li>
</ol>
<h2 id="2-1-微分方程（时域）"><a href="#2-1-微分方程（时域）" class="headerlink" title="2.1.微分方程（时域）"></a>2.1.微分方程（时域）</h2><h3 id="2-1-1-四种系统的建模"><a href="#2-1-1-四种系统的建模" class="headerlink" title="2.1.1.四种系统的建模"></a>2.1.1.四种系统的建模</h3><ul>
<li>机械系统</li>
</ul>
<p><img src="/./Principle-of-Automatic-Control/21zhixian.png" alt="avatar"></p>
<p><img src="/./Principle-of-Automatic-Control/21xuanzhuan.png" alt="avatar"></p>
<ul>
<li><p>电路系统</p>
<p>  基尔霍夫定律</p>
</li>
<li><p>机电系统</p>
<p>  电机就是一个典型的机电系统，从三个方面列方程：</p>
<ol>
<li><p>机械部分</p>
</li>
<li><p>电磁部分</p>
</li>
<li><p>机电耦合部分</p>
</li>
</ol>
</li>
<li><p>液位系统</p>
<p>  液面高度与流量看做线性关系（层流为线性关系，紊流近似为线性关系）</p>
<p>  设$q_i$和$q_o$分别为输入和输出流量，$C$为容器横截面积，$h$为当前页面高度，$R$为液阻</p>
<p>  $$Cdh &#x3D; (q_i-q_o)dt$$<br>  $$q_o &#x3D; \dfrac hR$$</p>
<p>  液位系统的运动方程：</p>
<p>  $$RC\dfrac{dh}{dt}+h&#x3D;Rq_i$$</p>
</li>
</ul>
<h2 id="2-2-传递函数-s"><a href="#2-2-传递函数-s" class="headerlink" title="2.2.传递函数$(s)$"></a>2.2.传递函数$(s)$</h2><h3 id="2-2-1-传递函数定义"><a href="#2-2-1-传递函数定义" class="headerlink" title="2.2.1.传递函数定义"></a>2.2.1.传递函数定义</h3><p>$$ G(s) &#x3D; \dfrac {Y(s)}{U(s)} &#x3D; K_g \dfrac{\prod_{i&#x3D;1}^m(s+z_i)}{\prod_{j&#x3D;1}^n(s+p_j)} $$</p>
<ul>
<li><p>$K_g$ 称为 <strong>传递函数的传递系数</strong> 或 <strong>根轨迹增益</strong> (首1)</p>
</li>
<li><p>开环增益（尾1）</p>
</li>
<li><p>反馈：$W(s) &#x3D; \dfrac{G(s)}{1+G(s)F(s)}$ </p>
<p>  其中 $1+G(s)F(s)&#x3D;0$ 称为闭环系统的特征方程</p>
<p>  反馈系统对于扰动有较好的抑制作用</p>
</li>
</ul>
<h3 id="2-2-2-表示系统的方法"><a href="#2-2-2-表示系统的方法" class="headerlink" title="2.2.2.表示系统的方法"></a>2.2.2.表示系统的方法</h3><h4 id="方框图"><a href="#方框图" class="headerlink" title="方框图"></a>方框图</h4><h4 id="信号流图"><a href="#信号流图" class="headerlink" title="信号流图"></a>信号流图</h4><h4 id="梅森公式"><a href="#梅森公式" class="headerlink" title="梅森公式"></a>梅森公式</h4><p>$$ G(s) &#x3D; \dfrac1{\Delta(s)}\sum_iQ_i(s)\Delta_i(s)$$</p>
<ul>
<li><p>$\Delta(s) &#x3D; 1$ - 所有不同回路的传递函数之和 + 每两个不接触回路的传递函数乘积之和 - 每三个不接触回路的传递函数乘积之和 + … </p>
</li>
<li><p>$Q_i(s)$ 从该输入到该输出的某前向通道的传递函数</p>
</li>
<li><p>$\Delta_i(s)$ 对$\Delta(s)$操作，将其中与$Q_i$接触的回路传递函数置0</p>
</li>
<li><p>$\Delta(s)$ 是系统的特征式</p>
</li>
</ul>
<h2 id="2-3-频域特性函数-j-omega"><a href="#2-3-频域特性函数-j-omega" class="headerlink" title="2.3.频域特性函数$(j\omega)$"></a>2.3.频域特性函数$(j\omega)$</h2><h3 id="2-3-1-频域特性函数定义"><a href="#2-3-1-频域特性函数定义" class="headerlink" title="2.3.1.频域特性函数定义"></a>2.3.1.频域特性函数定义</h3><p>输入为正弦量 $u(t) &#x3D; Asin\omega t \to A\angle0$ </p>
<p>$$G(j\omega) &#x3D; \dfrac{\dot Y}{\dot U}$$</p>
<ul>
<li><p>$G(j\omega)   &#x3D; X(\omega) + jY(\omega) &#x3D; |G(j\omega)|\angle G(j\omega)  &#x3D; F(\omega)e^{j\varphi(\omega)}$</p>
</li>
<li><p>幅频特性：<br>$F(\omega) &#x3D; |G(j\omega)| &#x3D; \dfrac{|\dot Y|}{|\dot U|}$</p>
</li>
<li><p>相频特性：<br>$\varphi &#x3D; \angle G(\omega) &#x3D; \angle \dot Y - \angle \dot U$</p>
</li>
</ul>
<h3 id="2-3-2-频域特性的图示方法"><a href="#2-3-2-频域特性的图示方法" class="headerlink" title="2.3.2.频域特性的图示方法"></a>2.3.2.频域特性的图示方法</h3><h4 id="奈奎斯特图"><a href="#奈奎斯特图" class="headerlink" title="奈奎斯特图"></a>奈奎斯特图</h4><h4 id="伯德图"><a href="#伯德图" class="headerlink" title="伯德图"></a>伯德图</h4><ul>
<li><p>幅频特性</p>
<ul>
<li>横坐标：$lg \omega$</li>
<li>纵坐标：$20 lg |G(j \omega)|$</li>
</ul>
</li>
<li><p>相频特性</p>
<ul>
<li>横坐标：$lg \omega$</li>
<li>纵坐标：$\angle G(j \omega)$</li>
</ul>
</li>
</ul>
<h3 id="2-3-3-典型环节的频域特性"><a href="#2-3-3-典型环节的频域特性" class="headerlink" title="2.3.3.典型环节的频域特性"></a>2.3.3.典型环节的频域特性</h3><h4 id="振荡环节的频率特性"><a href="#振荡环节的频率特性" class="headerlink" title="振荡环节的频率特性"></a>振荡环节的频率特性</h4><p>$\omega_r$称为振荡环节的谐振频率，此时$\dfrac{dA(\omega)}{d\omega} &#x3D; 0$</p>
<p>$$\omega_r &#x3D; \omega_n \sqrt{1-2\zeta ^2}$$</p>
<p>$$M_r &#x3D; A(\omega_r) &#x3D; \dfrac1{2\zeta\sqrt{1-\zeta ^2}}$$</p>
<p>$$\varphi(\omega_r) &#x3D; -arctan\dfrac{\zeta}{2\zeta\sqrt{1-\zeta ^2}}$$</p>
<h3 id="2-3-4-最小相位系统"><a href="#2-3-4-最小相位系统" class="headerlink" title="2.3.4 最小相位系统"></a>2.3.4 最小相位系统</h3><ul>
<li>如果系统开环传递函数在右半s平面没有零点和极点，该系统称为 <strong>最小相位系统</strong></li>
<li>有延迟环节的系统属于 <strong>非最小相位系统</strong></li>
<li>两个开环稳定的系统有相同的幅频特性，对任意$\omega \geq 0$, <strong>最小相位系统</strong> 的相位总滞后于 <strong>非最小相位系统</strong></li>
</ul>
<h2 id="2-4-采样控制系统"><a href="#2-4-采样控制系统" class="headerlink" title="2.4.采样控制系统"></a>2.4.采样控制系统</h2><h3 id="2-4-2-采样器"><a href="#2-4-2-采样器" class="headerlink" title="2.4.2.采样器"></a>2.4.2.采样器</h3><ul>
<li><p>采样前的连续信号： $x(t)$)</p>
</li>
<li><p>理想采样后所得的脉冲序列：$x^*(t) &#x3D; \sum_{n&#x3D;0}^\infty x(nT)\delta(t-nT)$</p>
</li>
<li><p>采样前的连续信号的频谱： $F_x(j\omega)$</p>
</li>
<li><p>理想采样后所得的脉冲序列的频谱：$F_x^*(j\omega) &#x3D; \dfrac1T\sum_{n&#x3D;-\infty}^\infty F_x(j(\omega-n\omega_s))$</p>
</li>
</ul>
<p>其中, $\omega_s$ 为采样角频率，$\omega_m$ 为连续信号的最大频率。离散信号的频谱可以看做连续信号频谱经过无穷次平移后叠加而成的。</p>
<ul>
<li><strong>香农采样定理</strong> : $\omega_s &gt; \omega_m$ 时，能够通过采样信号恢复原信号（必要条件）。</li>
<li>实际上满足香农采样定理后，还需要一个理想的低通滤波器（物理上不可实现）才能不失真地获得原信号。</li>
</ul>
<h3 id="2-4-3-零阶保持器（ZOH）"><a href="#2-4-3-零阶保持器（ZOH）" class="headerlink" title="2.4.3.零阶保持器（ZOH）"></a>2.4.3.零阶保持器（ZOH）</h3><p>ZOH 相当于一个近似于带宽为 $\omega_s$ 的低通滤波器</p>
<p>T 为采样脉冲信号的周期</p>
<ul>
<li><p>脉冲响应函数 $g_h(t) &#x3D; 1(t) - 1(t-T)$</p>
</li>
<li><p>传递函数 $G_h(s) &#x3D; \dfrac{1-e^{-Ts}}{s}$</p>
</li>
</ul>
<h3 id="2-4-4-差分方程"><a href="#2-4-4-差分方程" class="headerlink" title="2.4.4.差分方程"></a>2.4.4.差分方程</h3><ul>
<li><p>前向差分 </p>
<p>$$y(k+n) + a_1y(k+n-1) + \dots + a_ny(k) &#x3D; b_0u(k+n) + b_1u(k+n-1)+ \dots +b_mu(k)$$</p>
</li>
<li><p>后向差分（时间平移n个周期）</p>
<p>$$y(k) + a_1y(k-1) + \dots + a_ny(k-n) &#x3D; b_0u(k) + b_1u(k-1)+ \dots +b_mu(k-m)$$</p>
</li>
</ul>
<h3 id="2-4-5-脉冲传递函数"><a href="#2-4-5-脉冲传递函数" class="headerlink" title="2.4.5.脉冲传递函数"></a>2.4.5.脉冲传递函数</h3><ul>
<li><p>由差分方程</p>
<p>  $$G(z) &#x3D; \dfrac{Y(z)}{U(z)} &#x3D; \dfrac{b_0+b_1z^{-1} + \dots + b_mz^{-m}}{1+a_1z^{-1} + \dots + a_nz^{-n}}$$</p>
</li>
<li><p>由传递函数<br>  $$G(z) &#x3D;\mathscr{Z}[ \mathscr{L}^{-1}[G(s)]]$$</p>
</li>
</ul>
<h4 id="采样系统的联接"><a href="#采样系统的联接" class="headerlink" title="采样系统的联接"></a>采样系统的联接</h4><ul>
<li>串联</li>
</ul>
<p><img src="/./Principle-of-Automatic-Control/27chuan.png" alt="avatar"></p>
<p>加采样同步器:<br>$G(z) &#x3D; G_1(z)G_2(z)$</p>
<p>不加采样同步器:<br>$G(z) &#x3D; \mathscr{Z}[\mathscr{L}^{-1}[G_1(s)G_2(s)]] &#x3D; G_1G_2(z)$</p>
<ul>
<li><p>并联：求和</p>
</li>
<li><p>闭环系统的脉冲传递函数</p>
</li>
</ul>
<p><img src="/./Principle-of-Automatic-Control/27bihuan.png" alt="avatar"></p>
<ul>
<li>两种情况可用梅森公式</li>
</ul>
<h1 id="3-控制系统的状态空间模型"><a href="#3-控制系统的状态空间模型" class="headerlink" title="3.控制系统的状态空间模型"></a>3.控制系统的状态空间模型</h1><h2 id="3-1-状态方程和输出方程"><a href="#3-1-状态方程和输出方程" class="headerlink" title="3.1.状态方程和输出方程"></a>3.1.状态方程和输出方程</h2><ul>
<li>向量形式 ($\boldsymbol {A_{nn} , B_{nm}, C_{ln}, D_{lm}, x_{n1}, y_{l1}, u_{m1}}$)</li>
</ul>
<p>$$\begin{cases}<br>\boldsymbol{\dot x(t) &#x3D; Ax(t) + Bu(t)} \<br>\boldsymbol{\dot y(t) &#x3D; Cx(t) + Du(t)} \<br>\end{cases}$$</p>
<ul>
<li><p>对同一系统而言，状态选取不唯一，有<strong>n阶可逆矩阵P</strong>， 则 $\boldsymbol{x’ &#x3D; Px}$ 构成新的状态向量<br>$$\boldsymbol{A’ &#x3D; PAP^{-1},\qquad B’ &#x3D; PB}$$<br>$$\boldsymbol{C’ &#x3D; CP^{-1}, \qquad D’ &#x3D; D}$$</p>
</li>
<li><p>状态空间模型方块图：</p>
</li>
</ul>
<p><img src="/./Principle-of-Automatic-Control/33.png" alt="avatar"></p>
<h2 id="3-2-连续状态空间模型"><a href="#3-2-连续状态空间模型" class="headerlink" title="3.2. 连续状态空间模型"></a>3.2. 连续状态空间模型</h2><h3 id="3-2-1-状态空间模型-x3D-gt-IO模型（传递函数矩阵）"><a href="#3-2-1-状态空间模型-x3D-gt-IO模型（传递函数矩阵）" class="headerlink" title="3.2.1. 状态空间模型 &#x3D;&gt; IO模型（传递函数矩阵）"></a>3.2.1. 状态空间模型 &#x3D;&gt; IO模型（传递函数矩阵）</h3><p>$$\boldsymbol {G(s) &#x3D; C(sI-A)^{-1}B+D} $$</p>
<h3 id="3-2-2-IO模型（传递函数矩阵）-x3D-gt-状态空间模型"><a href="#3-2-2-IO模型（传递函数矩阵）-x3D-gt-状态空间模型" class="headerlink" title="3.2.2. IO模型（传递函数矩阵）&#x3D;&gt; 状态空间模型"></a>3.2.2. IO模型（传递函数矩阵）&#x3D;&gt; 状态空间模型</h3><p>这个过程称之为实现，系统的实现不唯一，最小实现指维数最低的实现。</p>
<ul>
<li><p><strong>虚拟输出法（能控规范型）</strong></p>
<p>  $$G(s) &#x3D; d+\dfrac{b_ms^m+…}{a_ns^n+…} \quad (m&lt;n)$$</p>
<p>  $$\begin{bmatrix}<br>  A &amp; B\\<br>  C &amp; D </p>
<h1 id="end-bmatrix"><a href="#end-bmatrix" class="headerlink" title="\end{bmatrix}"></a>\end{bmatrix}</h1><p>  \begin{bmatrix}<br>  0 &amp; 1 &amp; 0 &amp; \dots\dots &amp; 0  &amp; \quad 0\<br>  0 &amp; 0 &amp; 1 &amp; \dots\dots &amp; 0  &amp; \quad 0\<br>  \vdots &amp; \vdots &amp; \vdots &amp;  \ddots &amp; \vdots &amp; \quad 0\<br>  0 &amp; 0 &amp; 0 &amp; \dots\dots &amp; 1 \<br>  -\dfrac{a_0}{a_n} &amp; -\dfrac{a_1}{a_n} &amp; -\dfrac{a_2}{a_n} &amp; \dots\dots &amp; -\dfrac{a_{n-1}}{a_n} &amp; \quad \dfrac1{a_n}\<br>  \<br>  \<br>  b_0 &amp; b_1 &amp; b_2 &amp;…b_m…&amp;0 &amp; \quad d\<br>  \end{bmatrix}$$</p>
</li>
<li><p><strong>部分分式法</strong></p>
<ul>
<li><p>极点互异时(对角线规范型)</p>
<p>  $$G(s) &#x3D; d + \sum_{i&#x3D;1}^n\dfrac{c_i}{s+p_i}$$</p>
<p>  $$\begin{bmatrix}<br>  A &amp; B\\<br>  C &amp; D </p>
<h1 id="end-bmatrix-1"><a href="#end-bmatrix-1" class="headerlink" title="\end{bmatrix}"></a>\end{bmatrix}</h1><p>  \begin{bmatrix}<br>  -p_i &amp; \dots &amp; 0  &amp; \quad 1  \<br>  \vdots &amp;  \ddots &amp; \vdots &amp; \quad \vdots  \<br>  0 &amp; \dots &amp; -p_n  &amp; \quad 1  \<br>  \<br>  c_1 &amp; \dots &amp; c_n &amp; \quad d  \</p>
<p>  \end{bmatrix}$$</p>
</li>
<li><p>当极点为2重根时（若尔当规范性）</p>
<p>$$Y(s) &#x3D; dU(s) + \sum_{i&#x3D;3}^nc_i\dfrac{U(s)}{s+p_i} + c_{g2} \dfrac{U(s)}{s+p_1}+c_{g1}\dfrac{U(s)}{(s+p_1)^2}$$</p>
<p>$$\begin{bmatrix}<br>A &amp; B\\<br>C &amp; D </p>
<h1 id="end-bmatrix-2"><a href="#end-bmatrix-2" class="headerlink" title="\end{bmatrix}"></a>\end{bmatrix}</h1><p>\begin{bmatrix}<br>-p_1 &amp; 1 &amp; 0 &amp; \dots &amp; 0  &amp; \quad 0  \<br>0 &amp; -p_1 &amp; 0 &amp; \dots &amp; 0  &amp; \quad 1  \<br>0 &amp; 0 &amp; -p_3 &amp; \dots &amp; 0  &amp; \quad 1  \<br>\vdots &amp;\vdots &amp;\vdots &amp;\ddots &amp;\vdots &amp;\quad \vdots  \<br>0 &amp; 0 &amp; 0 &amp; \dots &amp; -p_n  &amp; \quad 1  \<br>\<br>c_{g1} &amp; c_{g2} &amp; c_3 &amp; \dots &amp; c_n &amp; \quad d  \ </p>
<p>\end{bmatrix}$$</p>
</li>
</ul>
</li>
</ul>
<h2 id="3-3-连续状态空间求解-假设D为0"><a href="#3-3-连续状态空间求解-假设D为0" class="headerlink" title="3.3.连续状态空间求解(假设D为0)"></a>3.3.连续状态空间求解(假设D为0)</h2><h3 id="3-3-1-状态转移矩阵"><a href="#3-3-1-状态转移矩阵" class="headerlink" title="3.3.1.状态转移矩阵"></a>3.3.1.状态转移矩阵</h3><ul>
<li><p><strong>状态转移矩阵的性质</strong></p>
<p>  (1) $\boldsymbol{\dot \varphi(t) &#x3D; A\varphi(t)}$</p>
<p>  (2) $\boldsymbol {\varphi(0) &#x3D; I}$</p>
<p>  (3) $\boldsymbol {\varphi(-t) &#x3D; \varphi^{-1}(t)}$ 系统的状态转移具有双向性。</p>
<p>  (4) $\boldsymbol {\varphi(t_2 - t_1) \varphi(t_1 - t_0) &#x3D; \varphi(t_2-t_0)}$ </p>
<p>  (5) $\boldsymbol {\varphi(t_1 + t_2) &#x3D; \varphi(t_1) \varphi(t_2)}$ </p>
<p>  (6) $\boldsymbol {\varphi^k(t) &#x3D; \varphi(kt)}$ </p>
<p>  (7) $\boldsymbol {A \int_0^t \varphi(\tau)d\tau &#x3D; \varphi(t) - I}$ </p>
</li>
<li><p><strong>状态转移矩阵的计算</strong></p>
<p>  (1) 展开泰勒级数<br>  (2) 凯莱-哈密顿定理<br>  (3) 特征值法</p>
<p>  (4) 拉普拉斯变换法</p>
<p>  $$\boldsymbol\Phi(s) &#x3D; (s\boldsymbol I - \boldsymbol A)^{-1}$$</p>
<p>  $$\boldsymbol \varphi(t) &#x3D; \mathscr{L^{-1}}[\boldsymbol\Phi(s)] &#x3D; \mathscr{L^{-1}}[(s\boldsymbol I - \boldsymbol A)^{-1}]$$</p>
</li>
</ul>
<h3 id="3-3-2-线性定常系统的全响应"><a href="#3-3-2-线性定常系统的全响应" class="headerlink" title="3.3.2.线性定常系统的全响应"></a>3.3.2.线性定常系统的全响应</h3><p>$$\begin{cases}<br> \boldsymbol {x(t) &#x3D; \varphi(t-t_0)x(t_0) + \int_{t_0}^t\varphi(t-\tau)Bu(\tau)d\tau}, \quad t\geq t_0 \<br> \<br> \boldsymbol {y(t) &#x3D; Cx(t) &#x3D; C\varphi(t-t_0)x(t_0) + C\int_{t_0}^t\varphi(t-\tau)Bu(\tau)d\tau}, \quad t\geq t_0<br>\end{cases}$$</p>
<h2 id="3-4-离散状态空间模型"><a href="#3-4-离散状态空间模型" class="headerlink" title="3.4.离散状态空间模型"></a>3.4.离散状态空间模型</h2><h3 id="3-4-1-连续状态空间模型-x3D-gt-离散状态空间模型"><a href="#3-4-1-连续状态空间模型-x3D-gt-离散状态空间模型" class="headerlink" title="3.4.1. 连续状态空间模型&#x3D;&gt;离散状态空间模型"></a>3.4.1. 连续状态空间模型&#x3D;&gt;离散状态空间模型</h3><p>采样控制系统：<br><img src="/./Principle-of-Automatic-Control/312.png" alt="avatar"></p>
<p>连续部分的状态空间模型：</p>
<p>$$\begin{cases}<br>\boldsymbol {\dot x &#x3D; Ax + B}u_h \<br>y\boldsymbol { &#x3D; Cx + D}u_h<br>\end{cases}$$</p>
<p>离散化：</p>
<p>$$\boldsymbol G &#x3D; e^{\boldsymbol AT} &#x3D; \boldsymbol \varphi(T)$$</p>
<p>$$\boldsymbol H &#x3D; \int_0^T\boldsymbol G(\tau)d\tau \cdot \boldsymbol B&#x3D; \int_0^T\boldsymbol \varphi(\tau)d\tau \cdot \boldsymbol B&#x3D; \int_0^T\boldsymbol e^{\boldsymbol A\tau }d\tau \cdot \boldsymbol B$$</p>
<p>离散状态空间模型：</p>
<p>$$\boldsymbol x(k+1) &#x3D; \boldsymbol{Gx}(k) + \boldsymbol{Hu}(k)$$<br>$$\boldsymbol y(k) &#x3D; \boldsymbol{Cx}(k) + \boldsymbol{Du}(k)$$</p>
<h3 id="3-4-2-输入输出模型（脉冲传递函数）-x3D-gt-离散状态空间模型"><a href="#3-4-2-输入输出模型（脉冲传递函数）-x3D-gt-离散状态空间模型" class="headerlink" title="3.4.2. 输入输出模型（脉冲传递函数）&#x3D;&gt;离散状态空间模型"></a>3.4.2. 输入输出模型（脉冲传递函数）&#x3D;&gt;离散状态空间模型</h3><ul>
<li><p><strong>虚拟输出法</strong></p>
<p>  $$G(z) &#x3D; d+\dfrac{b_mz^m+…}{a_nz^n+…} \quad (m&lt;n)$$</p>
<p>  $$\begin{bmatrix}<br>  G &amp; H\\<br>  C &amp; D </p>
<h1 id="end-bmatrix-3"><a href="#end-bmatrix-3" class="headerlink" title="\end{bmatrix}"></a>\end{bmatrix}</h1><p>  \begin{bmatrix}<br>  0 &amp; 1 &amp; 0 &amp; \dots\dots &amp; 0  &amp; \quad 0\<br>  0 &amp; 0 &amp; 1 &amp; \dots\dots &amp; 0  &amp; \quad 0\<br>  \vdots &amp; \vdots &amp; \vdots &amp;  \ddots &amp; \vdots &amp; \quad 0\<br>  0 &amp; 0 &amp; 0 &amp; \dots\dots &amp; 1 \<br>  -\dfrac{a_0}{a_n} &amp; -\dfrac{a_1}{a_n} &amp; -\dfrac{a_2}{a_n} &amp; \dots\dots &amp; -\dfrac{a_{n-1}}{a_n} &amp; \quad \dfrac1{a_n}\<br>  \<br>  \<br>  b_0 &amp; b_1 &amp; b_2 &amp;…b_m…&amp;0 &amp; \quad d\<br>  \end{bmatrix}$$</p>
</li>
</ul>
<h2 id="3-5-离散状态空间求解"><a href="#3-5-离散状态空间求解" class="headerlink" title="3.5. 离散状态空间求解"></a>3.5. 离散状态空间求解</h2><h3 id="3-5-1-离散系统的状态转移矩阵"><a href="#3-5-1-离散系统的状态转移矩阵" class="headerlink" title="3.5.1. 离散系统的状态转移矩阵"></a>3.5.1. 离散系统的状态转移矩阵</h3><ul>
<li><p>$\boldsymbol G(k)$ 求解：$\boldsymbol G(k) &#x3D; \boldsymbol G^k &#x3D; \mathscr{L^{-1}}\boldsymbol [(z\boldsymbol{I-G})^{-1}z\boldsymbol]$</p>
</li>
<li><p>$\boldsymbol G(k) 的三个性质$</p>
<p>  (1) $\boldsymbol G(0) &#x3D; \boldsymbol I$</p>
<p>  (2) $\boldsymbol G^{-1}(k) &#x3D; \boldsymbol G(-k)$</p>
<p>  (2) $\boldsymbol G(k-h) &#x3D; \boldsymbol G(k-l)\boldsymbol G(l-h)$</p>
</li>
</ul>
<h3 id="3-5-2-求解线性离散系统"><a href="#3-5-2-求解线性离散系统" class="headerlink" title="3.5.2. 求解线性离散系统"></a>3.5.2. 求解线性离散系统</h3><ul>
<li><strong>Z变换法</strong></li>
</ul>
<p>$$\boldsymbol x(k) &#x3D; \mathscr{Z^{-1}}[(z\boldsymbol{I-G})^{-1}z]\boldsymbol x(0) + \mathscr{Z^{-1}}[(z\boldsymbol{I-G})^{-1}\boldsymbol{HU}(z)]$$</p>
<p>$$\boldsymbol y(k) &#x3D; \boldsymbol{Cx}(k) + \boldsymbol{Du}(k)$$</p>
<ul>
<li><p><strong>迭代法</strong></p>
<p>  $\boldsymbol G(k)$ 为离散系统的状态转移矩阵</p>
</li>
</ul>
<p>$$\boldsymbol x(k) &#x3D; \boldsymbol G(k) \boldsymbol x(0) + \sum_{i&#x3D;0}^{k-1}\boldsymbol G(k-i-1)\boldsymbol {Hu}(i), \quad  k &#x3D; 0,1,2…$$</p>
<p>$$\boldsymbol y(k) &#x3D; \boldsymbol{Cx}(k) + \boldsymbol{Du}(k)$$</p>
<h1 id="4-控制系统的稳定性分析"><a href="#4-控制系统的稳定性分析" class="headerlink" title="4.控制系统的稳定性分析"></a>4.控制系统的稳定性分析</h1><p><font color="#000066">介绍一下反馈控制:</font><br/> </p>
<h2 id="4-1-李雅普诺夫稳定性的概念"><a href="#4-1-李雅普诺夫稳定性的概念" class="headerlink" title="4.1.李雅普诺夫稳定性的概念"></a>4.1.李雅普诺夫稳定性的概念</h2><p><img src="/./Principle-of-Automatic-Control/43.png" alt="avatar"></p>
<h2 id="4-2-线性定常系统稳定的充要条件"><a href="#4-2-线性定常系统稳定的充要条件" class="headerlink" title="4.2.线性定常系统稳定的充要条件"></a>4.2.线性定常系统稳定的充要条件</h2><p>内部渐进稳定的&#x3D;&gt;输入输出稳定</p>
<p>反之,不一定</p>
<p>当没有极点对消时, 输入输出稳定性&lt;&#x3D;&gt;内部稳定性</p>
<ul>
<li><p><strong>连续系统内部渐进稳定</strong>：系数矩阵 $\boldsymbol A$ 的特征值全都复平面的左半平面，不包括虚轴</p>
<p>  若系数矩阵 $\boldsymbol A$ 存在实部为零的单重特征值，其动态响应分量会随着时间的增长而趋于常数或等幅振荡，系统李雅普诺夫稳定的。</p>
</li>
<li><p><strong>离散系统内部渐进稳定</strong>：系数矩阵 $\boldsymbol G$ 的特征值全都位于Z平面以原点为中心的单位圆</p>
</li>
<li><p><strong>连续线性定常系统 I&#x2F;O 稳定</strong>: 传递函数的极点位于复平面的左半平面</p>
</li>
<li><p><strong>离散线性定常系统 I&#x2F;O 稳定</strong>: 脉冲传递函数的极点位于Z平面以原点为中心的单位圆内</p>
</li>
</ul>
<h2 id="4-3-系统稳定性的代数判据"><a href="#4-3-系统稳定性的代数判据" class="headerlink" title="4.3.系统稳定性的代数判据"></a>4.3.系统稳定性的代数判据</h2><ul>
<li><p><strong>连续系统</strong>： 劳斯判据</p>
</li>
<li><p><strong>离散系统</strong>： 朱利判据、双线性变换</p>
</li>
</ul>
<h2 id="4-4-根轨迹"><a href="#4-4-根轨迹" class="headerlink" title="4.4.根轨迹"></a>4.4.根轨迹</h2><p>根据开环传递函数零极点</p>
<h3 id="4-4-1-两个根本约束条件：幅值条件和相角条件"><a href="#4-4-1-两个根本约束条件：幅值条件和相角条件" class="headerlink" title="4.4.1.两个根本约束条件：幅值条件和相角条件"></a>4.4.1.两个根本约束条件：幅值条件和相角条件</h3><p>$$W(s) &#x3D; \dfrac{G(s)}{1+G_0(s)}$$</p>
<p>$$G_0(s) &#x3D; K_g\dfrac{\Pi_{i&#x3D;1}^m(s+z_i)}{\Pi_{j&#x3D;1}^n(s+p_i)} &#x3D; -1$$</p>
<p>$$\to \begin{cases}</p>
<p>|G_0(s)| &#x3D; 1 \ </p>
<p>\angle{G_0(s)} &#x3D; \pm \pi(2k+1)，\quad k&#x3D;0,1,2,…</p>
<p>\end{cases}$$</p>
<h3 id="4-4-2-根轨迹绘制规则"><a href="#4-4-2-根轨迹绘制规则" class="headerlink" title="4.4.2.根轨迹绘制规则"></a>4.4.2.根轨迹绘制规则</h3><p>现有n个开环极点，m个开环零点</p>
<ol>
<li><p>起点：开环极点</p>
<p> 终点：开环零点或无穷远处</p>
</li>
<li><p>对称于实轴</p>
</li>
<li><p>实轴上根轨迹相间隔</p>
</li>
<li><p>根之和：$n-m \geq 2$ 时，闭环根之和为常数，等于开环根之和。</p>
</li>
<li><p>系统有两个开环极点，一个开环零点，复平面存在根轨迹，则复平面的根轨迹一定是以该零点为圆心的圆弧</p>
</li>
<li><p>渐近线：</p>
</li>
</ol>
<p>$$\theta &#x3D; \dfrac{2k+1}{n-m} \pi, \quad k&#x3D;0,1,…n-m-1$$</p>
<p>$$\sigma &#x3D; \dfrac{\sum_{j&#x3D;1}^np_j - \sum_{i&#x3D;1}^nz_i}{n-m}$$</p>
<ol start="7">
<li><p>分离点，汇合点：<br> $\sum_{i&#x3D;1}^n\dfrac1{d-p_i} &#x3D; \sum_{j&#x3D;1}^m\dfrac1{d-z_j}$</p>
<p> 分离角：$\theta_d &#x3D; \dfrac{\pi}{k}, k$ 为相分离的根轨迹支数</p>
</li>
<li><p>出射角与入射角：用相角条件</p>
</li>
<li><p>与虚轴交点：$s &#x3D; j\omega$ 是根的点，代入特征方程</p>
</li>
</ol>
<h2 id="4-5-奈奎斯特稳定性判据"><a href="#4-5-奈奎斯特稳定性判据" class="headerlink" title="4.5.奈奎斯特稳定性判据"></a>4.5.奈奎斯特稳定性判据</h2><p>$$Z &#x3D; P-2N$$</p>
<p>$Z:$ 右半S平面中闭环极点个数</p>
<p>$P:$ 右半S平面中开环极点个数</p>
<p>$N: G(j\omega)$ 包围 $(-1, j0)$ 的圈数，逆正顺负。 </p>
<ul>
<li><p>伯德图中的表现：<br>  $N &#x3D; N^+ - N^-$</p>
<p>  在对数幅频曲线大于0dB的范围，相频曲线穿越-180° (从下向上为正，从上向下为负)</p>
</li>
</ul>
<h3 id="4-5-1-稳定裕度"><a href="#4-5-1-稳定裕度" class="headerlink" title="4.5.1. 稳定裕度"></a>4.5.1. 稳定裕度</h3><p>相角裕度：$\gamma &#x3D; 180°+\angle G(j\omega)$</p>
<p>幅值裕度：$h &#x3D; \dfrac1{|G(j\omega)|} &#x3D; \dfrac1A &#x3D; exp{\dfrac{L_g}{20}}$</p>
<p><img src="/./Principle-of-Automatic-Control/451.png" alt="avatar"><br><img src="/./Principle-of-Automatic-Control/452.png" alt="avatar"></p>
<h2 id="4-6-李雅普诺夫第二法"><a href="#4-6-李雅普诺夫第二法" class="headerlink" title="4.6. 李雅普诺夫第二法"></a>4.6. 李雅普诺夫第二法</h2><p>充分条件，常取 $v &#x3D; x_1^2 + x_2^2$</p>
<ul>
<li><p>$\boldsymbol {v(x)}$正定</p>
<p>  $\boldsymbol {\dot v(x)}$ 负定</p>
</li>
<li><p>$v$正定</p>
</li>
<li><p>$\boldsymbol {v(x)}$正定</p>
<p>  $\boldsymbol {\dot v(x)}$ 半负定</p>
<p>  $\boldsymbol {\dot v(x)}$ 不恒为 0</p>
</li>
</ul>
<h1 id="5-控制系统的时域运动分析"><a href="#5-控制系统的时域运动分析" class="headerlink" title="5.控制系统的时域运动分析"></a>5.控制系统的时域运动分析</h1><h2 id="5-1-时域响应求解"><a href="#5-1-时域响应求解" class="headerlink" title="5.1.时域响应求解"></a>5.1.时域响应求解</h2><h3 id="5-1-1-连续系统"><a href="#5-1-1-连续系统" class="headerlink" title="5.1.1.连续系统"></a>5.1.1.连续系统</h3><ul>
<li>零初始</li>
</ul>
<p>$$c(t) &#x3D; \mathscr{L^{-1}}[W(s)R(s)]$$</p>
<ul>
<li><p>非零初始</p>
<p>  (1) 微分方程的通常解法</p>
<p>  (2) 运动方程两端拉氏变换,求出响应,再反变换</p>
</li>
</ul>
<h3 id="5-1-2-离散系统"><a href="#5-1-2-离散系统" class="headerlink" title="5.1.2.离散系统"></a>5.1.2.离散系统</h3><ul>
<li>Z变换法</li>
</ul>
<h2 id="5-2-瞬态性能指标"><a href="#5-2-瞬态性能指标" class="headerlink" title="5.2.瞬态性能指标"></a>5.2.瞬态性能指标</h2><p><img src="/./Principle-of-Automatic-Control/55.png" alt="avatar"></p>
<ul>
<li><p>上升时间 $t_\tau$</p>
</li>
<li><p>峰值时间 $t_p$</p>
</li>
<li><p>(最大)超调量 $\delta% &#x3D; \dfrac{y_{max} - y(\infty)}{y(\infty)} \cdot 100%$</p>
</li>
<li><p>调节时间 &#x2F; 过渡时间 $t_s$</p>
</li>
<li><p>振荡次数 $N$</p>
</li>
</ul>
<h2 id="5-3-一阶系统瞬态性能"><a href="#5-3-一阶系统瞬态性能" class="headerlink" title="5.3.一阶系统瞬态性能"></a>5.3.一阶系统瞬态性能</h2><h3 id="5-3-1-极点分布"><a href="#5-3-1-极点分布" class="headerlink" title="5.3.1.极点分布"></a>5.3.1.极点分布</h3><ul>
<li><p><strong>开环传递函数：</strong>  $W(s) &#x3D; \dfrac1{Ts}$</p>
</li>
<li><p><strong>闭环传递函数：</strong>  $W(s) &#x3D; \dfrac1{Ts+1}$</p>
</li>
</ul>
<h3 id="5-3-2-阶跃响应"><a href="#5-3-2-阶跃响应" class="headerlink" title="5.3.2.阶跃响应"></a>5.3.2.阶跃响应</h3><ul>
<li><strong>阶跃响应：</strong></li>
</ul>
<p>$$c(t) &#x3D; 1-e^{-\tfrac{t}{T}}, \quad t\geq0$$</p>
<p>$$t_s &#x3D; \begin{cases}<br>4T, \quad \Delta &#x3D; 2 \<br>3T, \quad \Delta &#x3D; 5 \<br>\end{cases}$$</p>
<h2 id="5-4-二阶系统瞬态性能"><a href="#5-4-二阶系统瞬态性能" class="headerlink" title="5.4.二阶系统瞬态性能"></a>5.4.二阶系统瞬态性能</h2><h3 id="5-4-1-极点分布"><a href="#5-4-1-极点分布" class="headerlink" title="5.4.1.极点分布"></a>5.4.1.极点分布</h3><ul>
<li><p><strong>开环传递函数：</strong> $W(s) &#x3D; \dfrac{K}{s(Ts+1)}$</p>
</li>
<li><p><strong>闭环传递函数：</strong> $W(s) &#x3D; \dfrac{K}{s(Ts+1)+K}$</p>
</li>
<li><p><strong>闭环传递函数：</strong> $W(s) &#x3D; \dfrac{\omega_n^2}{s^2+ 2\zeta \omega_n s + \omega_n^2}$</p>
<p>  $\zeta$ 为阻尼比， $\omega_n$ 称为无阻尼振荡频率或自然频率</p>
<p>  $\omega_n &#x3D; \sqrt{\dfrac KT}, \qquad$<br>  $\zeta &#x3D; \dfrac 1{2\sqrt{KT}}$</p>
</li>
<li><p><strong>特征方程：</strong> $s^2+ 2\zeta \omega_n s + \omega_n^2 &#x3D; 0$</p>
</li>
</ul>
<p><img src="/./Principle-of-Automatic-Control/513.png" alt="avatar"></p>
<h3 id="5-4-2-阶跃响应"><a href="#5-4-2-阶跃响应" class="headerlink" title="5.4.2. 阶跃响应"></a>5.4.2. 阶跃响应</h3><hr>
<ul>
<li><p><strong>欠阻尼</strong></p>
<p>  一般情况下,希望阻尼比再0.4-0.8之间, 0.707是最佳阻尼系数</p>
<p>  $c(t) &#x3D; 1-\dfrac{e^{-\zeta \omega_n t}}{\sqrt{1-\zeta^2}}sin(\omega_dt + \varphi), \quad t\geq 0$</p>
<p>  $\varphi &#x3D; arctan\dfrac{\sqrt{1-\zeta^2}}{\zeta}$</p>
<p>  阻尼振荡频率: $\omega_d &#x3D; \omega_n \sqrt{1-\zeta^2}$</p>
<p>  衰减震荡周期: $T_d &#x3D; \dfrac{2\pi}{\omega_d} &#x3D; \dfrac{2\pi}{\omega_n \sqrt{1-\zeta^2}}$</p>
<p>  $N &#x3D; \dfrac{t_s}{T_d}$</p>
<p>  <img src="/./Principle-of-Automatic-Control/5145.png" alt="avatar"></p>
<p>  $t_r &#x3D; \dfrac{\pi-\varphi}{\omega_d}$</p>
<p>  $t_p &#x3D; \dfrac{\pi}{\omega_d}$</p>
<p>  $\boldsymbol{\delta% &#x3D; e^{-\frac{\zeta \pi}{\sqrt{1-\zeta^2}}}\cdot100%}$</p>
</li>
</ul>
<p>$$\boldsymbol{包络线近似:\begin{cases}</p>
<p>t_s \approx \dfrac4{\zeta \omega_n}, \quad \Delta &#x3D; 2 \<br>\<br>t_s \approx \dfrac3{\zeta \omega_n}, \quad \Delta &#x3D; 5 \</p>
<p>\end{cases}}$$</p>
<p><img src="/./Principle-of-Automatic-Control/521.png" alt="avatar"></p>
<hr>
<ul>
<li><p><strong>无阻尼</strong></p>
<p>  欠阻尼的一种特殊情况</p>
<p>  $$c(t) &#x3D; 1-cos\omega_n t, \quad t\geq0$$</p>
</li>
</ul>
<hr>
<ul>
<li><p><strong>临界阻尼</strong></p>
<p>  $$c(t) &#x3D; 1-(\omega_nt+1)e^{-\omega_nt}, \quad t\geq0$$</p>
</li>
</ul>
<hr>
<ul>
<li><p><strong>过阻尼</strong></p>
<p>  $$c(t) &#x3D; 1+\dfrac{\omega_n}{2\sqrt{\zeta^2-1}}(\dfrac{e^{s_1t}}{-s_1}-\dfrac{e^{s_2t}}{-s_2}), \quad t\geq0$$</p>
<p>  近似一阶:</p>
<p>  $$c(t) &#x3D; 1-e^{-(\zeta-\sqrt{\zeta^2-1})\omega_nt}, \quad t\geq0$$</p>
</li>
</ul>
<hr>
<h3 id="5-4-3-二阶系统性能改善"><a href="#5-4-3-二阶系统性能改善" class="headerlink" title="5.4.3. 二阶系统性能改善"></a>5.4.3. 二阶系统性能改善</h3><ul>
<li><p><strong>KT对性能的影响</strong></p>
<p>  根据公式关系推导</p>
</li>
<li><p><strong>附加 速度反馈</strong></p>
<p>  实质：加入微分器，增加系统阻尼</p>
<p>  <img src="/./Principle-of-Automatic-Control/524.png" alt="avatar"></p>
<p>  $W(s) &#x3D; \dfrac{\omega_{n1}^2}{s^2+ 2\zeta_1 \omega_{n1} s + \omega_{n1}^2}$</p>
<p>  $\omega_{n1} &#x3D; \sqrt{\dfrac KT} \qquad$<br>  $\zeta_1 &#x3D; \dfrac {1+K\tau}{2\sqrt{KT}}$</p>
</li>
<li><p><strong>比例-微分控制</strong> </p>
<p>  实质：附加了零点。是一种超前控制</p>
<p>  不改变系统的自然频率，可以增加阻尼比<br>  <img src="/./Principle-of-Automatic-Control/525.png" alt="avatar"></p>
</li>
</ul>
<h2 id="5-5-高阶系统"><a href="#5-5-高阶系统" class="headerlink" title="5.5 高阶系统"></a>5.5 高阶系统</h2><p>标出所有闭环极点，零点， 注意零极点对消情况。</p>
<p>如果：</p>
<ol>
<li><p>其他闭环极点与虚轴之间的距离远大于一对共轭极点(5倍)</p>
</li>
<li><p>这一对共轭极点周围没有零点</p>
</li>
</ol>
<p>可以近似为二阶系统</p>
<h2 id="5-6-稳态误差分析"><a href="#5-6-稳态误差分析" class="headerlink" title="5.6.稳态误差分析"></a>5.6.稳态误差分析</h2><ul>
<li><p>定义法 </p>
<p>  求出误差传递函数，终值定理</p>
</li>
<li><p>查表法</p>
<ul>
<li><p>连续系统</p>
<p><img src="/./Principle-of-Automatic-Control/51lianxu.png" alt="avatar"></p>
</li>
<li><p>离散系统<br>$$k_p &#x3D; \lim_{z\to1}G_o(z)$$<br>$$k_v &#x3D; \dfrac1T\lim_{z\to1}(z-1)G_o(z)$$<br>$$k_a &#x3D; \dfrac1{T^2}\lim_{z\to1}(z-1)^{2}G_o(z)$$</p>
</li>
</ul>
</li>
<li><p>减少稳态误差的措施</p>
</li>
</ul>
<ol>
<li><p>增加开环增益</p>
</li>
<li><p>扰动前的前向通道的增益</p>
</li>
<li><p>前向通道或主反馈通道增加积分环节</p>
</li>
</ol>
<h1 id="7-校正"><a href="#7-校正" class="headerlink" title="7. 校正"></a>7. 校正</h1><p>给定指标，选择校正方法</p>
<h2 id="7-1-附加零极点对系统性能的影响"><a href="#7-1-附加零极点对系统性能的影响" class="headerlink" title="7.1 附加零极点对系统性能的影响"></a>7.1 附加零极点对系统性能的影响</h2><h3 id="开环零极点"><a href="#开环零极点" class="headerlink" title="开环零极点"></a>开环零极点</h3><p>影响根轨迹形状，影响闭环极点位置</p>
<ul>
<li><p>开环零点：<br>根轨迹左移，有利于动态性能指标</p>
</li>
<li><p>开环极点：<br>根轨迹右移，不利于动态性能指标</p>
</li>
</ul>
<h3 id="闭环零极点"><a href="#闭环零极点" class="headerlink" title="闭环零极点"></a>闭环零极点</h3><ul>
<li><p>闭环零点：<br>超调量增加，峰值时间靠前</p>
</li>
<li><p>闭环极点：<br>超调量减少，峰值时间靠后</p>
</li>
</ul>
<h3 id="原点附近开环偶极子"><a href="#原点附近开环偶极子" class="headerlink" title="原点附近开环偶极子"></a>原点附近开环偶极子</h3><p>对动态性能几乎无影响，可提高系统开环增益，改善静态特性</p>
<h2 id="7-2-根轨迹校正"><a href="#7-2-根轨迹校正" class="headerlink" title="7.2.根轨迹校正"></a>7.2.根轨迹校正</h2><ol>
<li><p>根据动态性能指标确定主导极点的位置</p>
</li>
<li><p>绘制未校正系统的根轨迹，若希望的主导极点位置不在根轨迹上（不满足相角条件），需要增加校正装置。</p>
</li>
<li><p>校正后的根轨迹通过希望的主导极点时，检验开环比例系数是否满足静态性要求。</p>
</li>
<li><p>若不满足，在原点附近增加开环偶极子，调节开环比例系数。</p>
</li>
</ol>
<hr>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="拉氏变换几个重要定理"><a href="#拉氏变换几个重要定理" class="headerlink" title="拉氏变换几个重要定理"></a>拉氏变换几个重要定理</h2><table>
<thead>
<tr>
<th>性质</th>
<th>时域</th>
<th>频域</th>
</tr>
</thead>
<tbody><tr>
<td>线性性质</td>
<td>$af_1(t) \pm bf_2(t)$</td>
<td>$aF_1(s) \pm bF_2(s)$</td>
</tr>
<tr>
<td>微分定理</td>
<td>$f’(t)$</td>
<td>$s{\cdot}F(s)-f(0^-)$</td>
</tr>
<tr>
<td>微分定理</td>
<td>$f^{(n)}(t)$</td>
<td>$s^{n}F(s)-\sum_{i&#x3D;0}^{n-1}s^{n-1-i}f^{(i)}(0)$</td>
</tr>
<tr>
<td>积分定理</td>
<td>$\int_{0^-}^t f(\xi)d\xi$</td>
<td>$\dfrac1s F(s)$</td>
</tr>
<tr>
<td>实位移定理</td>
<td>$f(t-\tau_0)$</td>
<td>$e^{-s\tau_0}F(s)$</td>
</tr>
<tr>
<td>复位移定理</td>
<td>$e^{At}f(t)$</td>
<td>$F(s-A)$</td>
</tr>
<tr>
<td>初值定理</td>
<td>$f(0) &#x3D; \lim_{s\to\infty}sF(s)$</td>
<td></td>
</tr>
<tr>
<td>终值定理</td>
<td>$f(\infty) &#x3D; \lim_{s\to0}sF(s)$</td>
<td>终值确定存在时才能用</td>
</tr>
</tbody></table>
<h2 id="Z变换几个重要定理"><a href="#Z变换几个重要定理" class="headerlink" title="Z变换几个重要定理"></a>Z变换几个重要定理</h2><table>
<thead>
<tr>
<th>性质</th>
<th>$x(k)$</th>
<th>$X(z)$</th>
</tr>
</thead>
<tbody><tr>
<td>线性性质</td>
<td>$ax_1(t) \pm bx_2(t)$</td>
<td>$aX_1(z) \pm bX_2(z)$</td>
</tr>
<tr>
<td>位移定理</td>
<td>$x(k+n)$</td>
<td>$z^nX(z)-\sum_{i&#x3D;0}^{n-1}z^{n-1}x(i)$</td>
</tr>
<tr>
<td>位移定理</td>
<td>$x(k-n)$</td>
<td>$z^{-n}X(z)+\sum_{i&#x3D;0}^{n-1}z^{-i}x(i-n)$</td>
</tr>
<tr>
<td>初值定理</td>
<td>$x(0)&#x3D; \lim_{z\to\infty}X(z)$</td>
<td></td>
</tr>
<tr>
<td>终值定理</td>
<td>$x(\infty) &#x3D; \lim_{z\to1}(z-1)X(z)$</td>
<td>终值确定存在时才能用</td>
</tr>
</tbody></table>
<h2 id="常见函数拉氏变换和Z变换"><a href="#常见函数拉氏变换和Z变换" class="headerlink" title="常见函数拉氏变换和Z变换"></a>常见函数拉氏变换和Z变换</h2><table>
<thead>
<tr>
<th>$x(t)$</th>
<th>$X(s)$</th>
<th>$x(k)$</th>
<th>$X(z)$</th>
</tr>
</thead>
<tbody><tr>
<td>$\delta(t)$</td>
<td>$1$</td>
<td>$\delta(k)$</td>
<td>$1$</td>
</tr>
<tr>
<td>$1(t)$</td>
<td>$\dfrac1s$</td>
<td>$x(k)&#x3D;1\ k&#x3D;0,1,2…$</td>
<td>$\dfrac z{z-1}$</td>
</tr>
<tr>
<td>$t$</td>
<td>$\dfrac1{s^2}$</td>
<td>$kT$</td>
<td>$\dfrac{Tz}{(z-1)^2}$</td>
</tr>
<tr>
<td>$t^2$</td>
<td>$\dfrac2{s^3}$</td>
<td>$(kT)^2$</td>
<td>$\dfrac{T^2z(z+1)}{(z-1)^3}$</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
<td>$a^k$</td>
<td>$\dfrac z{z-a}$</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
<td>$ka^k$</td>
<td>$\dfrac {az}{(z-a)^2}$</td>
</tr>
<tr>
<td>$e^{-at}$</td>
<td>$\dfrac1{s+a}$</td>
<td>$e^{-akT}$</td>
<td></td>
</tr>
<tr>
<td>$te^{-at}$</td>
<td>$\dfrac1{(s+a)^2}$</td>
<td>$kTe^{-akT}$</td>
<td></td>
</tr>
<tr>
<td>$sin(\omega t)$</td>
<td>$\dfrac{\omega}{s^2+\omega^2}$</td>
<td>$sin(\omega kT)$</td>
<td></td>
</tr>
<tr>
<td>$cos(\omega t)$</td>
<td>$\dfrac{s}{s^2+\omega^2}$</td>
<td>$cos(\omega kT)$</td>
<td></td>
</tr>
</tbody></table>
<h2 id="典型环节传递函数和频率特性"><a href="#典型环节传递函数和频率特性" class="headerlink" title="典型环节传递函数和频率特性"></a>典型环节传递函数和频率特性</h2><table>
<thead>
<tr>
<th></th>
<th>传递函数</th>
<th>频率特性</th>
</tr>
</thead>
<tbody><tr>
<td>放大环节</td>
<td>$K$</td>
<td>$A &#x3D; k \quad \varphi &#x3D; 0$</td>
</tr>
<tr>
<td>惯性环节</td>
<td>$\dfrac1{Ts+1}$</td>
<td>$A &#x3D; \dfrac1{\sqrt{1+\omega^2 T^2}} \quad \varphi &#x3D; -arctan(\omega T)$</td>
</tr>
<tr>
<td>振荡环节</td>
<td>$\dfrac{\omega_n^2}{s^2+2\zeta\omega_ns +\omega_n^2}$</td>
<td>$A &#x3D; \dfrac1{\sqrt{[1-(\dfrac{\omega}{\omega_n})^2]^2+(2\zeta \dfrac{\omega}{\omega_n})^2}} \ \varphi &#x3D; -arctan\dfrac{1-(\dfrac{\omega}{\omega_n})^2}{2\zeta \dfrac{\omega}{\omega_n}}$</td>
</tr>
<tr>
<td>积分环节</td>
<td>$\dfrac1s$</td>
<td>$A &#x3D; \dfrac1{\omega} \quad \varphi &#x3D; -90$</td>
</tr>
<tr>
<td>微分环节</td>
<td>$s$</td>
<td>$A &#x3D; \omega \quad \varphi &#x3D; 90$</td>
</tr>
<tr>
<td>延时环节</td>
<td>$e^{-\tau s}$</td>
<td>$A&#x3D;1 \quad \varphi &#x3D; -\omega \tau$</td>
</tr>
<tr>
<td>一阶微分环节</td>
<td>$Ts+1$</td>
<td>$A &#x3D; \sqrt{\omega^2T^2+1} \quad \varphi &#x3D; arctan\omega T$</td>
</tr>
<tr>
<td>二阶微分环节</td>
<td>$s^2+2\zeta \omega_ns+\omega_n^2$</td>
<td>$A &#x3D; {\sqrt{[1-(\dfrac{\omega}{\omega_n})^2]^2+(2\zeta \dfrac{\omega}{\omega_n})^2}} \ \varphi &#x3D; arctan\dfrac{1-(\dfrac{\omega}{\omega_n})^2}{2\zeta \dfrac{\omega}{\omega_n}}$</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>notebook</category>
      </categories>
      <tags>
        <tag>notebook</tag>
        <tag>automation</tag>
      </tags>
  </entry>
  <entry>
    <title>convolution</title>
    <url>/2021/04/21/deeplearning-pytorch/convolution/</url>
    <content><![CDATA[<h1 id="卷积定义"><a href="#卷积定义" class="headerlink" title="卷积定义"></a>卷积定义</h1><p>$$(f*g)(x) &#x3D; \int_{-\infty}^{+\infty}f(\tau)g(x-\tau)d\tau$$</p>
<p>卷积理解为加权积分，一个输出和多个输入有关，这些输入对输出的贡献程度不同。</p>
<p>$f$ 是被积函数（系统输入）</p>
<p>$g$ 是满足一定约束条件的权重函数（反应系统的结构参数）, 其自变量为<strong>某种距离</strong>，如时间距离，或坐标距离。</p>
<p>卷积的运算过程：翻转平移 $\to$ 加权积分 $\to$ 滑动 $\to$ 加权积分 $\to$ 滑动 $\to \cdots$ </p>
<ul>
<li><p>由于权重函数需要满足一定约束条件，需要将 $g$ 进行翻转和平移</p>
</li>
<li><p>将 $x$ 看做常数，求积分</p>
</li>
<li><p>卷积后的结果为关于 $x$ 的函数，随着 $x$ 的增加，表现为 $g$ 函数在图像上滑动</p>
</li>
</ul>
<p>数学定义的积分范围是无穷区间，但由于应用对象的不同，可以简化为有限区间内的积分。</p>
<h1 id="卷积应用"><a href="#卷积应用" class="headerlink" title="卷积应用"></a>卷积应用</h1><h2 id="在信号分析中"><a href="#在信号分析中" class="headerlink" title="在信号分析中"></a>在信号分析中</h2><p>$$(f*g)(T) &#x3D; \int_{0}^{T}f(\tau)g(T-\tau)d\tau$$</p>
<ul>
<li><p>本质：对不同时刻的输入所引起的响应进行加权积分。</p>
</li>
<li><p>$f(\tau)$ 是 $\tau$ 时刻系统的输入信号</p>
</li>
<li><p>$g(t)$ 是系统的单位冲激响应，反映了系统的结构参数</p>
</li>
<li><p>$f(\tau)g(T-\tau)$：$\tau$ 时刻的输入对 $T$ 时刻输出的影响</p>
</li>
<li><p>将 $g$ 函数进行翻转平移的原因：$\tau$ 时刻系统的输入，经历了时间：$T-\tau$ ，影响到了输出 $T$ 时刻的状态。也就是单位冲激响应时间上经历了 $T-\tau$ 的衰减，表现在卷积公式上就是 $g$ 函数满足 <strong>时间距离</strong> 上的约束。</p>
<p>  蓝色图像为翻转后的单位冲激响应：</p>
<p>  <img src="/./convolution/flip.png" alt="avatar"></p>
</li>
<li><p>将 $g$ 函数进行滑动的原因： $T$ 的增长</p>
<p>  滑动过程：</p>
<p>  <img src="/./convolution/DrawConvolution.gif" alt="avatar"></p>
</li>
<li><p>积分区间简化：</p>
<ul>
<li><p>由于因果系统在一个时刻的响应只与该时刻以前的输入有关，当 $\tau&gt;T$ 时，$g(T-\tau) &#x3D; 0$ , 所以积分上限可改为 $T$。</p>
</li>
<li><p>人为规定在零时刻以前没有输入，当 $\tau &lt; 0$ 时，$f(\tau) &#x3D; 0$， 所以积分下限可改为 $0$</p>
</li>
</ul>
</li>
</ul>
<h3 id="证明动态电路卷积定理"><a href="#证明动态电路卷积定理" class="headerlink" title="证明动态电路卷积定理"></a>证明动态电路卷积定理</h3><p><strong>已知：</strong> $h(t)$为单位冲激响应，$e(t)$为任意激励。</p>
<p><strong>零状态响应：</strong> $c(T) &#x3D; \int_{t_0}^Te(T-\tau)h(\tau)d\tau$</p>
<p><strong>证明：</strong></p>
<ul>
<li><p>前提：电路系统满足 <strong>线性原理</strong> 和 <strong>叠加原理</strong> 。</p>
</li>
<li><p>假设 $e(t)$ 从 $t_0$ 时刻开始作用，要求 $T$ 时刻零状态响应。</p>
</li>
<li><p>将 $e(t)$ 分割为数个长条，每个长条宽度为$\Delta t$ 。<br>  <img src="/./convolution/et.png" alt="avatar"></p>
</li>
<li><p>改写激励函数，用阶梯函数 $e(\zeta)$ 近似代表原激励函数</p>
<p>  $e(\zeta) &#x3D; \sum_{k&#x3D;0}^{n-1}e(t_k)\delta(\zeta-t_k)\Delta t$</p>
<p>  当 $\zeta &#x3D; t_0$ 时，</p>
<p>  $e(\zeta) &#x3D; e(t_0) &#x3D; e(t_0)\delta(t_0 - t_0)\Delta t$</p>
<p>  其他项由于冲激函数的存在，全部变成了零。</p>
</li>
<li><p>一个矩形脉冲下的零状态响应：</p>
<p>  激励在 $t_k$ 时刻开始作用, 到 $T$ 时刻, 经历了 $T-t_k$</p>
<p>  激励： $e(t_k) &#x3D; e(t_k)\delta(t_k - t_k)\Delta t$</p>
<p>  $T$ 时刻对应的冲激响应： $c_k(T) &#x3D; e(t_k)\Delta t \cdot h(T-t_k)$</p>
</li>
<li><p>所有矩形脉冲下的零状态响应：</p>
<p>  $T$ 时刻对应的冲激响应： $c(T) &#x3D; \sum_{k&#x3D;0}^{n-1}e(t_k)\Delta t \cdot h(T-t_k)$</p>
</li>
<li><p>$\Delta t$ 取无穷小，<strong>求和</strong> 变为 <strong>积分</strong></p>
<p>  $t_k$ 的范围是 $k&#x3D;0 \to n-1$</p>
<p>  令 $\tau &#x3D; t_k$</p>
<p>  $\tau$ 的范围是 $\tau&#x3D;t_0 \to t_{n-1}(T)$</p>
<p>  $T$ 时刻对应的冲激响应： $c(T) &#x3D; \int_{t_0}^{T} e(\tau) h(T-\tau) d\tau$</p>
<p>  定积分换元后：</p>
<p>  $c(T) &#x3D; \int_{t_0}^{T} e(T - \tau) h(\tau) d\tau$</p>
</li>
</ul>
<h2 id="在图像处理中"><a href="#在图像处理中" class="headerlink" title="在图像处理中"></a>在图像处理中</h2><p>离散形式的二维卷积：</p>
<p>$$(f*g)(x,y) &#x3D; \sum_{i&#x3D;-\infty}^{+\infty}\sum_{j&#x3D;-\infty}^{+\infty}f(i,j)g(x-i,y-j)$$</p>
<p>一维与二维：</p>
<p><img src="/./convolution/si_mu.png" alt="avatar"></p>
<p>图像处理中的卷积：</p>
<p><img src="/./convolution/conv-image.png" alt="avatar"></p>
<ul>
<li><p>本质：二维卷积，对所有的像素点进行加权求和。</p>
</li>
<li><p>$f(i,j)$ 是原图像在 $(i, j)$ 点的像素值</p>
</li>
<li><p>$g(u,v)$ 输入图像的一个像素点（单位值）对输出图像的一个像素点的影响，不同于信号分析（一维卷积）中 $g$, 这里的权重不随时间变化，而是随着两个像素点之间的坐标距离变化。这个函数包含了对原图像处理的目的（系统的结构参数），如锐化或模糊，不同的目的有不同的 $g$ 。</p>
</li>
<li><p>$f(i, j)g(x-i,y-j)$：原图坐标为 $(i, j)$ 的像素点对时刻的输入对输出图像坐标为 $(x,y)$ 的像素点的影响</p>
</li>
<li><p>将 $g$ 函数进行翻转平移的原因：类似于一维卷积， $(i,j)$ 点的输入，经历了距离：$(x-i, y-j)$ ，影响到了输出 $(x,y)$ 点的状态。表现在卷积公式上就是 $g$ 函数满足 <strong>坐标距离</strong> 上的约束。</p>
</li>
<li><p>将 $g$ 函数进行滑动的原因： $(x,y)$ 的增长</p>
</li>
<li><p>求和区间简化： 图像是有界的，所以求和的上下限变为图形的界限</p>
</li>
<li><p>$g$ 的简化：在一定范围内有权值，大于一定范围（比如3*3, 5*5）权值为0，这样可以把原本很大的权值函数简化为小的卷积核。</p>
</li>
</ul>
<p>简化后的公式，（ $g$ 在一定范围内有权值 ）：</p>
<p>$$(f*g)(x,y) &#x3D; \sum_{i&#x3D;0}^{width}\sum_{j&#x3D;0}^{height}f(i,j)g(x-i,y-j)$$</p>
<p>等效变换（ 3*3 ）:</p>
<p>$$ output(x,y) &#x3D; \sum_{i&#x3D;-1}^{1}\sum_{j&#x3D;-1}^{1}f(x-i,x-j)g(i,j)$$</p>
<p>滑动过程：</p>
<p><img src="/./convolution/draw_conv.gif" alt="avatar"></p>
<p>参考知乎：如何通俗易懂地理解卷积？ palet和1335的回答：<a href="https://www.zhihu.com/question/22298352">https://www.zhihu.com/question/22298352</a></p>
]]></content>
      <categories>
        <category>deeplearning</category>
      </categories>
      <tags>
        <tag>deeplearning</tag>
        <tag>convolution</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch-dataset</title>
    <url>/2021/05/14/deeplearning-pytorch/pytorch-dataset/</url>
    <content><![CDATA[<h1 id="ETL"><a href="#ETL" class="headerlink" title="ETL"></a>ETL</h1><ol>
<li><p>Extract, 提取数据集</p>
</li>
<li><p>Transform, 转换为张量</p>
</li>
<li><p>Load, 数据放在易于访问的对象中</p>
</li>
</ol>
<h1 id="torchvision"><a href="#torchvision" class="headerlink" title="torchvision"></a>torchvision</h1><p>提供对流行的数据集、模型架构和计算机视觉的图像转换的访问的包</p>
<h1 id="torchvision-utils"><a href="#torchvision-utils" class="headerlink" title="torchvision.utils"></a>torchvision.utils</h1><h2 id="torchvision-utils-make-gird"><a href="#torchvision-utils-make-gird" class="headerlink" title="torchvision.utils.make_gird()"></a>torchvision.utils.make_gird()</h2><p>把很多图像的张量拼在一起</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 参数：</span><br><span class="line">make_grid(</span><br><span class="line">    tensor: Union[torch.Tensor, List[torch.Tensor]],</span><br><span class="line">    nrow: int = 8,</span><br><span class="line">    padding: int = 2,</span><br><span class="line">    normalize: bool = False,</span><br><span class="line">    value_range: Optional[Tuple[int, int]] = None,</span><br><span class="line">    scale_each: bool = False,</span><br><span class="line">    pad_value: int = 0,</span><br><span class="line">    **kwargs</span><br><span class="line">) -&gt; torch.Tensor:</span><br></pre></td></tr></table></figure>

<p>源码： <a href="https://pytorch.org/vision/stable/_modules/torchvision/utils.html#make_grid">https://pytorch.org/vision/stable/_modules/torchvision/utils.html#make_grid</a></p>
<p>如果传入图像是单通道灰度图，会转化为三通道的，源码部分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if tensor.dim() == 4 and tensor.size(1) == 1:  # single-channel images</span><br><span class="line">    tensor = torch.cat((tensor, tensor, tensor), 1)</span><br></pre></td></tr></table></figure>

<h1 id="torchvision-transforms"><a href="#torchvision-transforms" class="headerlink" title="torchvision.transforms"></a>torchvision.transforms</h1><p>图像处理的通用转换接口</p>
<h1 id="类：Dataset-DataLoader"><a href="#类：Dataset-DataLoader" class="headerlink" title="类：Dataset, DataLoader"></a>类：Dataset, DataLoader</h1><table>
<thead>
<tr>
<th>class</th>
<th>description</th>
</tr>
</thead>
<tbody><tr>
<td>torch.utils.data.Dataset</td>
<td>一个表示数据集的抽象类</td>
</tr>
<tr>
<td>torch.utils.data.DataLoader</td>
<td>封装数据集，提供对底层数据的访问</td>
</tr>
</tbody></table>
<p>两个类都是可迭代的，但 DataLoader 可以提供封装 batch 的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据集</span></span><br><span class="line">true_w = torch.tensor([<span class="number">2</span>, -<span class="number">3.4</span>])</span><br><span class="line">true_b = <span class="number">4.2</span></span><br><span class="line">features, labels = d2l.synthetic_data(true_w, true_b, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test dataset</span></span><br><span class="line">dataset =   data.TensorDataset(features,labels)</span><br><span class="line">dataloader = data.DataLoader(dataset, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">it_dataset = <span class="built_in">iter</span>(dataset)</span><br><span class="line">it_dataloader = <span class="built_in">iter</span>(dataloader) <span class="comment"># 10 items in a batch</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dataset&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;type&#x27;</span>, <span class="built_in">type</span>(<span class="built_in">next</span>(it_dataset)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it_dataset))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dataloader&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;type&#x27;</span>, <span class="built_in">type</span>(<span class="built_in">next</span>(it_dataloader)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;len&#x27;</span>, <span class="built_in">len</span>(<span class="built_in">next</span>(it_dataloader)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it_dataloader))</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dataset</span><br><span class="line">type &lt;class &#x27;tuple&#x27;&gt;</span><br><span class="line">(tensor([ 0.9377, -1.0325]), tensor([5.2714]))</span><br><span class="line">----------</span><br><span class="line">dataloader</span><br><span class="line">type &lt;class &#x27;list&#x27;&gt;</span><br><span class="line">len 2</span><br><span class="line">[tensor([[ 1.1866, -0.5799],</span><br><span class="line">        [-0.5341,  0.9155],</span><br><span class="line">        [ 0.5173,  1.5141],</span><br><span class="line">        [ 0.9799, -0.9593],</span><br><span class="line">        [ 0.8820, -0.2240],</span><br><span class="line">        [-0.6207, -0.0412],</span><br><span class="line">        [ 0.3258, -1.1653],</span><br><span class="line">        [-0.3668, -1.0674],</span><br><span class="line">        [ 0.5764,  0.4123],</span><br><span class="line">        [ 0.2643,  0.4447]]), tensor([[ 4.7781],</span><br><span class="line">        [ 2.4811],</span><br><span class="line">        [ 7.3403],</span><br><span class="line">        [-1.0926],</span><br><span class="line">        [ 5.4263],</span><br><span class="line">        [-0.6430],</span><br><span class="line">        [-1.1687],</span><br><span class="line">        [10.5257],</span><br><span class="line">        [ 3.2337],</span><br><span class="line">        [ 4.1173]])]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>deeplearning</category>
      </categories>
      <tags>
        <tag>deeplearning</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch-tensor</title>
    <url>/2021/05/08/deeplearning-pytorch/pytorch-tensor/</url>
    <content><![CDATA[<h1 id="张量（Tensor）的属性"><a href="#张量（Tensor）的属性" class="headerlink" title="张量（Tensor）的属性"></a>张量（Tensor）的属性</h1><h2 id="数据类型-dtype"><a href="#数据类型-dtype" class="headerlink" title="数据类型 dtype"></a>数据类型 dtype</h2><p>张量的互相操作要同类型<br>新版pytorch自动转换类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = torch.Tensor()</span><br><span class="line">&gt;&gt;&gt; t.dtype</span><br><span class="line">torch.float32</span><br></pre></td></tr></table></figure>

<h2 id="在内存中的布局"><a href="#在内存中的布局" class="headerlink" title="在内存中的布局"></a>在内存中的布局</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t.layout</span><br><span class="line">torch.strided</span><br></pre></td></tr></table></figure>

<h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><p>使用多设备时，张量之间的操作必须存在于同一个设备</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t.device</span><br><span class="line">device(type=&#x27;cpu&#x27;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; device = torch.device(&#x27;cuda:0&#x27;)</span><br><span class="line">&gt;&gt;&gt; device</span><br><span class="line">device(type=&#x27;cuda&#x27;, index=0)</span><br></pre></td></tr></table></figure>

<h2 id="Rank（阶数）"><a href="#Rank（阶数）" class="headerlink" title="Rank（阶数）"></a>Rank（阶数）</h2><p>常量： rank 0<br>向量： rank 1<br>矩阵： rank 2<br>n维张量： rank n</p>
<h2 id="Shape（形状）"><a href="#Shape（形状）" class="headerlink" title="Shape（形状）"></a>Shape（形状）</h2><p><strong>指明每一层有多少个元素</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = torch.Tensor([1,2,3])</span><br><span class="line">&gt;&gt;&gt; a.shape</span><br><span class="line">torch.Size([3])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a = torch.Tensor([[1,2,3],[4,5,6],[7,8,9]])</span><br><span class="line">&gt;&gt;&gt; a.shape</span><br><span class="line">torch.Size([3, 3])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b = torch.Tensor([[1,2],[4,5],[7,8]])</span><br><span class="line">&gt;&gt;&gt; b.shape</span><br><span class="line">torch.Size([3, 2])</span><br></pre></td></tr></table></figure>

<p>a.rank &#x3D; <code>len(a.shape)</code></p>
<p>图像中的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># [B,C,H,W]</span><br><span class="line"># [batch, channel, height, width]</span><br><span class="line"></span><br><span class="line"># 三幅图，一个通道，2*2大小</span><br><span class="line"># [3,1,2,2]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">tensor([[[[1., 1.],</span><br><span class="line">          [1., 1.]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[2., 2.],</span><br><span class="line">          [2., 2.]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[3., 3.],</span><br><span class="line">          [3., 3.]]]])</span><br><span class="line"></span><br><span class="line">#------------------</span><br><span class="line">#          Batch1     </span><br><span class="line">#          | Channel1</span><br><span class="line">#          | | Line1</span><br><span class="line">#          | | | Column1</span><br><span class="line">#          | | | |</span><br><span class="line">#          ↓ ↓ ↓ ↓</span><br><span class="line"># tensor([ [ [ [ 1., 1.],</span><br><span class="line">#              [ 1., 1.] ] ],</span><br><span class="line">#                    ↑ ↑ ↑ ↑</span><br><span class="line">#                    | | | |</span><br><span class="line">#                    | | | Batch1</span><br><span class="line">#                    | | Channel1 </span><br><span class="line">#                    | Line2  </span><br><span class="line">#                    Column2   </span><br><span class="line">#</span><br><span class="line">#         [[[2., 2.],</span><br><span class="line">#           [2., 2.]]],</span><br><span class="line"># </span><br><span class="line"># </span><br><span class="line">#         [[[3., 3.],</span><br><span class="line">#           [3., 3.]]]])</span><br></pre></td></tr></table></figure>

<h1 id="创建张量"><a href="#创建张量" class="headerlink" title="创建张量"></a>创建张量</h1><h2 id="使用现有的数据创建张量"><a href="#使用现有的数据创建张量" class="headerlink" title="使用现有的数据创建张量"></a>使用现有的数据创建张量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; data = np.array([1,2,3,])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; data</span><br><span class="line">array([1, 2, 3])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; type(data)</span><br><span class="line">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>构造函数，使用默认的数据类型，复制数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; torch.Tensor(data)</span><br><span class="line">tensor([1., 2., 3.])</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>（推荐）工厂函数，使用相同的数据类型（或人为指定），复制数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; torch.tensor(data)</span><br><span class="line">tensor([1, 2, 3])</span><br></pre></td></tr></table></figure>
</li>
<li><p>工厂函数，使用相同的数据类型（或人为指定），只接受numpy数组，共享数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; torch.from_numpy(data)</span><br><span class="line">tensor([1, 2, 3])</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>（推荐）工厂函数，使用相同的数据类型（或人为指定），不只是numpy数组，共享数据</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; torch.as_tensor(data)</span><br><span class="line">tensor([1, 2, 3])</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="使用特定数据或随机数创建张量"><a href="#使用特定数据或随机数创建张量" class="headerlink" title="使用特定数据或随机数创建张量"></a>使用特定数据或随机数创建张量</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; torch.eye(3)</span><br><span class="line">tensor([[1., 0., 0.],</span><br><span class="line">        [0., 1., 0.],</span><br><span class="line">        [0., 0., 1.]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; torch.zeros(2,2)</span><br><span class="line">tensor([[0., 0.],</span><br><span class="line">        [0., 0.]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; torch.ones(2,2)</span><br><span class="line">tensor([[1., 1.],</span><br><span class="line">        [1., 1.]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; torch.rand(2,2)</span><br><span class="line">tensor([[0.2826, 0.3104],</span><br><span class="line">        [0.6186, 0.4671]])</span><br></pre></td></tr></table></figure>

<h1 id="对张量形状的基本操作"><a href="#对张量形状的基本操作" class="headerlink" title="对张量形状的基本操作"></a>对张量形状的基本操作</h1><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>view 和 reshape 的区别？</p>
<h2 id="Reshape"><a href="#Reshape" class="headerlink" title="Reshape"></a>Reshape</h2><blockquote>
<p>怎么实现的？看源码</p>
</blockquote>
<p>通过reshape可以改变形状或阶数</p>
<p><strong>获得元素个数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = torch.tensor([[1,1,1,1,],[2,2,2,2,],[3,3,3,3,],],dtype=torch.float32)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; torch.tensor(t.shape).prod()</span><br><span class="line">tensor(12)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; t.numel()</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<p><strong>元素个数要一样</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = torch.tensor([[1,1,1,1,],[2,2,2,2,],[3,3,3,3,],],dtype=torch.float32)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; t.reshape(6,2)</span><br><span class="line">tensor([[1., 1.],</span><br><span class="line">        [1., 1.],</span><br><span class="line">        [2., 2.],</span><br><span class="line">        [2., 2.],</span><br><span class="line">        [3., 3.],</span><br><span class="line">        [3., 3.]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; t.reshape(4,3)</span><br><span class="line">tensor([[1., 1., 1.],</span><br><span class="line">        [1., 2., 2.],</span><br><span class="line">        [2., 2., 3.],</span><br><span class="line">        [3., 3., 3.]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; t.reshape(1,12)</span><br><span class="line">tensor([[1., 1., 1., 1., 2., 2., 2., 2., 3., 3., 3., 3.]])</span><br><span class="line"></span><br><span class="line"># 改变阶数</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; t.reshape(2,2,3)</span><br><span class="line">tensor([[[1., 1., 1.],</span><br><span class="line">         [1., 2., 2.]],</span><br><span class="line"></span><br><span class="line">        [[2., 2., 3.],</span><br><span class="line">         [3., 3., 3.]]])</span><br></pre></td></tr></table></figure>

<h2 id="Squeeze"><a href="#Squeeze" class="headerlink" title="Squeeze"></a>Squeeze</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># original</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; t1</span><br><span class="line">tensor([[1., 1., 1., 1., 2., 2., 2., 2., 3., 3., 3., 3.]])</span><br><span class="line">&gt;&gt;&gt; t1.shape</span><br><span class="line">torch.Size([1, 12])</span><br><span class="line"></span><br><span class="line"># squeezed</span><br><span class="line">&gt;&gt;&gt; t1.squeeze()</span><br><span class="line">tensor([1., 1., 1., 1., 2., 2., 2., 2., 3., 3., 3., 3.])</span><br><span class="line">&gt;&gt;&gt; t1.squeeze().shape</span><br><span class="line">torch.Size([12])</span><br><span class="line"></span><br><span class="line"># unsqueezed</span><br><span class="line">&gt;&gt;&gt; t2 = t1.squeeze()</span><br><span class="line">&gt;&gt;&gt; t2</span><br><span class="line">tensor([1., 1., 1., 1., 2., 2., 2., 2., 3., 3., 3., 3.])</span><br><span class="line">&gt;&gt;&gt; t2.unsqueeze(dim=0)</span><br><span class="line">tensor([[1., 1., 1., 1., 2., 2., 2., 2., 3., 3., 3., 3.]])</span><br><span class="line">&gt;&gt;&gt; t2.unsqueeze(dim=0).shape</span><br><span class="line">torch.Size([1, 12])</span><br></pre></td></tr></table></figure>

<h2 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h2><p><strong>pytorch自带的flatten()</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d</span><br><span class="line">tensor([[[[1., 1.],</span><br><span class="line">          [1., 1.]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[2., 2.],</span><br><span class="line">          [2., 2.]]],</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        [[[3., 3.],</span><br><span class="line">          [3., 3.]]]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d.flatten().shape</span><br><span class="line">torch.Size([12])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d.flatten(start_dim=0).shape</span><br><span class="line">torch.Size([12])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d.flatten(start_dim=1).shape</span><br><span class="line">torch.Size([3, 4])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d.flatten(start_dim=2).shape</span><br><span class="line">torch.Size([3, 1, 4])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; d.flatten(start_dim=3).shape</span><br><span class="line">torch.Size([3, 1, 2, 2])</span><br></pre></td></tr></table></figure>

<p><strong>自己构造</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一种方法</span><br><span class="line"></span><br><span class="line">def flatten(t):</span><br><span class="line">    t = t.reshape(1,-1)</span><br><span class="line">    t = t.squeeze()</span><br><span class="line">    return t</span><br><span class="line"></span><br><span class="line"># 第二种方法</span><br><span class="line"></span><br><span class="line">def flatten(t):</span><br><span class="line">    t = t.reshape(-1)</span><br><span class="line">    # 或 t = t.reshape(t.numel())</span><br><span class="line">    return t</span><br><span class="line"></span><br><span class="line"># 起始轴自定义</span><br><span class="line"></span><br><span class="line">def MyFlatten(t, start_dim=0，end_dim = -1):</span><br><span class="line"></span><br><span class="line">    if start_dim&gt;=0 and start_dim &lt; len(t.shape) and (end_dim == -1 or (end_dim &gt; start_dim and end_dim &lt; len(t.shape) )):</span><br><span class="line">        sp = t.shape</span><br><span class="line">        spn = []</span><br><span class="line">        inin = 1</span><br><span class="line"></span><br><span class="line">        for i in range(start_dim, end_dim+1, 1):</span><br><span class="line">            inin *= sp[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for i in range(0,start_dim,1):</span><br><span class="line">            spn.append(sp[i])</span><br><span class="line">        spn.append(inin)</span><br><span class="line">        for i in range(end_dim+1, len(sp), 1):</span><br><span class="line">            spn.append(sp[i])</span><br><span class="line"></span><br><span class="line">        spn = torch.Size(spn)</span><br><span class="line"></span><br><span class="line">        t = t.reshape(spn)</span><br><span class="line">    else:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    return t</span><br></pre></td></tr></table></figure>

<h2 id="同阶合并-cat"><a href="#同阶合并-cat" class="headerlink" title="同阶合并 cat()"></a>同阶合并 cat()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a</span><br><span class="line">tensor([[1., 1., 1.],</span><br><span class="line">        [1., 1., 1.]])</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">tensor([[2., 2., 2.],</span><br><span class="line">        [2., 2., 2.],</span><br><span class="line">        [2., 2., 2.],</span><br><span class="line">        [2., 2., 2.]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; torch.cat((a,b),dim=0)</span><br><span class="line">tensor([[1., 1., 1.],</span><br><span class="line">        [1., 1., 1.],</span><br><span class="line">        [2., 2., 2.],</span><br><span class="line">        [2., 2., 2.],</span><br><span class="line">        [2., 2., 2.],</span><br><span class="line">        [2., 2., 2.]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; torch.cat((a,b),dim=1)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">RuntimeError: Sizes of tensors must match except in dimension 1. Got 2 and 4 in dimension 0 (The offending index is 1)</span><br></pre></td></tr></table></figure>

<h2 id="升阶合并-stack"><a href="#升阶合并-stack" class="headerlink" title="升阶合并 stack()"></a>升阶合并 stack()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a</span><br><span class="line">tensor([[1., 1.],</span><br><span class="line">        [1., 1.]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">tensor([[2., 2.],</span><br><span class="line">        [2., 2.]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">tensor([[3., 3.],</span><br><span class="line">        [3., 3.]])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; torch.stack((a,b,c))</span><br><span class="line">tensor([[[1., 1.],</span><br><span class="line">         [1., 1.]],</span><br><span class="line"></span><br><span class="line">        [[2., 2.],</span><br><span class="line">         [2., 2.]],</span><br><span class="line"></span><br><span class="line">        [[3., 3.],</span><br><span class="line">         [3., 3.]]])</span><br></pre></td></tr></table></figure>

<h1 id="广播（Broadcasting）"><a href="#广播（Broadcasting）" class="headerlink" title="广播（Broadcasting）"></a>广播（Broadcasting）</h1><h1 id="一些取出张量的操作"><a href="#一些取出张量的操作" class="headerlink" title="一些取出张量的操作"></a>一些取出张量的操作</h1><h2 id="item"><a href="#item" class="headerlink" title=".item()"></a>.item()</h2><p>只适用于仅拥有一个元素的张量，对维数没有要求，返回张量内部的数据（基本的python数字类型）</p>
<h2 id="tolist"><a href="#tolist" class="headerlink" title=".tolist()"></a>.tolist()</h2><p>类似.item(), 返回list</p>
<h2 id="numpy"><a href="#numpy" class="headerlink" title=".numpy()"></a>.numpy()</h2><p>Returns self tensor as a NumPy ndarray</p>
<h2 id="detach-detach-data"><a href="#detach-detach-data" class="headerlink" title="detach(), detach_(), data"></a>detach(), detach_(), data</h2>]]></content>
      <categories>
        <category>deeplearning</category>
      </categories>
      <tags>
        <tag>deeplearning</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习笔记</title>
    <url>/2021/05/30/program-language/python-language/</url>
    <content><![CDATA[<h1 id="第一章-python数据模型"><a href="#第一章-python数据模型" class="headerlink" title="第一章 python数据模型"></a>第一章 python数据模型</h1><p>官方文档：<a href="https://docs.python.org/zh-cn/3.8/reference/datamodel.html">https://docs.python.org/zh-cn/3.8/reference/datamodel.html</a><br>python 的一切数据类型都是类</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Python 变量是引用式变量，创建对象之后才会把变量分配给对象。<br><img src="/./python-language/VAR.png" alt="avatar"></p>
<h3 id="可变类型和不可变类型"><a href="#可变类型和不可变类型" class="headerlink" title="可变类型和不可变类型"></a>可变类型和不可变类型</h3><ul>
<li><p>可变：列表、字典、集合</p>
</li>
<li><p>不可变：数字、字符串、元组</p>
</li>
</ul>
<h3 id="is-和-x3D-x3D"><a href="#is-和-x3D-x3D" class="headerlink" title="is 和 &#x3D;&#x3D;"></a>is 和 &#x3D;&#x3D;</h3><p>&#x3D;&#x3D; 运算符比较两个对象的值，is 比较对象的标识。</p>
<h3 id="深复制和浅复制"><a href="#深复制和浅复制" class="headerlink" title="深复制和浅复制"></a>深复制和浅复制</h3><table>
<thead>
<tr>
<th>↓与源容器相比↓</th>
<th>copy.copy</th>
<th>copy.deepcopy</th>
<th>&#x3D;</th>
</tr>
</thead>
<tbody><tr>
<td><strong>id</strong></td>
<td>不同</td>
<td>不同</td>
<td>相同</td>
</tr>
<tr>
<td><strong>内容</strong></td>
<td>复制源容器中元素的引用</td>
<td>创建完全独立的对象</td>
<td>完全相同</td>
</tr>
</tbody></table>
<h2 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h2><p>为保证行为的一致性，python 解释器碰到特殊的句法时，会使用**特殊方法(special method)**激活一些基本的对象操作，这些方法以双下划线开头结尾，例如：<code>__getitem__()</code>，解释器会把 <code>my_collection[key]</code> 改为调用 <code>my_collection.__getitem__()</code></p>
<p><strong>special method</strong> 的别名：<strong>magic method</strong>, <strong>dunder method</strong></p>
<p>很多时候，特殊方法的调用是隐式的，是为了被 Python 解释器调用的，比如: <code>for i in x</code>, 其背后用的是 <code>iter(x)</code>, 再背后是<code>x.__iter__()</code>。前提是这个方法在 x 中被实现了。</p>
<p>通过内置函数 (len, iter, str, …) 来使用特殊方法是最好的选择</p>
<p>官方文档给出了众多特殊方法，利用这些特殊方法，可以构建自己的数据（对象）模型，而能够使用python的内置方法、算术运算、位运算和比较操作等等</p>
<h2 id="增量赋值"><a href="#增量赋值" class="headerlink" title="增量赋值"></a>增量赋值</h2><p>运算符 +&#x3D; 和 *&#x3D; 的效果取决于第一个操作对象。</p>
<p>对于 +&#x3D; :<br>如果操作对象实现了 __iadd__ (用于就地加法), 就会调用他。如果没有实现，Python 会退一步调用 __add__ (先计算出结果，得到一个新的对象，然后再赋值)<br>(可变序列一般都实现了__iadd__)</p>
<hr>
<h1 id="第二章-序列-sequences"><a href="#第二章-序列-sequences" class="headerlink" title="第二章 序列 (sequences)"></a>第二章 序列 (sequences)</h1><p>序列：有序，可索引</p>
<p>Python 标准库用 C 实现了丰富的序列类型：</p>
<table>
<thead>
<tr>
<th></th>
<th>容器序列(Container sequences)<br>存放引用，类型可不同</th>
<th>扁平序列(Flat sequences)<br>存放数据，内存连续，类型相同</th>
</tr>
</thead>
<tbody><tr>
<td><strong>可变序列(Mutable sequences)</strong></td>
<td>list, collections.deque</td>
<td>bytearry, memoryview, array.array</td>
</tr>
<tr>
<td><strong>不可变序列(Immutable sequences)</strong></td>
<td>tuple</td>
<td>str, bytes</td>
</tr>
</tbody></table>
<h2 id="列表推导式和生成器表达式"><a href="#列表推导式和生成器表达式" class="headerlink" title="列表推导式和生成器表达式"></a>列表推导式和生成器表达式</h2><p>List Comprehensions(listcomps) and Genderator Expressions(genexps)</p>
<p>listcomps 和 genexps 长得极其相似。<br>listcomps: 用方括号包住表达式，一次生成所有数据<br>genexps: 用圆括号包住表达式，背后遵守了迭代器协议，一次只生成一个数据</p>
<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>列表推导式的作用只有一个作用：生成列表</p>
<p>列表推导式的用法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;I can fly&quot;</span></span><br><span class="line">new_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> string]</span><br><span class="line">new_list1 = [i+<span class="string">&quot;1&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> string]</span><br><span class="line">new_list2 = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> string]</span><br><span class="line"><span class="built_in">print</span>(new_list)</span><br><span class="line"><span class="built_in">print</span>(new_list1)</span><br><span class="line"><span class="built_in">print</span>(new_list2)</span><br><span class="line"></span><br><span class="line">color = [<span class="string">&quot;black&quot;</span>, <span class="string">&quot;white&quot;</span>]</span><br><span class="line">size = [<span class="string">&quot;S&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;L&quot;</span>]</span><br><span class="line"></span><br><span class="line">shirt = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> color</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> size]</span><br><span class="line"><span class="built_in">print</span>(shirt)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[&#x27;I&#x27;, &#x27; &#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;n&#x27;, &#x27; &#x27;, &#x27;f&#x27;, &#x27;l&#x27;, &#x27;y&#x27;]</span><br><span class="line">[&#x27;I1&#x27;, &#x27; 1&#x27;, &#x27;c1&#x27;, &#x27;a1&#x27;, &#x27;n1&#x27;, &#x27; 1&#x27;, &#x27;f1&#x27;, &#x27;l1&#x27;, &#x27;y1&#x27;]</span><br><span class="line">[73, 32, 99, 97, 110, 32, 102, 108, 121]</span><br><span class="line">[(&#x27;black&#x27;, &#x27;S&#x27;), (&#x27;black&#x27;, &#x27;M&#x27;), (&#x27;black&#x27;, &#x27;L&#x27;), (&#x27;white&#x27;, &#x27;S&#x27;),</span><br><span class="line">&#x27;white&#x27;, &#x27;M&#x27;), (&#x27;white&#x27;, &#x27;L&#x27;)]</span><br></pre></td></tr></table></figure>

<h3 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h3><p>用于初始化其他序列类型，可以逐个产出元素。<br>如果用列表推导初始化元组这些其他的数据类型，会先建立一个完整的列表，再把列表传到某个构造函数里</p>
<p>用生成器表达式初始化元组：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">&quot;i can fly&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(char <span class="keyword">for</span> char <span class="keyword">in</span> string)</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7f7a5bac17d8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(<span class="built_in">ord</span>(char) <span class="keyword">for</span> char <span class="keyword">in</span> string)</span><br><span class="line">(<span class="number">105</span>, <span class="number">32</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">32</span>, <span class="number">102</span>, <span class="number">108</span>, <span class="number">121</span>)</span><br></pre></td></tr></table></figure>

<p>如果 genexps 是一个函数调用过程中的唯一参数，就不需要再用括号把它围起来</p>
<p>用生成器表达式实现一个笛卡尔积：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tshirt <span class="keyword">in</span> (<span class="string">&quot;%s %s&quot;</span>%(c,s) <span class="keyword">for</span> c <span class="keyword">in</span> colors <span class="keyword">for</span> s <span class="keyword">in</span> sizes):</span><br><span class="line">    <span class="built_in">print</span>(tshirt)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> colors:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> sizes:</span><br><span class="line">        <span class="built_in">print</span>(i, j)</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">black S</span><br><span class="line">black M</span><br><span class="line">black L</span><br><span class="line">white S</span><br><span class="line">white M</span><br><span class="line">white L</span><br><span class="line">----------</span><br><span class="line">black S</span><br><span class="line">black M</span><br><span class="line">black L</span><br><span class="line">white S</span><br><span class="line">white M</span><br><span class="line">white L</span><br></pre></td></tr></table></figure>

<h2 id="元组的相对不可变性"><a href="#元组的相对不可变性" class="headerlink" title="元组的相对不可变性"></a>元组的相对不可变性</h2><p>元组中不可变的是元素的标识(id), 而元组的值会随着引用的可变对象的变化而变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu = (<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu[<span class="number">0</span>] = <span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu[-<span class="number">1</span>].append(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tu</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>])</span><br></pre></td></tr></table></figure>

<h2 id="元组拆包"><a href="#元组拆包" class="headerlink" title="元组拆包"></a>元组拆包</h2><p>元组拆包可以应用到任何可迭代对象上</p>
<h3 id="‘-‘-运算符"><a href="#‘-‘-运算符" class="headerlink" title="‘*‘ 运算符"></a>‘*‘ 运算符</h3><ol>
<li><strong>用于把可迭代对象拆开作为函数的参数</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SumAndMinus</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b, a-b</span><br><span class="line"></span><br><span class="line">para = (<span class="number">1</span>,<span class="number">19</span>)</span><br><span class="line"><span class="built_in">print</span>(SumAndMinus(*para))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="comment">#(20, -18)</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>用于处理拆包剩余的元素</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,*rest = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b,rest)</span><br><span class="line"></span><br><span class="line">a,b,*rest,c,d = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b,rest,c,d)</span><br><span class="line"></span><br><span class="line">*rest,a,b = <span class="built_in">range</span>(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(rest,a,b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(rest))</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">0 1 [2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">0 1 [2, 3, 4, 5, 6, 7] 8 9</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7] 8 9</span><br><span class="line">&lt;class &#x27;list&#x27;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="嵌套元组拆包"><a href="#嵌套元组拆包" class="headerlink" title="嵌套元组拆包"></a>嵌套元组拆包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">para = (<span class="string">&quot;China&quot;</span>, <span class="string">&quot;HDU&quot;</span>, <span class="number">20</span>, (<span class="string">&quot;Dad&quot;</span>, <span class="string">&quot;Mom&quot;</span>))</span><br><span class="line"></span><br><span class="line">nationality, university, age, (father, mother) = para</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(nationality, university, age, (father, mother))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># China HDU 20 (&#x27;Dad&#x27;, &#x27;Mom&#x27;)</span></span><br></pre></td></tr></table></figure>

<h2 id="具名元组-namedtuple"><a href="#具名元组-namedtuple" class="headerlink" title="具名元组(namedtuple)"></a>具名元组(namedtuple)</h2><p>collections.namedtuple 是一个工厂函数，可以用来构建一个 <strong>带字段名的元组</strong> 和一个 <strong>有名字的类</strong></p>
<p>创建一个具名元组需要两个参数:</p>
<ol>
<li>类名</li>
<li>类的各个字段的名字，可由 数个字符串组成的可迭代对象 或 空格分开的字符串</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]) <span class="comment"># (&#x27;Point&#x27;, &#x27;x y&#x27;) is ok</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point.__doc__                   <span class="comment"># docstring for the new class</span></span><br><span class="line"><span class="string">&#x27;Point(x, y)&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">11</span>, y=<span class="number">22</span>)             <span class="comment"># instantiate with positional args or keywords</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p[<span class="number">0</span>] + p[<span class="number">1</span>]                     <span class="comment"># indexable like a plain tuple</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = p                        <span class="comment"># unpack like a regular tuple</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y</span><br><span class="line">(<span class="number">11</span>, <span class="number">22</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x + p.y                       <span class="comment"># fields also accessible by name</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = p._asdict()                 <span class="comment"># convert to a dictionary</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;x&#x27;</span>]</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point(**d)                      <span class="comment"># convert from a dictionary</span></span><br><span class="line">Point(x=<span class="number">11</span>, y=<span class="number">22</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p._replace(x=<span class="number">100</span>)               <span class="comment"># _replace() is like str.replace() but targets named fields</span></span><br><span class="line">Point(x=<span class="number">100</span>, y=<span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p>访问信息的方法：</p>
<ol>
<li>var[i]</li>
<li>var[‘key’]</li>
<li>var.key</li>
</ol>
<p>具名元组的属性和方法：</p>
<ol>
<li>_fields 属性是一个包含这个类所有字段名称的元组</li>
<li>_make() 接受一个可迭代对象生成类的实例</li>
<li>_asdict() 返回信息</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>People = namedtuple(<span class="string">&#x27;People&#x27;</span>,<span class="string">&#x27;name age&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>People._fields</span><br><span class="line">(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Dinan = (<span class="string">&#x27;SYD&#x27;</span>,<span class="number">22</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dinan = People._make(Dinan)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dinan</span><br><span class="line">People(name=<span class="string">&#x27;SYD&#x27;</span>, age=<span class="number">22</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dinan._asdict()</span><br><span class="line">OrderedDict([(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;SYD&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">22</span>)])</span><br></pre></td></tr></table></figure>

<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>a:b:c 这种用法只能作为索引或者下标用在 [] 中来返回一个切片对象 slice(a,b,c)<br>对 seq[start:stop:step] 进行求值时，python 会调用 seq.__getitem__(slice(start, stop, step))</p>
<p>切片也可以命名：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">&#x27;Can you tell me how much the shirt is? it is 9.15&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>asking = <span class="built_in">slice</span>(<span class="number">0</span>,<span class="number">37</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[asking]</span><br><span class="line"><span class="string">&#x27;Can you tell me how much the shirt is&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>anwser = <span class="built_in">slice</span>(<span class="number">39</span>,<span class="built_in">len</span>(string))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[anwser]</span><br><span class="line"><span class="string">&#x27;it is 9.15&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>asking, anwser</span><br><span class="line">(<span class="built_in">slice</span>(<span class="number">0</span>, <span class="number">37</span>, <span class="literal">None</span>), <span class="built_in">slice</span>(<span class="number">39</span>, <span class="number">49</span>, <span class="literal">None</span>))</span><br></pre></td></tr></table></figure>

<p>切片也可赋值</p>
<h2 id="对序列使用-和"><a href="#对序列使用-和" class="headerlink" title="(((对序列使用+ 和 *"></a>(((对序列使用+ 和 *</h2><p>注意FP ** 第八章**, 可变对象背后的原理和陷阱</p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>暂不需要，对应FP 2.7 2.8 </p>
<h2 id="一些其他的序列结构"><a href="#一些其他的序列结构" class="headerlink" title="一些其他的序列结构"></a>一些其他的序列结构</h2><ul>
<li><p>数组<br>如果需要一个只包含数字的列表，array.array 比 list 更高效</p>
</li>
<li><p>内存视图(memoryview)</p>
</li>
<li><p>NumPy and SciPy</p>
</li>
<li><p>双向队列(deque)</p>
</li>
</ul>
<hr>
<h1 id="第三章-字典和集合"><a href="#第三章-字典和集合" class="headerlink" title="第三章 字典和集合"></a>第三章 字典和集合</h1><p>在python官方术语对照表中：<br>字典是一个关联数组，其中的任意键都映射到相应的值。键可以是任何具有 __hash__() 和 __eq__() 方法的对象。</p>
<h2 id="散列（哈希）"><a href="#散列（哈希）" class="headerlink" title="散列（哈希）"></a>散列（哈希）</h2><p>Hash算法可以将一个数据转换为一个标志，这个标志和源数据的每一个字节都有十分紧密的关系。Hash算法还具有一个特点，就是很难找到逆向规律。</p>
<p>Python 标准库里所有的映射类型都是用 dict 实现的，因此有个共同限制：只有可散列的数据类型才能用作这些映射里的键。</p>
<h3 id="何为可散列的数据类型？"><a href="#何为可散列的数据类型？" class="headerlink" title="(((何为可散列的数据类型？"></a>(((何为可散列的数据类型？</h3><h2 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">dict</span>(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">dict</span>(<span class="built_in">zip</span>([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = <span class="built_in">dict</span>([(<span class="string">&#x27;two&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;one&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;three&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = <span class="built_in">dict</span>(&#123;<span class="string">&#x27;three&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;one&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;two&#x27;</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b == c == d == e</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<h3 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;key:value <span class="keyword">for</span> key,value <span class="keyword">in</span> <span class="built_in">dict</span>.items() <span class="keyword">if</span> condition&#125;</span><br></pre></td></tr></table></figure>

<h2 id="处理找不到的键"><a href="#处理找不到的键" class="headerlink" title="处理找不到的键"></a>处理找不到的键</h2><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>可以通过 my_dict.get(key) 来获取键对应的值，如果找不到这个键，python 也不会抛出异常</p>
<h3 id="setdefault"><a href="#setdefault" class="headerlink" title="setdefault"></a>setdefault</h3><p>修改键对应的值时，如果有这样的需求：</p>
<ol>
<li>每个键对应一个列表</li>
<li>键不存在时，创建这个键，对应的值为一个空列表，然后在列表上增加一个元素</li>
<li>键存在时，在对应的列表上增加一个元素</li>
</ol>
<p>这时不能直接通过<code>my_dict[key] = value</code>的方法赋值（键存在则覆盖它的值，不存在则创建）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 效果一样的两种方法</span></span><br><span class="line"><span class="comment"># 方法1（推荐）</span></span><br><span class="line">my_dict.setdefault(key, []).append(new_value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> my_dict:</span><br><span class="line">    my_dict[key] = []</span><br><span class="line">my_dict[key].append(new_value)</span><br></pre></td></tr></table></figure>

<h3 id="missing"><a href="#missing" class="headerlink" title="__missing__"></a>__missing__</h3><p>所有的映射类型在处理找不到的键的时候，都会牵扯到 __missing__ 方法，基类 dict 并没有定义这个方法。如果继承 dict 的类提供了 __missing__ 方法，那么在 __getitem__ 找不到键时，python会自动调用它，__missing__ 只会被 __getitem__ 调用 </p>
<p>另外：k in d 这个操作会调用 __contains__，如果在这个方法中使用 k in my_dict, 会导致 __contains__ 递归调用</p>
<h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">index = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line">index[word].append(value)</span><br></pre></td></tr></table></figure>

<p>作用：把 list 构造方法作为 default_factory 来创建一个 defaultdict. 如果 index 没有 word 键，会调用 default_factory, 返回值（空列表）赋给 index[word]</p>
<p>如果创建 defaultdict 时没有指定 default_factory，找不到键时会出发 KeyError</p>
<h2 id="字典的变种"><a href="#字典的变种" class="headerlink" title="字典的变种"></a>字典的变种</h2><ul>
<li>collections.defaultdict</li>
<li>collections.OrderdDict</li>
<li>collections.ChainMap</li>
<li>collections.Counter</li>
<li>collections.UserDict</li>
</ul>
<h3 id="继承-UserDict"><a href="#继承-UserDict" class="headerlink" title="继承 UserDict"></a>继承 UserDict</h3><p>创造自定义映射类型时，以 UserDict 为基类有一些好处。UserDict 并不是 dict 的子类，但 UserDict 中有一个叫做 data 的属性（最终存储数据的地方），是 dict 的实例。</p>
<p>分别用两种父类，把非字符串的键转换为字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrKeyDict0</span>(<span class="title class_ inherited__">dict</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__missing__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(key, <span class="built_in">str</span>)</span><br><span class="line">            <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">        <span class="keyword">return</span> self[<span class="built_in">str</span>(key)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key default=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.keys() <span class="keyword">or</span> <span class="built_in">str</span>(key) <span class="keyword">in</span> self.keys()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StrKeyDcit</span>(collections.UserDict):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__missing__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(key, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">        <span class="keyword">return</span> self[<span class="built_in">str</span>(key)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__contains__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(key) <span class="keyword">in</span> self.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, key, item</span>):</span><br><span class="line">        self.data[<span class="built_in">str</span>(key)] = item</span><br></pre></td></tr></table></figure>

<h2 id="抽象基类提供的方法"><a href="#抽象基类提供的方法" class="headerlink" title="抽象基类提供的方法"></a>抽象基类提供的方法</h2><ul>
<li>MutableMapping.update</li>
<li>Mapping.get</li>
</ul>
<h2 id="不可变映射类型"><a href="#不可变映射类型" class="headerlink" title="不可变映射类型"></a>不可变映射类型</h2><p>标准库里所有的映射类型都是可变的，python3.3 开始，type 模块中引入了一个封装类名 MappingProxyType<br>如果给这个类一个映射，会返回一个只读的映射视图。它是动态的，原映射做出改变时，视图也会跟着改变；但不能通过视图改变原映射。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MappingProxyType</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_dict = &#123;<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;A&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_dict</span><br><span class="line">&#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;A&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_proxy = MappingProxyType(my_dict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_proxy</span><br><span class="line">mappingproxy(&#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;A&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_proxy[<span class="string">&#x27;1&#x27;</span>] = <span class="number">10</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;mappingproxy&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_proxy[<span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_dict[<span class="string">&#x27;1&#x27;</span>] = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_proxy</span><br><span class="line">mappingproxy(&#123;<span class="string">&#x27;1&#x27;</span>: <span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>暂不需要，对应FP 3.8</p>
<hr>
<h1 id="第四章-函数"><a href="#第四章-函数" class="headerlink" title="第四章 函数"></a>第四章 函数</h1><p>python中，函数也可看做一个对象，函数对象本身就是 function 类的实例。</p>
<h2 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h2><p>除了用户定义的函数，调用运算符（即()）还可应用到其他对象上，可以使用内置的 <code>callable()</code> 函数判断。python 数据模型文档列出了 7 种可调用的对象</p>
<ol>
<li>用户定义的函数：使用 def 或 lambda 表达式创建</li>
<li>内置函数：使用 C 语言实现的函数，如 <code>len</code>, <code>time.strftime</code></li>
<li>内置方法：使用 C 语言实现的方法，如 <code>dict.get</code></li>
<li>方法：在类的定义体中定义的函数</li>
<li>类：调用类时， 先运行<code>__new__</code>方法创建一个实例，然后用<code>__init__</code>方法初始化实例。</li>
<li>类的实例：如果类定义了<code>__call__</code>方法</li>
<li>生成器函数：使用 yield 关键字的函数或方法。</li>
</ol>
<h2 id="共享传参"><a href="#共享传参" class="headerlink" title="共享传参"></a>共享传参</h2><p>Python中，函数内部的形参是实参的别名。可变类型作为参数时，可能会被函数内部改动</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a,b</span>):</span><br><span class="line"><span class="meta">... </span>    a += b</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> a</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(x,y)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(a,b)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b</span><br><span class="line">([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = (<span class="number">3</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(a,b)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b</span><br><span class="line">((<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>,))</span><br></pre></td></tr></table></figure>

<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>python中，只有在函数内的变量才是局部变量，其他都是全局变量。要访问外层的变量，可以使用 global 和 nonlocal 关键字，应放在函数最开头。</p>
<table>
<thead>
<tr>
<th></th>
<th>无关键字</th>
<th>global</th>
<th>nonlocal</th>
<th>找不到变量</th>
</tr>
</thead>
<tbody><tr>
<td><strong>读取</strong></td>
<td>由内向外寻找</td>
<td>寻找全局变量</td>
<td>由内向外寻找，到最后一层函数为止</td>
<td>报错</td>
</tr>
<tr>
<td><strong>修改</strong></td>
<td>内部寻找</td>
<td>寻找全局变量</td>
<td>由内向外寻找，到最后一层函数为止</td>
<td>在修改位置创建</td>
</tr>
</tbody></table>
<h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><p>函数内部想要修改全局变量，需要使用 global 关键字，如果使用在一级函数内使用 nonlocal, CPython会报错</p>
<ol>
<li>要在函数中使用全局变量，如果只是读取而不做修改，可以不使用 global 关键字</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g_name = <span class="string">&quot;global&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Greet</span>():</span><br><span class="line">    <span class="built_in">print</span>(g_name)</span><br><span class="line">Greet()</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># global</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果要修改全局变量，需要添加 global 关键字，否则会创建局部变量。<br>修改全局变量的正确用法：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g_name = <span class="string">&quot;global&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Greet</span>():</span><br><span class="line">    <span class="keyword">global</span> g_name</span><br><span class="line">    g_name = <span class="string">&quot;from global&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(g_name)</span><br><span class="line">Greet()</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># from global</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如果想先读取全局变量（不使用 global 关键字），再创建局部变量，例如：</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g_name = <span class="string">&quot;global&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Greet</span>():</span><br><span class="line">    <span class="comment">#global g_name</span></span><br><span class="line">    <span class="built_in">print</span>(g_name)</span><br><span class="line">    g_name = <span class="string">&quot;in funciton&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CPython报错：</span></span><br><span class="line"><span class="comment"># UnboundLocalError: local variable &#x27;g_name&#x27; referenced before assignment</span></span><br></pre></td></tr></table></figure>

<h3 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h3><p>函数嵌套定义时，内部函数想要修改外部函数的变量，需要使用 nonlocal关键字，其大致与 global 使用方法相同。<br>在内部函数中，如果没用 nonlocal, 用的是 global, 则会从全局变量中寻找</p>
<p>测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Greet</span>():</span><br><span class="line">    hi = <span class="string">&quot;hi&quot;</span></span><br><span class="line">    hello = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    keep = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">One</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> hi</span><br><span class="line">        hi = <span class="number">1</span></span><br><span class="line">        hello = <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;in One:  &quot;</span>,hi,hello,keep)</span><br><span class="line"></span><br><span class="line">    One()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;in Greet:&quot;</span>, hi,hello,keep)</span><br><span class="line">    <span class="keyword">return</span> One</span><br><span class="line"></span><br><span class="line">Greet()</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">in One:   1 1 True</span><br><span class="line">in Greet: 1 hello True</span><br></pre></td></tr></table></figure>

<h3 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h3><p>嵌套函数的内部函数有其生命周期，在其外部函数的内才可以调用</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">A</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">B</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">C</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">    B()</span><br><span class="line">    C()  <span class="comment"># NameError: name &#x27;C&#x27; is not defined</span></span><br><span class="line">A()</span><br></pre></td></tr></table></figure>

<h3 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包 (closure)"></a>闭包 (closure)</h3><blockquote>
<p>Fluent Python: a closure is function with an extended scope that encompasses non-global variables referenced in the body of the function but not defined there</p>
</blockquote>
<p>闭包是指延伸了作用域的函数，其中包含：在函数定义体中的引用、但是不在定义体中定义的非全局变量</p>
<p>闭包是在<strong>作用域外部</strong>能够访问<strong>作用域内部</strong>的函数</p>
<p>online python tutor:<br><img src="/./python-language/pyclosure.png" alt="avatar"></p>
<p>可以看到虽然 outer() 函数已经运行结束，outer 内部的变量 x,y,fake_static,inner 在 inner() 内引用了，这些局部变量没有被销毁，而被保留了下来(可视化图中的 f1:outer)，在调用 inner() 时能够间接地访问这些值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看函数可用的变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>():</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    y = <span class="number">1.5</span></span><br><span class="line">    fake_static = <span class="number">0</span></span><br><span class="line">    name = <span class="string">&quot;outer&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> x, fake_static</span><br><span class="line">        tt = <span class="string">&quot;mytt&quot;</span></span><br><span class="line">        x += <span class="number">1</span></span><br><span class="line">        fake_static += <span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;inner():&quot;</span>,<span class="string">&quot;x y&quot;</span>, x, y, tt)</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">            inner()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">counter = outer()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter.__code__.co_freevars)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> counter.__closure__:</span><br><span class="line">    <span class="built_in">print</span>(i.cell_contents)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">(&#x27;fake_static&#x27;, &#x27;inner&#x27;, &#x27;x&#x27;, &#x27;y&#x27;)</span><br><span class="line">0</span><br><span class="line">&lt;function outer.&lt;locals&gt;.inner at 0x7f1384fc16a8&gt;</span><br><span class="line">0</span><br><span class="line">1.5</span><br></pre></td></tr></table></figure>

<p><strong>闭包的作用</strong></p>
<ol>
<li><p>在上例中，以 fake_static 为例。使用 inner() 可以修改 fake_static 的值，而fake_static 又不是全局变量，相对比较安全，不会被其他函数修改。类似 C语言中函数内的 static 变量，全局存在，但仅能在函数内修改。</p>
</li>
<li><p>实现一个简单的“类”，外层函数的变量视作属性，内层函数视作方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">OddClass</span>(<span class="params">number</span>):</span><br><span class="line"> _attribute = number</span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">SetAttribute</span>(<span class="params">num</span>):</span><br><span class="line">     <span class="keyword">nonlocal</span> _attribute</span><br><span class="line">     _attribute = num</span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">GetAttribute</span>():</span><br><span class="line">     <span class="keyword">return</span> _attribute</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> SetAttribute, GetAttribute</span><br></pre></td></tr></table></figure></li>
</ol>
<p>set_odd, get_odd &#x3D; OddClass(100)</p>
<p>print(get_odd())<br>set_odd(10.5)<br>print(get_odd())</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出：</span><br><span class="line">```text</span><br><span class="line">100</span><br><span class="line">10.5</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>用于装饰器</li>
</ol>
<h2 id="args-kargs"><a href="#args-kargs" class="headerlink" title="*args, **kargs"></a>*args, **kargs</h2><p>*args 可以把多个无名参数打包成一个tuple<br>**kargs 可以把多个关键字参数打包成一个dict<br>使用时可不全写，但要确保顺序正确： <code>function(arg_a,arg_b,..., *args, **kargs)</code></p>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">a, b, c, *args, **kargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=====type=====&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(a),<span class="built_in">type</span>(b),<span class="built_in">type</span>(c))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(args))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(kargs))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;=====type=====\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;args:&quot;</span>, args)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nkargs:&quot;</span>, kargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;len(args) =&quot;</span>, <span class="built_in">len</span>(args))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(args)):</span><br><span class="line">        <span class="built_in">print</span>(args[i])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;len(kargs) =&quot;</span>, <span class="built_in">len</span>(kargs))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> kargs:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;kargs.get(\&quot;day\&quot;) =&quot;</span>, kargs.get(<span class="string">&quot;day&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;kargs.get(\&quot;time\&quot;) =&quot;</span>, kargs.get(<span class="string">&quot;time&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, <span class="number">10</span>,<span class="number">27</span>,<span class="string">&quot;how to say&quot;</span>, qifei=<span class="number">1</span>,zhuiji=<span class="literal">False</span>,time=<span class="string">&quot;2021.5.31&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">=====type=====</span><br><span class="line">&lt;class &#x27;int&#x27;&gt; &lt;class &#x27;int&#x27;&gt; &lt;class &#x27;int&#x27;&gt;</span><br><span class="line">&lt;class &#x27;tuple&#x27;&gt;</span><br><span class="line">&lt;class &#x27;dict&#x27;&gt;</span><br><span class="line">=====type=====</span><br><span class="line"></span><br><span class="line">args: (10, 27, &#x27;how to say&#x27;)</span><br><span class="line"></span><br><span class="line">kargs: &#123;&#x27;qifei&#x27;: 1, &#x27;zhuiji&#x27;: False, &#x27;time&#x27;: &#x27;2021.5.31&#x27;&#125;</span><br><span class="line">----------</span><br><span class="line">len(args) = 3</span><br><span class="line">10</span><br><span class="line">27</span><br><span class="line">how to say</span><br><span class="line">----------</span><br><span class="line">len(kargs) = 3</span><br><span class="line">qifei</span><br><span class="line">zhuiji</span><br><span class="line">time</span><br><span class="line">----------</span><br><span class="line">kargs.get(&quot;day&quot;) = None</span><br><span class="line">kargs.get(&quot;time&quot;) = 2021.5.31</span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">clip</span>(<span class="params">text:<span class="built_in">str</span>, max_len:<span class="string">&#x27;int &gt; 0&#x27;</span>=<span class="number">80</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;a function&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>Python 对注解做的唯一事情是把他们存储在函数的<code>__annotations__</code>属性里<br>只有<code>inspect.signature()</code>函数知道怎么提取注解</p>
<hr>
<h1 id="第五章-装饰器"><a href="#第五章-装饰器" class="headerlink" title="第五章 装饰器"></a>第五章 装饰器</h1><p>装饰器是可调用的对象，在被装饰函数定义之后立即运行（语法糖）</p>
<h2 id="装饰器不传参（两层）"><a href="#装饰器不传参（两层）" class="headerlink" title="装饰器不传参（两层）"></a>装饰器不传参（两层）</h2><h3 id="装饰器定义"><a href="#装饰器定义" class="headerlink" title="装饰器定义"></a>装饰器定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line"></span><br><span class="line"><span class="comment">#装饰器不传参，只用写两层</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TimerDecorator</span>(<span class="params">Func</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ImprovedFunction</span>(<span class="params">*args, **kargs</span>): <span class="comment">#增强后的函数</span></span><br><span class="line">        start_time = time.clock()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;wrapper_head is here&gt;, start_time is %f&quot;</span> %start_time)</span><br><span class="line"></span><br><span class="line">        ret = Func(*args, **kargs) <span class="comment">#原始函数</span></span><br><span class="line"></span><br><span class="line">        end_time = time.clock()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;wrapper_tail is here&gt;, end_time is %f&quot;</span> %end_time)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&lt;cost in time&gt;: &quot;</span>, end_time - start_time)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ImprovedFunction</span><br></pre></td></tr></table></figure>

<h3 id="不使用语法糖的用法"><a href="#不使用语法糖的用法" class="headerlink" title="不使用语法糖的用法"></a>不使用语法糖的用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#原始函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EvenCounter</span>(<span class="params"></span></span><br><span class="line"><span class="params">        min_num: <span class="built_in">int</span> = <span class="number">0</span>,</span></span><br><span class="line"><span class="params">        max_num: <span class="built_in">int</span> = <span class="number">10</span>**<span class="number">6</span>,</span></span><br><span class="line"><span class="params">        </span>):</span><br><span class="line"></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_num, max_num):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; this is OriginalFunction, count is %d&quot;</span> %count)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="comment">#不用语法糖，调用TimerDecorator来增强原始的EvenCounter</span></span><br><span class="line">Function = TimerDecorator(EvenCounter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"></span><br><span class="line">num = Function(max_num = <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nCalled ImprovedFunction&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;return num is &quot;</span>, num)</span><br></pre></td></tr></table></figure>

<h3 id="使用语法糖"><a href="#使用语法糖" class="headerlink" title="使用语法糖"></a>使用语法糖</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原始函数</span></span><br><span class="line"><span class="comment"># 添加@xxx</span></span><br><span class="line"><span class="meta">@TimerDecorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EvenCounter</span>(<span class="params"></span></span><br><span class="line"><span class="params">        min_num: <span class="built_in">int</span> = <span class="number">0</span>,</span></span><br><span class="line"><span class="params">        max_num: <span class="built_in">int</span> = <span class="number">10</span>**<span class="number">6</span>,</span></span><br><span class="line"><span class="params">        </span>):</span><br><span class="line"></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_num, max_num):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; this is OriginalFunction, count is %d&quot;</span> %count)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接用原始函数的名字就行 </span></span><br><span class="line">num = EvenCounter(max_num = <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nCalled ImprovedFunction&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;return num is &quot;</span>, num)</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>两种使用方法效果一样, 终端输出如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;wrapper_head is here&gt;, start_time is 0.022420</span><br><span class="line"> this is OriginalFunction, count is 5</span><br><span class="line">&lt;wrapper_tail is here&gt;, end_time is 0.022449</span><br><span class="line">&lt;cost in time&gt;:  2.9000000000001247e-05</span><br><span class="line"></span><br><span class="line">Called ImprovedFunction</span><br><span class="line">return num is  5</span><br></pre></td></tr></table></figure>

<h2 id="装饰器传参（三层）"><a href="#装饰器传参（三层）" class="headerlink" title="装饰器传参（三层）"></a>装饰器传参（三层）</h2><h3 id="装饰器定义-1"><a href="#装饰器定义-1" class="headerlink" title="装饰器定义"></a>装饰器定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不用语法糖，可以只写两层</span></span><br><span class="line"><span class="comment"># 用语法糖，写三层</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LogDecorator</span>(<span class="params"></span></span><br><span class="line"><span class="params">        text: <span class="built_in">str</span> = <span class="string">&quot;LOG&quot;</span>,</span></span><br><span class="line"><span class="params">        num: <span class="built_in">int</span> = <span class="number">1</span>,</span></span><br><span class="line"><span class="params">        </span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num):</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Decorator</span>(<span class="params">Func</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">ImprovedFunction</span>(<span class="params">*args, **kargs</span>): <span class="comment">#增强后的函数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;in ImprovedFunction&quot;</span>, text)</span><br><span class="line">            start_time = time.clock()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&lt;wrapper_head is here&gt;, start_time is %f&quot;</span> %start_time)</span><br><span class="line"></span><br><span class="line">            ret = Func(*args, **kargs) <span class="comment">#原始函数</span></span><br><span class="line"></span><br><span class="line">            end_time = time.clock()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&lt;wrapper_tail is here&gt;, end_time is %f&quot;</span> %end_time)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&lt;cost in time&gt;: &quot;</span>, end_time - start_time)</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ImprovedFunction</span><br><span class="line">    <span class="keyword">return</span> Decorator</span><br></pre></td></tr></table></figure>

<h3 id="不使用语法糖的用法-1"><a href="#不使用语法糖的用法-1" class="headerlink" title="不使用语法糖的用法"></a>不使用语法糖的用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">OddCounter</span>(<span class="params"></span></span><br><span class="line"><span class="params">        min_num: <span class="built_in">int</span> = <span class="number">0</span>,</span></span><br><span class="line"><span class="params">        max_num: <span class="built_in">int</span> = <span class="number">10</span>**<span class="number">5</span>,</span></span><br><span class="line"><span class="params">        </span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_num, max_num):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; this is OriginalFunction, count is %d&quot;</span> %count)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="comment">#不用语法糖</span></span><br><span class="line">Function = (LogDecorator(<span class="string">&quot;2021.5.30&quot;</span>, <span class="number">2</span>))(OddCounter)</span><br><span class="line">Function()</span><br></pre></td></tr></table></figure>

<h3 id="使用语法糖-1"><a href="#使用语法糖-1" class="headerlink" title="使用语法糖"></a>使用语法糖</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@LogDecorator(<span class="params">text=<span class="string">&quot;2021.5.30&quot;</span>,num=<span class="number">2</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">OddCounter</span>(<span class="params"></span></span><br><span class="line"><span class="params">        min_num: <span class="built_in">int</span> = <span class="number">0</span>,</span></span><br><span class="line"><span class="params">        max_num: <span class="built_in">int</span> = <span class="number">10</span>**<span class="number">5</span>,</span></span><br><span class="line"><span class="params">        </span>):</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(min_num, max_num):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot; this is OriginalFunction, count is %d&quot;</span> %count)</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同理，直接使用原函数名</span></span><br><span class="line">OddCounter()</span><br></pre></td></tr></table></figure>

<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>两种使用方法效果一样, 终端输出如下:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">2021.5.30</span><br><span class="line">2021.5.30</span><br><span class="line">in ImprovedFunction 2021.5.30</span><br><span class="line">&lt;wrapper_head is here&gt;, start_time is 0.023687</span><br><span class="line"> this is OriginalFunction, count is 50000</span><br><span class="line">&lt;wrapper_tail is here&gt;, end_time is 0.028648</span><br><span class="line">&lt;cost in time&gt;:  0.004961</span><br></pre></td></tr></table></figure>

<h2 id="内置装饰器"><a href="#内置装饰器" class="headerlink" title="内置装饰器"></a>内置装饰器</h2><h3 id="functools"><a href="#functools" class="headerlink" title="functools"></a>functools</h3><h4 id="wraps"><a href="#wraps" class="headerlink" title="wraps"></a>wraps</h4><p>@functools.wraps：增强后函数遮盖了被装饰函数的 __name__ 和 __doc__, 这个装饰器把相关属性从被装饰函数复制到增强后函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Deco</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># @functools.wraps(func)  去掉注释后，输出为 &#x27;MyPrint&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ImporvedFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Improving...&quot;</span>)</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> ImporvedFunction</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deco</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyPrint</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;MyPrint is running&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(MyPrint.__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># ImporvedFunction</span></span><br></pre></td></tr></table></figure>

<h4 id="lru-cache"><a href="#lru-cache" class="headerlink" title="lru_cache"></a>lru_cache</h4><p>@functools.lru_cache(maxsize&#x3D;128, typed&#x3D;False)：把耗时的函数结果保存起来，避免传入相同的参数时重复计算<br>maxsize: 指定存出多少个调用的结果，为了得到最佳性能，maxsize 应设为 2 的幂<br>typed: 如果为 True, 把不同参数类型得到的结果分开保存，比如 1(int) 和 1.0(float) 分开保存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 使用递归================================================================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n-<span class="number">1</span>) + Fibonacci(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time = time.clock()</span><br><span class="line"><span class="built_in">print</span>(Fibonacci(<span class="number">30</span>))</span><br><span class="line">end_time = time.clock()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[recursion time]&quot;</span>, end_time - start_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用循环 + 数组=========================================================</span></span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LoopFibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    fibo = array(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">    fibo.append(<span class="number">0</span>)</span><br><span class="line">    fibo.append(<span class="number">1</span>)</span><br><span class="line">    index = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> index &lt;= n:</span><br><span class="line">        fibo.append(fibo[index-<span class="number">1</span>] + fibo[index-<span class="number">2</span>])</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fibo[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">start_time = time.clock()</span><br><span class="line"><span class="built_in">print</span>(LoopFibonacci(<span class="number">30</span>))</span><br><span class="line">end_time = time.clock()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[loop time]&quot;</span>, end_time - start_time)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器 + 递归=======================================================</span></span><br><span class="line"><span class="meta">@functools.lru_cache()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DecoFibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> DecoFibonacci(n-<span class="number">1</span>) + DecoFibonacci(n-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start_time = time.clock()</span><br><span class="line"><span class="built_in">print</span>(DecoFibonacci(<span class="number">30</span>))</span><br><span class="line">end_time = time.clock()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[lru_cache + recursion time]&quot;</span>, end_time - start_time)</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">832040</span><br><span class="line">[recursion time] 0.173533</span><br><span class="line">832040</span><br><span class="line">[loop time] 1.7000000000017e-05</span><br><span class="line">832040</span><br><span class="line">[lru_cache + recursion time] 1.4999999999987246e-05</span><br></pre></td></tr></table></figure>

<h4 id="singledispatch"><a href="#singledispatch" class="headerlink" title="singledispatch"></a>singledispatch</h4><p>@functools.singledispatch：把整体方案拆分成多个模块，使用 @singledispatch 装饰的普通函数会变成泛函数 (generic function)：根据第一个参数的类型，以不同方式执行相同操作的一组函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch</span><br><span class="line"></span><br><span class="line"><span class="meta">@singledispatch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyPrint</span>(<span class="params">obj</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;MyPrint&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyPrint.register(<span class="params"><span class="built_in">str</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">text</span>):        <span class="comment"># 其名称无关紧要</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;In register-str&quot;</span>,text)</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyPrint.register(<span class="params"><span class="built_in">tuple</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">seq</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;In register-tuple&quot;</span>,seq)</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyPrint.register(<span class="params"><span class="built_in">int</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;In register-int&quot;</span>,num)</span><br><span class="line"></span><br><span class="line">MyPrint(<span class="number">1</span>)</span><br><span class="line">MyPrint((<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">MyPrint(<span class="string">&quot;dinanwang&quot;</span>)</span><br><span class="line">MyPrint([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">MyPrint(<span class="number">1.4</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">In register-int 1</span><br><span class="line">In register-tuple (1, 2)</span><br><span class="line">In register-str dinanwang</span><br><span class="line">MyPrint</span><br><span class="line">MyPrint</span><br></pre></td></tr></table></figure>

<h3 id="用于装饰方法的函数"><a href="#用于装饰方法的函数" class="headerlink" title="用于装饰方法的函数"></a>用于装饰方法的函数</h3><p>@property @classmethod @staticmethod</p>
<p>先定义一个 Circle 类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">            self, </span></span><br><span class="line"><span class="params">            r: <span class="built_in">float</span>=<span class="number">1.0</span>,</span></span><br><span class="line"><span class="params">            color: <span class="built_in">str</span>=<span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="params">            </span>):</span><br><span class="line">        self._r = r        </span><br><span class="line">        self._color = color</span><br></pre></td></tr></table></figure>

<h4 id="property"><a href="#property" class="headerlink" title="property"></a>property</h4><p>@property 一些特点：</p>
<ol>
<li>用在类上，能把一个类的方法变成类的属性</li>
<li>用了@property，就不能再当函数调用，只能当做属性</li>
<li>第一个参数是仍然是self</li>
<li>如果无返回值，就是none</li>
<li>实际上偷偷运行了函数，所以能自动更新某些内容</li>
</ol>
<p>有两种方法使用这个特性, 在Circle类内，分别对 r 和 color 使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 1. 分别用三次装饰器</span></span><br><span class="line"><span class="comment"># 方法和属性不能重名</span></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self._r</span><br><span class="line"></span><br><span class="line"><span class="meta">@r.setter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">self, value</span>):</span><br><span class="line">    self._r = value</span><br><span class="line"></span><br><span class="line"><span class="meta">@r.deleter</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">del</span> self._r</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2. 合体</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GetColor</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> self._color</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SetColor</span>(<span class="params">self, color</span>):</span><br><span class="line">    self._color = color</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DelColor</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">del</span> self._color </span><br><span class="line"></span><br><span class="line">color = <span class="built_in">property</span>(GetColor, SetColor, DelColor)</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ins.r =&quot;</span>, ins.r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ins.S =&quot;</span>, ins.S)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let ins.r = 1.5&quot;</span>)</span><br><span class="line">ins.r = <span class="number">1.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ins.r =&quot;</span>, ins.r)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ins.S =&quot;</span>, ins.S)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ins.r = 10</span><br><span class="line">ins.S = 314.1592653589793</span><br><span class="line">Let ins.r = 1.5</span><br><span class="line">ins.r = 1.5</span><br><span class="line">ins.S = 7.0685834705770345</span><br></pre></td></tr></table></figure>

<h4 id="staticmethod-和-classmethod"><a href="#staticmethod-和-classmethod" class="headerlink" title="staticmethod 和 classmethod"></a>staticmethod 和 classmethod</h4><table>
<thead>
<tr>
<th></th>
<th>instance method</th>
<th>@classmethod</th>
<th>@staticmethod</th>
</tr>
</thead>
<tbody><tr>
<td><strong>instance_name.method</strong></td>
<td>yes</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td><strong>class_name.method</strong></td>
<td>no</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td><strong>first parameter</strong></td>
<td>self(instance)</td>
<td>self(class)</td>
<td>any(no self)</td>
</tr>
</tbody></table>
<p>在Circle类内定义这几种方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实例方法（instance method）</span></span><br><span class="line"><span class="comment"># 只能通过实例调用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CalC</span>(<span class="params">self</span>):</span><br><span class="line">    c = <span class="number">2</span> * math.pi * self._r</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c is &quot;</span>, c, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态方法（static method）</span></span><br><span class="line"><span class="comment"># 和用普通函数没什么两样，只是调用时要用类名或实例名</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SPrint</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;staticmethod: %s\n&quot;</span> %text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法（class method）</span></span><br><span class="line"><span class="comment"># 需要传入类名，可判断是父类还是子类调用的</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CPrint</span>(<span class="params">cls, text</span>):</span><br><span class="line">    <span class="built_in">print</span>(cls, <span class="string">&quot;classmethod: %s\n&quot;</span> %text)</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ins = Circle(<span class="number">10</span>,<span class="string">&quot;white&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># instance method</span></span><br><span class="line">ins.CalC()</span><br><span class="line"><span class="comment"># class method</span></span><br><span class="line">Circle.CPrint(<span class="string">&quot;circle call cprint&quot;</span>)</span><br><span class="line">ins.CPrint(<span class="string">&quot;ins call cprint&quot;</span>)</span><br><span class="line"><span class="comment"># static method</span></span><br><span class="line">Circle.SPrint(<span class="string">&quot;circle call sprint&quot;</span>)</span><br><span class="line">ins.SPrint(<span class="string">&quot;ins call sprint&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">c is  62.83185307179586</span><br><span class="line"></span><br><span class="line">&lt;class &#x27;__main__.Circle&#x27;&gt; classmethod: circle call cprint</span><br><span class="line"></span><br><span class="line">&lt;class &#x27;__main__.Circle&#x27;&gt; classmethod: ins call cprint</span><br><span class="line"></span><br><span class="line">staticmethod: circle call sprint</span><br><span class="line"></span><br><span class="line">staticmethod: ins call sprint</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="备忘"><a href="#备忘" class="headerlink" title="备忘"></a>备忘</h1><p>module package import</p>
<p>super<br>tensor or Tensor</p>
<p>python静态变量</p>
<p>子类扩展父类方法（不仅仅是重写）<br>内置函数，内置属性<br>特殊函数<br>特殊属性<br>isintance, issubclass, type</p>
<p>plt使用<br>zip<br>enumerate<br>for i, (ax, img) in enumerate(zip(axes, imgs)):<br>反向传播 链式求导过程<br><strong>slot</strong> 动态扩展<br>python3 -m ipdb xxx.py</p>
<h1 id="pyi，模块，多文件变成"><a href="#pyi，模块，多文件变成" class="headerlink" title="pyi，模块，多文件变成"></a>pyi，模块，多文件变成</h1><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用collections模块</span></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">card = collections.namedtuple(<span class="string">&quot;card&quot;</span>, [<span class="string">&quot;rank&quot;</span>, <span class="string">&quot;suit&quot;</span>])</span><br><span class="line"><span class="comment"># 可以这样创建一个只有少数属性而无方法的类</span></span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>python支持多继承，</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h2 id="特殊方法（方法前后有双下划线）"><a href="#特殊方法（方法前后有双下划线）" class="headerlink" title="特殊方法（方法前后有双下划线）"></a>特殊方法（方法前后有双下划线）</h2><p>雷属性，实例属性</p>
]]></content>
      <categories>
        <category>language</category>
      </categories>
      <tags>
        <tag>language</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>无线电信号检测识别的两篇综述</title>
    <url>/2022/07/24/signal-recognition/modulation-recognition-survey/</url>
    <content><![CDATA[<p><img src="/./modulation-recognition-survey/ieee.png" alt="ieeetransactions..."><br><img src="/./modulation-recognition-survey/ieeeaccess.png" alt="ieeeaccess"></p>
<h2 id="识别过程"><a href="#识别过程" class="headerlink" title="识别过程"></a>识别过程</h2><p><img src="/./modulation-recognition-survey/AMRmethod.png" alt="AMRmethod"></p>
<h2 id="信号的表示方法"><a href="#信号的表示方法" class="headerlink" title="信号的表示方法"></a>信号的表示方法</h2><h3 id="I-特征表示"><a href="#I-特征表示" class="headerlink" title="I 特征表示"></a>I 特征表示</h3><p>特征表示最初是为调制分类的FB(feature-based)算法开发的。它提取多个特征来表示接收到的信号(提取特征的数量通常小于接收信号的长度)。</p>
<p>优点：</p>
<ul>
<li>通过特征表示对接收到的信号进行压缩，这允许利用具有更少神经元&#x2F;层的简单DNN</li>
</ul>
<p>缺点：</p>
<ul>
<li>信号特征的计算会产生额外的计算复杂性</li>
<li>需要根据候选调制集选择适当的特征，这需要大量的专业知识和经验</li>
<li>在将原始信号转换为特征时，可能会丢失一些关键信息，从而影响调制分类的性能。</li>
</ul>
<h4 id="累积量特征-Cumulants-Features"><a href="#累积量特征-Cumulants-Features" class="headerlink" title="累积量特征 Cumulants Features"></a>累积量特征 Cumulants Features</h4><h4 id="频谱特征-Spectral-Features"><a href="#频谱特征-Spectral-Features" class="headerlink" title="频谱特征 Spectral Features"></a>频谱特征 Spectral Features</h4><h4 id="圆形特征-Circular-Features"><a href="#圆形特征-Circular-Features" class="headerlink" title="圆形特征 Circular Features"></a>圆形特征 Circular Features</h4><h3 id="II-图像表示"><a href="#II-图像表示" class="headerlink" title="II 图像表示"></a>II 图像表示</h3><p>图像表示的思想是将接收到的信号转换为图像，通过图像识别完成调制分类任务。现有的DNN和DL图像识别框架可以直接用于具有图像表示的调制分类。</p>
<p>优点：</p>
<ul>
<li>易于实现</li>
<li>受利于CV的发展</li>
<li>避免了手动提取特征</li>
</ul>
<p>缺点：</p>
<ul>
<li>成图像仍然需要一些计算</li>
<li>需要复杂的DNN来学习图像的特征。</li>
</ul>
<h4 id="星座图-Constellation-Diagram"><a href="#星座图-Constellation-Diagram" class="headerlink" title="星座图 Constellation Diagram"></a>星座图 Constellation Diagram</h4><p><img src="/./modulation-recognition-survey/constellation.png" alt="constellation"><br><img src="/./modulation-recognition-survey/constellation2.png" alt="constellation2"></p>
<h4 id="眼图-Eye-Diagram"><a href="#眼图-Eye-Diagram" class="headerlink" title="眼图 Eye Diagram"></a>眼图 Eye Diagram</h4><p>捕获的波形进行叠加得到眼图，可以反映信号的整体信息。</p>
<p><img src="/./modulation-recognition-survey/eye_diagrams.png" alt="eye_diagrams"></p>
<h4 id="特征点图-Feature-Poing-Image"><a href="#特征点图-Feature-Poing-Image" class="headerlink" title="特征点图 Feature Poing Image"></a>特征点图 Feature Poing Image</h4><p>由信号特征生成，比如 HOCs(高阶累积量), PAR（峰均比）等，通过公式转换，画在复平面上。</p>
<p><img src="/./modulation-recognition-survey/fpimages.png" alt="fpimages"></p>
<h4 id="模糊函数图-Ambiguity-Function-Image"><a href="#模糊函数图-Ambiguity-Function-Image" class="headerlink" title="模糊函数图 Ambiguity Function Image"></a>模糊函数图 Ambiguity Function Image</h4><p><img src="/./modulation-recognition-survey/af.png" alt="af"></p>
<p>y是接收到的连续信号，*代表共轭，$\omega$代表频率偏移，$\tau$ 代表时间延迟，不同的调制方式有不同的模糊函数图</p>
<p><img src="/./modulation-recognition-survey/afimages.png" alt="afimages"></p>
<h4 id="频谱相关函数图-Spectral-Correlation-Function-Image"><a href="#频谱相关函数图-Spectral-Correlation-Function-Image" class="headerlink" title="频谱相关函数图 Spectral Correlation Function Image"></a>频谱相关函数图 Spectral Correlation Function Image</h4><p>调制信号的周期特征由循环自相关函数(CAF)和谱相关函数(SCF)描述，SCF通过傅里叶变换从CAF导出，SCF是关于数字频率f和循环频率$\alpha$的二元函数，通过(29)导出SCF矩阵，取SCF矩阵的绝对值作为图像，就是SCF图。</p>
<p><img src="/./modulation-recognition-survey/caf.png" alt="caf"><br><img src="/./modulation-recognition-survey/scf.png" alt="scf"></p>
<p><img src="/./modulation-recognition-survey/scfimages.png" alt="scfimages"></p>
<h4 id="循环相关熵频谱图-Cyclic-Correntropy-Spectrum-Graph"><a href="#循环相关熵频谱图-Cyclic-Correntropy-Spectrum-Graph" class="headerlink" title="循环相关熵频谱图 Cyclic Correntropy Spectrum Graph"></a>循环相关熵频谱图 Cyclic Correntropy Spectrum Graph</h4><p><img src="/./modulation-recognition-survey/cces.png" alt="cces"></p>
<h4 id="双频谱图-Bispectrum-Graph"><a href="#双频谱图-Bispectrum-Graph" class="headerlink" title="双频谱图 Bispectrum Graph"></a>双频谱图 Bispectrum Graph</h4><p><img src="/./modulation-recognition-survey/asb.png" alt="asb"></p>
<h3 id="III-序列表示"><a href="#III-序列表示" class="headerlink" title="III 序列表示"></a>III 序列表示</h3><p>序列表示是一种直观的信号表示，因为信号是按顺序接收的。</p>
<p>优点：</p>
<ul>
<li>IQ序列、AP序列等序列可以很容易地导出，只需很少的计算。</li>
</ul>
<p>缺点：</p>
<ul>
<li>如果网络设计不当，训练过程可能很难收敛</li>
</ul>
<h4 id="IQ信号序列-In-Phase-and-Quadrature-Sequences"><a href="#IQ信号序列-In-Phase-and-Quadrature-Sequences" class="headerlink" title="IQ信号序列 In-Phase and Quadrature Sequences"></a>IQ信号序列 In-Phase and Quadrature Sequences</h4><ul>
<li>使用IQ信号样本进行分类 </li>
<li>IQ 表现了信号的幅值和相位变化。</li>
</ul>
<table>
<thead>
<tr>
<th>方法(2)</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>[41]access</td>
<td>在正交频分复用系统中消除相位偏移的影响<br>eliminating the bad effects of PO in uncooperative OFDM systems</td>
</tr>
<tr>
<td>[6]</td>
<td>从长符号率信号中提取特征，但是要求较高的信噪比</td>
</tr>
<tr>
<td>[42]access</td>
<td>多流结构，增加网络宽度，获取更有价值的特征</td>
</tr>
<tr>
<td>[43]access</td>
<td><strong>学习盲信道识别和AMR，使用两个CNN来弥补在同一信道上分类的缺陷</strong>，第一个用来识别是LOS还是NLOS，第二个用来分类</td>
</tr>
<tr>
<td>[44]</td>
<td>对CNN、RNN、inception模块和卷积长短期DNN（CLDNN）进行了比较研究</td>
</tr>
<tr>
<td>[45]</td>
<td>2CNNs &amp; dropout 代替 pooling, 提高分类精度</td>
</tr>
<tr>
<td>[46]access</td>
<td>CNN+LSTM</td>
</tr>
<tr>
<td>[47]access</td>
<td>消耗内存少，对信噪比的变化有更高的鲁棒性</td>
</tr>
<tr>
<td>[48]</td>
<td>试用于不同的噪声体系，计算复杂度较低，模型比较小，减少了计算时间，可接受的性能损失下减少了所需的设备存储器</td>
</tr>
<tr>
<td>[49]access</td>
<td>解决CNN输入大小不一样的问题，并充分利用完整的信号<strong>突发</strong>。探索了三种容和方法：基于投票、基于置信度、基于特征</td>
</tr>
<tr>
<td>[50]</td>
<td>图映射CNN转换接收到的信号为图形，CNN提取特征，GCN分类</td>
</tr>
</tbody></table>
<p><img src="/./modulation-recognition-survey/iqseq.png" alt="iqseq"></p>
<h4 id="振幅和相位序列-Amplitude-and-Phase-Sequences"><a href="#振幅和相位序列-Amplitude-and-Phase-Sequences" class="headerlink" title="振幅和相位序列 Amplitude and Phase Sequences"></a>振幅和相位序列 Amplitude and Phase Sequences</h4><p><img src="/./modulation-recognition-survey/ap.png" alt="ap"></p>
<h4 id="快速傅里叶变换序列-Fast-Fourier-Transformation-Sequences"><a href="#快速傅里叶变换序列-Fast-Fourier-Transformation-Sequences" class="headerlink" title="快速傅里叶变换序列 Fast Fourier Transformation Sequences"></a>快速傅里叶变换序列 Fast Fourier Transformation Sequences</h4><p><img src="/./modulation-recognition-survey/fft.png" alt="fft"></p>
<h4 id="振幅直方图序列-Amplitude-Histogram-Sequences"><a href="#振幅直方图序列-Amplitude-Histogram-Sequences" class="headerlink" title="振幅直方图序列 Amplitude Histogram Sequences"></a>振幅直方图序列 Amplitude Histogram Sequences</h4><p><img src="/./modulation-recognition-survey/ah.png" alt="ah"></p>
<h3 id="IV-综合表示"><a href="#IV-综合表示" class="headerlink" title="IV 综合表示"></a>IV 综合表示</h3><ul>
<li>组合表示使用多个特征、图像或序列的组合来表示接收到的信号。它能够综合多种表示的优点，获得更好的分类性能。</li>
<li>多个表示应该尽可能不相关。</li>
<li>多个表示方法的缺陷可能会累积并发挥主导作用，反而会削弱分类性能。</li>
</ul>
<h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><h3 id="RadioML-2016-10A-DATASET"><a href="#RadioML-2016-10A-DATASET" class="headerlink" title="RadioML 2016.10A DATASET"></a>RadioML 2016.10A DATASET</h3><ul>
<li>合成数据集：<strong>RadioML 2016.10A</strong> </li>
<li>GNU’s Not Unix (GNU) Radio生成的</li>
<li>包括8种数字调制和3种模拟调制</li>
<li>20个不同信噪比的220k信号，20*11*1k</li>
<li>是<strong>RadioML 2016.04C</strong>的一个更干净，更规范的版本</li>
<li>更大的数据集：<strong>RadioML 2016.10B</strong></li>
</ul>
<h3 id="RadioML-2018-01A-DATASET"><a href="#RadioML-2018-01A-DATASET" class="headerlink" title="RadioML 2018.01A DATASET"></a>RadioML 2018.01A DATASET</h3><ul>
<li><p>它包括在空中测量的24个数字和模拟调制方案，(在广泛的信噪比值范围内传播)。</p>
</li>
<li><p>包含了超过250万个信号</p>
</li>
</ul>
<h3 id="HisarMod2019-1-DATASET"><a href="#HisarMod2019-1-DATASET" class="headerlink" title="HisarMod2019.1 DATASET"></a>HisarMod2019.1 DATASET</h3><ul>
<li>通过5种不同的无线信道生成（ideal, static, Rayleigh, Rician, and Nakagami–m）</li>
<li>MATLAB2017生成</li>
<li>包含780K个IQ样本，信噪比范围和<strong>RadioML 2016.10B</strong>一样</li>
</ul>
<h2 id="基于机器学习的方法"><a href="#基于机器学习的方法" class="headerlink" title="基于机器学习的方法"></a>基于机器学习的方法</h2><h2 id="基于深度学习的方法"><a href="#基于深度学习的方法" class="headerlink" title="基于深度学习的方法"></a>基于深度学习的方法</h2><h3 id="基于CNN的方法"><a href="#基于CNN的方法" class="headerlink" title="基于CNN的方法"></a>基于CNN的方法</h3><h3 id="基于RNN-LSTM的方法"><a href="#基于RNN-LSTM的方法" class="headerlink" title="基于RNN,LSTM的方法"></a>基于RNN,LSTM的方法</h3><h3 id="基于DNN的方法"><a href="#基于DNN的方法" class="headerlink" title="基于DNN的方法"></a>基于DNN的方法</h3><h3 id="基于自动编码器-AE"><a href="#基于自动编码器-AE" class="headerlink" title="基于自动编码器(AE)"></a>基于自动编码器(AE)</h3><h2 id="挑战和研究方向"><a href="#挑战和研究方向" class="headerlink" title="挑战和研究方向"></a>挑战和研究方向</h2><p>存在的局限：</p>
<ol>
<li>需要先验信息</li>
<li>仅限于少数调制方案</li>
<li>计算复杂性较高，不能用于实时应用</li>
<li>需要较高的<strong>信噪比</strong></li>
</ol>
<p>方向：</p>
<ul>
<li>提高分类器在较大<strong>信噪比范围</strong>内的鲁棒性</li>
<li>在信号预处理阶段使用降噪算法</li>
<li>对于不同长度输入的处理</li>
<li>数据集以及数据增广的方法</li>
<li>半监督和无监督</li>
<li>对于未知调制类型的处理</li>
<li>应用于实际硬件设备上，需要更高的精确度和更小的复杂度</li>
</ul>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>deeplearning</tag>
        <tag>radio-signal</tag>
      </tags>
  </entry>
  <entry>
    <title>无线电信号识别论文摘要整合</title>
    <url>/2022/07/24/signal-recognition/radio-abstract/</url>
    <content><![CDATA[<h2 id="Exploring-Self-supervised-Learning-for-Radio-Signal-Recognition"><a href="#Exploring-Self-supervised-Learning-for-Radio-Signal-Recognition" class="headerlink" title="Exploring Self-supervised Learning for Radio Signal Recognition"></a>Exploring Self-supervised Learning for Radio Signal Recognition</h2><blockquote>
<p>2021 IEEE 23rd Int Conf on High Performance Computing &amp; Communications; 7th Int Conf on Data Science &amp; Systems; 19th Int Conf on Smart City; 7th Int Conf on Dependability in Sensor, Cloud &amp; Big Data Systems &amp; Application</p>
</blockquote>
<ul>
<li><p>很少有方法使用大量未标记数据进行无线信号识别</p>
</li>
<li><p>提出了一个自监督学习框架Self-RadioNet，包括两个步骤：</p>
<ul>
<li>预训练(用于提取特征，无标签)</li>
<li>微调(用于无线电信号识别，有标签)。</li>
</ul>
</li>
<li><p>提出了数据增强的方法</p>
</li>
</ul>
<h3 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h3><p><img src="/./radio-abstract/radio-aug.png" alt="radio-aug"> </p>
<ul>
<li>加入高斯噪声</li>
</ul>
<p><img src="/./radio-abstract/gaosi.png" alt="gaosi"></p>
<ul>
<li>加入载波频率偏移</li>
</ul>
<p><img src="/./radio-abstract/cfo.png" alt="cfo"></p>
<h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p><img src="/./radio-abstract/wangluo.png" alt="wangluo"></p>
<h4 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h4><p>7个残差层+全局池化层构成一个编码器<br><img src="/./radio-abstract/encoder.png" alt="encoder"></p>
<h4 id="投影头-Projection-head"><a href="#投影头-Projection-head" class="headerlink" title="投影头 Projection head"></a>投影头 Projection head</h4><p>非线性投影头被首次用于 SimCLR, MoCo v2，可以提高表示质量。 使用MLP head，包含了三个全连接层。<br><img src="/./radio-abstract/projectionhead.png" alt="projectionhead"></p>
<h4 id="对比损失"><a href="#对比损失" class="headerlink" title="对比损失"></a>对比损失</h4><ul>
<li>NT-Xent: Normalized Temperature-scaled Cross Entropy Loss<br><img src="/./radio-abstract/loss.png" alt="loss"><br><img src="/./radio-abstract/loss_1.png" alt="loss_1"></li>
</ul>
<h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><h4 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h4><ul>
<li>Rayl-0.5</li>
</ul>
<p><img src="/./radio-abstract/dataset.png" alt="dataset"></p>
<h4 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h4><p><img src="/./radio-abstract/result.png" alt="result"></p>
<h2 id="Real-World-ADS-B-signal-recognition-based-on-Radio-Frequency-Fingerprinting"><a href="#Real-World-ADS-B-signal-recognition-based-on-Radio-Frequency-Fingerprinting" class="headerlink" title="Real-World ADS-B signal recognition based on Radio Frequency Fingerprinting"></a>Real-World ADS-B signal recognition based on Radio Frequency Fingerprinting</h2><blockquote>
<p>2020 IEEE 28th International Conference on Network Protocols (ICNP)</p>
</blockquote>
<ul>
<li><p>提出了基于轮廓恒星图和CNN的射频指纹(RFF)识别方案。生成的图像类似于“指纹”图形，因此可以使用图像识别CNN进行识别。</p>
</li>
<li><p>提出了一种ADS-B原始信号检测采集和实时标记方法。</p>
</li>
<li><p>在不同网络和不同信噪比下具有更好的识别效果</p>
</li>
</ul>
<p><img src="/./radio-abstract/aircraft.png" alt="aircraft"></p>
<p><img src="/./radio-abstract/hengxingtu.png" alt="hengxingtu"></p>
<h2 id="Iterative-Pyramidal-Filtering-Method-for-Improved-Signal-Recognition-in-Radio-Spectrograms"><a href="#Iterative-Pyramidal-Filtering-Method-for-Improved-Signal-Recognition-in-Radio-Spectrograms" class="headerlink" title="Iterative Pyramidal Filtering Method for Improved Signal Recognition in Radio Spectrograms"></a>Iterative Pyramidal Filtering Method for Improved Signal Recognition in Radio Spectrograms</h2><blockquote>
<p>IEEE WIRELESS COMMUNICATIONS LETTERS, VOL. 11, NO. 6, JUNE 2022</p>
</blockquote>
<ul>
<li>大多数基于无线电频谱图处理的现有技术需要相对较高的信噪比，在低&#x2F;中等信噪比下表现不佳。</li>
<li>本文提出了一种基于新型金字塔卷积核的迭代无线电频谱图滤波方法。</li>
<li>该方法提高了无线电频谱图中信号成分的可识别性。</li>
</ul>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>deeplearning</tag>
        <tag>radio-signal</tag>
      </tags>
  </entry>
  <entry>
    <title>面向非均衡类别的半监督辐射源识别方法</title>
    <url>/2022/08/21/signal-recognition/semi-supervised-emitter-identification/</url>
    <content><![CDATA[<p>问题：辐射源个体识别(SEI)中样本标签不完整和数据类别分布不平衡导致分类准确率下降</p>
<blockquote>
<p>特定辐射源识别(Specific Emitter Identification, SEI)</p>
</blockquote>
<p>随着物联网(Internet of Things, IoT)应用的大规模普及和IoT接入设备数 量的迅速增长，高效、安全、稳定的物联网设备认 证方案是防范恶意攻击、确保用户隐私安全的关键[2]。 由于发射机的物理层缺陷不可避免且难以复制，例 如功率放大器的非线性失真[3–5]，因此相比于采用 协议分析、MAC地址关联或密钥验证的无线设备 认证技术，基于物理层射频指纹(Radio Frequency Fingerprint, RFF)提取的SEI方法可靠性更强</p>
<h2 id="现有的辐射源识别技术通常-可划分为瞬态方法-6–8-和稳态方法"><a href="#现有的辐射源识别技术通常-可划分为瞬态方法-6–8-和稳态方法" class="headerlink" title="现有的辐射源识别技术通常 可划分为瞬态方法[6–8]和稳态方法"></a>现有的辐射源识别技术通常 可划分为瞬态方法[6–8]和稳态方法</h2><h3 id="瞬态方法："><a href="#瞬态方法：" class="headerlink" title="瞬态方法："></a>瞬态方法：</h3><p>瞬态方法利用 发射机开关瞬间产生的状态畸变用于特征提取，但 这类畸变持续时间通常较短，且性能易受噪声及非 理想的信道条件影响发生恶化。</p>
<h3 id="稳态方法："><a href="#稳态方法：" class="headerlink" title="稳态方法："></a>稳态方法：</h3><p>稳态方法从发射机传输的稳定信号中提取RFF用于 分类，因而应用更加广泛。</p>
<blockquote>
<p>基于物理层射频指纹(Radio Frequency Fingerprint, RFF)</p>
</blockquote>
<p>包括高阶累积量(Higher Order Cumulant, HOC)[9,10]、希尔伯特变换(Hilbert Transform, HT)[11–13]、无意调相特征[14]、变分模态 分解(Variational Mode Decomposition, VMD)[15] 和功率谱密度(Power Spectral Density, PSD)但 上述基于变换域分析的稳态特征提取依赖大量的先 验知识，且特征提取的有效性易受传输数据影响， 导致算法的泛化性降低。</p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>paper</tag>
        <tag>deeplearning</tag>
        <tag>radio-signal</tag>
      </tags>
  </entry>
  <entry>
    <title>窗口管理器i3wm安装配置</title>
    <url>/2022/06/22/linux/i3/i3wm/</url>
    <content><![CDATA[<p>效果图:<br><img src="/./i3wm/performance2.png" alt="performance2"></p>
<p>可以借鉴的配置：<br><a href="https://github.com/aeghn/prettyi3">https://github.com/aeghn/prettyi3</a><br><a href="https://github.com/jorhelp/LinuxDotfiles">https://github.com/jorhelp/LinuxDotfiles</a></p>
<p>我的配置文件: <a href="https://github.com/Wadekiny/dotfiles">https://github.com/Wadekiny/dotfiles</a></p>
<h1 id="i3wm"><a href="#i3wm" class="headerlink" title="i3wm"></a>i3wm</h1><p><a href="https://github.com/i3/i3">https://github.com/i3/i3</a></p>
<h2 id="i3-gaps"><a href="#i3-gaps" class="headerlink" title="i3-gaps"></a>i3-gaps</h2><p>i3-gaps 可以使窗口之间有空隙（最终使用）<br><a href="https://github.com/Airblader/i3">https://github.com/Airblader/i3</a></p>
<h2 id="i3-gaps-rounded"><a href="#i3-gaps-rounded" class="headerlink" title="i3-gaps-rounded"></a>i3-gaps-rounded</h2><p>在i3-gaps的基础之上添加了圆角，有bug，圆角不能正常显示<br><a href="https://github.com/resloved/i3">https://github.com/resloved/i3</a></p>
<h2 id="配置i3"><a href="#配置i3" class="headerlink" title="配置i3"></a>配置i3</h2><p>创建配置文件: <code>~/.config/i3/config</code><br>我的配置文件: <a href="https://github.com/Wadekiny/dotfiles">https://github.com/Wadekiny/dotfiles</a></p>
<h1 id="compton-amp-picom"><a href="#compton-amp-picom" class="headerlink" title="compton &amp; picom"></a>compton &amp; picom</h1><p>使用picom实现阴影，透明，高斯模糊，圆角效果</p>
<h2 id="安装picom"><a href="#安装picom" class="headerlink" title="安装picom"></a>安装picom</h2><ul>
<li><p>原生picom，功能少，bug少<br><a href="https://github.com/yshui/picom">https://github.com/yshui/picom</a></p>
</li>
<li><p>增加了透明、高斯模糊、圆角<br>但是有一个问题，同时使用圆角，透明+高斯模糊，阴影时，圆角处不透明而是模糊效果<br><a href="https://github.com/ibhagwan/picom">https://github.com/ibhagwan/picom</a> </p>
</li>
<li><p>修复了圆角处的问题（最终使用）<br><a href="https://github.com/s0nny7/picom">https://github.com/s0nny7/picom</a></p>
</li>
<li><p>带动画的picom，会报错，动画不流畅<br><a href="https://github.com/jonaburg/picom">https://github.com/jonaburg/picom</a></p>
<ul>
<li>还有一个jonaburg-fix版本</li>
</ul>
</li>
</ul>
<h2 id="配置picom"><a href="#配置picom" class="headerlink" title="配置picom"></a>配置picom</h2><p><code>~/.config/picom/picom.conf</code></p>
<p>我的配置文件: <a href="https://github.com/Wadekiny/dotfiles">https://github.com/Wadekiny/dotfiles</a></p>
<h1 id="polybar"><a href="#polybar" class="headerlink" title="polybar"></a>polybar</h1><p><a href="https://github.com/polybar/polybar">https://github.com/polybar/polybar</a></p>
<p>如果要显示不同模块的信息，需要装上对应的依赖</p>
<h2 id="开机启动polybar"><a href="#开机启动polybar" class="headerlink" title="开机启动polybar"></a>开机启动polybar</h2><ol>
<li><p>在<code>~/.config/i3/config</code>中注释掉<code>i3status</code>部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#finds out, if available)</span><br><span class="line">#bar &#123;</span><br><span class="line">#status_command i3status</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建脚本<code>~/.config/i3/polybar.sh</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">killall -q polybar</span><br><span class="line">while pgrep -x &gt;/dev/null; do sleep 1; done</span><br><span class="line">polybar</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>~/.config/i3/config</code>中添加开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec_always --no-startup-id ~/.config/i3/polybar.sh &amp;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="配置polybar"><a href="#配置polybar" class="headerlink" title="配置polybar"></a>配置polybar</h2><p>配置文件位置: <code>~/.config/polybar/config.ini</code><br>我的配置文件: <a href="https://github.com/Wadekiny/dotfiles">https://github.com/Wadekiny/dotfiles</a></p>
<h1 id="rofi"><a href="#rofi" class="headerlink" title="rofi"></a>rofi</h1><h2 id="安装rofi"><a href="#安装rofi" class="headerlink" title="安装rofi"></a>安装rofi</h2><p><a href="https://github.com/davatorium/rofi">https://github.com/davatorium/rofi</a></p>
<h2 id="配置rofi"><a href="#配置rofi" class="headerlink" title="配置rofi"></a>配置rofi</h2><p><a href="https://github.com/davatorium/rofi/blob/next/CONFIG.md">https://github.com/davatorium/rofi/blob/next/CONFIG.md</a></p>
<p>创建配置文件到<code>~/.config/rofi/config.rasi</code></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">rofi -upgrade-config</span><br></pre></td></tr></table></figure>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p><a href="https://github.com/davatorium/rofi-themes/tree/master/User%20Themes">https://github.com/davatorium/rofi-themes/tree/master/User%20Themes</a></p>
<p>下载想用的主题，主题文件放到<code>~/.config/rofi/</code>目录下</p>
<h2 id="rofi代替dmenu"><a href="#rofi代替dmenu" class="headerlink" title="rofi代替dmenu"></a>rofi代替dmenu</h2><p>在<code>~/.config/i3/config</code>中添加一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bindsym $mod+d exec --no-startup-id rofi -theme slate.rasi -show combi -show-icons</span><br></pre></td></tr></table></figure>

<h2 id="rofi配置文件"><a href="#rofi配置文件" class="headerlink" title="rofi配置文件"></a>rofi配置文件</h2><p>我的配置文件: <a href="https://github.com/Wadekiny/dotfiles">https://github.com/Wadekiny/dotfiles</a></p>
<h1 id="i3lock"><a href="#i3lock" class="headerlink" title="i3lock"></a>i3lock</h1><ol>
<li><p>默认的i3lock</p>
</li>
<li><p>i3lock-color<br><a href="https://github.com/Raymo111/i3lock-color">https://github.com/Raymo111/i3lock-color</a></p>
</li>
<li><p>betterlockscreen (最终使用)<br><a href="https://github.com/betterlockscreen/betterlockscreen">https://github.com/betterlockscreen/betterlockscreen</a></p>
</li>
</ol>
<ul>
<li>我的配置文件: <a href="https://github.com/Wadekiny/dotfiles">https://github.com/Wadekiny/dotfiles</a></li>
</ul>
<h1 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h1><p>自动更换壁纸</p>
<ol>
<li>创建 python 文件</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">bg_dir = <span class="string">&#x27;/home/wadekiny/Pictures/background/&#x27;</span></span><br><span class="line">time_cycle = <span class="number">1000</span></span><br><span class="line">bg_list = glob.glob(bg_dir + <span class="string">&#x27;*.jpg&#x27;</span>) + glob.glob(bg_dir + <span class="string">&#x27;*.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    bg_list = glob.glob(bg_dir + <span class="string">&#x27;*.jpg&#x27;</span>) + glob.glob(bg_dir + <span class="string">&#x27;*.png&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> pic_name <span class="keyword">in</span> bg_list:</span><br><span class="line">        <span class="built_in">print</span>(pic_name)</span><br><span class="line">        os.system(<span class="string">&#x27;feh --bg-fill &#x27;</span>+ pic_name)</span><br><span class="line">        time.sleep(time_cycle)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>开机启动</li>
</ol>
<p><code>~/.config/i3/config</code>中添加一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec_always --no-startup-id python3 ~/.config/i3/wallpic.py</span><br></pre></td></tr></table></figure>




<h1 id="音量"><a href="#音量" class="headerlink" title="音量"></a>音量</h1><h2 id="设置默认声卡"><a href="#设置默认声卡" class="headerlink" title="设置默认声卡"></a>设置默认声卡</h2><p>在使用amixer设置音量时，报错: <code>amixer: Unable to find simple control &#39;Master&#39; 0</code></p>
<ol>
<li><p>通过<code>alsamixer</code>命令可以查看当前声卡，调节音频</p>
</li>
<li><p>查看声卡相关信息：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"> wadekiny-R7P &lt;~&gt; [<span class="number">16</span>:<span class="number">35</span>:<span class="number">29</span>]</span><br><span class="line"> &gt;&gt; aplay -l</span><br><span class="line">**** List of PLAYBACK Hardware Devices ****</span><br><span class="line">card <span class="number">0</span>: NVidia [HDA NVidia], device <span class="number">3</span>: HDMI <span class="number">0</span> [HDMI <span class="number">0</span>]</span><br><span class="line"><span class="function">  Subdevices: 1/1</span></span><br><span class="line"><span class="function">  <span class="title">Subdevice</span> #0: <span class="title">subdevice</span> #0</span></span><br><span class="line"><span class="function"><span class="title">card</span> 0: <span class="title">NVidia</span> [<span class="title">HDA</span> <span class="title">NVidia</span>], <span class="title">device</span> 7: <span class="title">HDMI</span> 1 [<span class="title">HDMI</span> 1]</span></span><br><span class="line"><span class="function">  <span class="title">Subdevices</span>: 1/1</span></span><br><span class="line"><span class="function">  <span class="title">Subdevice</span> #0: <span class="title">subdevice</span> #0</span></span><br><span class="line"><span class="function"><span class="title">card</span> 0: <span class="title">NVidia</span> [<span class="title">HDA</span> <span class="title">NVidia</span>], <span class="title">device</span> 8: <span class="title">HDMI</span> 2 [<span class="title">HDMI</span> 2]</span></span><br><span class="line"><span class="function">  <span class="title">Subdevices</span>: 1/1</span></span><br><span class="line"><span class="function">  <span class="title">Subdevice</span> #0: <span class="title">subdevice</span> #0</span></span><br><span class="line"><span class="function"><span class="title">card</span> 0: <span class="title">NVidia</span> [<span class="title">HDA</span> <span class="title">NVidia</span>], <span class="title">device</span> 9: <span class="title">HDMI</span> 3 [<span class="title">HDMI</span> 3]</span></span><br><span class="line"><span class="function">  <span class="title">Subdevices</span>: 1/1</span></span><br><span class="line"><span class="function">  <span class="title">Subdevice</span> #0: <span class="title">subdevice</span> #0</span></span><br><span class="line"><span class="function"><span class="title">card</span> 0: <span class="title">NVidia</span> [<span class="title">HDA</span> <span class="title">NVidia</span>], <span class="title">device</span> 10: <span class="title">HDMI</span> 4 [<span class="title">HDMI</span> 4]</span></span><br><span class="line"><span class="function">  <span class="title">Subdevices</span>: 1/1</span></span><br><span class="line"><span class="function">  <span class="title">Subdevice</span> #0: <span class="title">subdevice</span> #0</span></span><br><span class="line"><span class="function"><span class="title">card</span> 1: <span class="title">Generic</span> [<span class="title">HD</span>-<span class="title">Audio</span> <span class="title">Generic</span>], <span class="title">device</span> 0: <span class="title">ALC257</span> <span class="title">Analog</span> [<span class="title">ALC257</span> <span class="title">Analog</span>]</span></span><br><span class="line"><span class="function">  <span class="title">Subdevices</span>: 1/1</span></span><br><span class="line"><span class="function">  <span class="title">Subdevice</span> #0: <span class="title">subdevice</span> #0</span></span><br></pre></td></tr></table></figure>
<p>所以，在aplay -l 里面选择声卡1,设备ID为0的声卡。</p>
</li>
<li><p>把下列配置添加到系统级别的 <code>/etc/asound.conf</code> 或用户级别的 <code>~/.asoundrc</code> 文件。如果文件不存在，可以手动创建。其中的各个ID，请根据实际情况调整：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">defaults.pcm.card 1</span><br><span class="line">defaults.pcm.device 0</span><br><span class="line">defaults.ctl.card 1</span><br></pre></td></tr></table></figure>

<p><code>pcm</code>选项决定用来播放音频的设备，而<code>ctl</code>选项决定那个声卡能够由控制工具（如 alsamixer）使用。</p>
<h2 id="配置快捷键"><a href="#配置快捷键" class="headerlink" title="配置快捷键"></a>配置快捷键</h2><p>在<code>~/.config/i3/config</code>中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bindsym XF86AudioRaiseVolume exec amixer set  Master 1dB+</span><br><span class="line">bindsym XF86AudioLowerVolume exec amixer set  Master 1dB-</span><br><span class="line">bindsym XF86AudioMute exec amixer -D pulse set Master toggle </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="亮度"><a href="#亮度" class="headerlink" title="亮度"></a>亮度</h1><p>在<code>~/.config/i3/config</code>中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bindsym XF86MonBrightnessUp exec &quot;xbacklight -inc 10; notify-send &#x27;brightness up&#x27;&quot;</span><br><span class="line">bindsym XF86MonBrightnessDown exec &quot;xbacklight -dec 10; notify-send &#x27;brightness down&#x27;&quot;</span><br></pre></td></tr></table></figure>


<h1 id="触摸板"><a href="#触摸板" class="headerlink" title="触摸板"></a>触摸板</h1><h2 id="轻击触摸板实现点击功能"><a href="#轻击触摸板实现点击功能" class="headerlink" title="轻击触摸板实现点击功能"></a>轻击触摸板实现点击功能</h2><p>编写脚本文件<code>~/.config/i3/tap2click.sh</code>，在i3的配置文件中添加一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec_always --no-startup-id ~/.config/i3/tap2click.sh &amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Get <span class="built_in">id</span> of touchpad and the <span class="built_in">id</span> of the field corresponding to</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tapping to click</span></span><br><span class="line">id=`xinput list | grep &quot;Touchpad&quot; | cut -d&#x27;=&#x27; -f2 | cut -d&#x27;[&#x27; -f1`</span><br><span class="line">tap_to_click_id=`xinput list-props $id | \</span><br><span class="line">                      grep &quot;Tapping Enabled (&quot; \</span><br><span class="line">                      | cut -d&#x27;(&#x27; -f2 | cut -d&#x27;)&#x27; -f1`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set the property to <span class="literal">true</span></span></span><br><span class="line">xinput --set-prop $id $tap_to_click_id 1</span><br></pre></td></tr></table></figure>

<h2 id="实现反向滚动"><a href="#实现反向滚动" class="headerlink" title="实现反向滚动"></a>实现反向滚动</h2><p>编写脚本文件<code>~/.config/i3/inverse-scroll.sh</code>，在i3的配置文件中添加一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec_always --no-startup-id ~/.config/i3/inverse-scroll.sh &amp;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Get <span class="built_in">id</span> of touchpad and the <span class="built_in">id</span> of the field corresponding to</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">natural scrolling</span></span><br><span class="line">id=`xinput list | grep &quot;Touchpad&quot; | cut -d&#x27;=&#x27; -f2 | cut -d&#x27;[&#x27; -f1`</span><br><span class="line">natural_scrolling_id=`xinput list-props $id | \</span><br><span class="line">                      grep &quot;Natural Scrolling Enabled (&quot; \</span><br><span class="line">                      | cut -d&#x27;(&#x27; -f2 | cut -d&#x27;)&#x27; -f1`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Set the property to <span class="literal">true</span></span></span><br><span class="line">xinput --set-prop $id $natural_scrolling_id 1</span><br></pre></td></tr></table></figure>
<h1 id="解决边框-圆角冲突"><a href="#解决边框-圆角冲突" class="headerlink" title="解决边框+圆角冲突"></a>解决边框+圆角冲突</h1><ul>
<li>使用i3的边框再用picom圆角，会导致四个角的边框被削掉。</li>
</ul>
<p>用这个: <a href="https://github.com/Wadekiny/xborders">https://github.com/Wadekiny/xborders</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>i3</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Arch Linux 安装</title>
    <url>/2023/01/13/linux/arch/archlinux/</url>
    <content><![CDATA[<p><img src="/./archlinux/arch.png" alt="arch"></p>
<blockquote>
<p>Reference<br><a href="https://zhuanlan.zhihu.com/p/513859236">https://zhuanlan.zhihu.com/p/513859236</a><br><a href="https://zhuanlan.zhihu.com/p/138951848?ivk_sa=1025883i">https://zhuanlan.zhihu.com/p/138951848?ivk_sa=1025883i</a></p>
</blockquote>
<h1 id="1-下载-ISO，制作启动盘，分出空闲空间"><a href="#1-下载-ISO，制作启动盘，分出空闲空间" class="headerlink" title="1.下载 ISO，制作启动盘，分出空闲空间"></a>1.下载 ISO，制作启动盘，分出空闲空间</h1><ol>
<li><blockquote>
<p><a href="https://archlinux.org/download/">https://archlinux.org/download/</a></p>
</blockquote>
</li>
<li><p>制作工具使用 <a href="https://rufus.ie/en/">Rufus</a>，写入方式为ISO(如果是DD的话，U盘就不能存其他文件了)，选项选择GPT而非默认的MBR</p>
</li>
<li><p>分出空闲空间</p>
</li>
</ol>
<h1 id="2-BIOS-设置"><a href="#2-BIOS-设置" class="headerlink" title="2.BIOS 设置"></a>2.BIOS 设置</h1><ul>
<li>thinkbook14+ 在开机时按F1进入BIOS设置</li>
</ul>
<ol>
<li><p>禁用safeboot </p>
</li>
<li><p>如果你的硬盘是NVMe的，把 从硬盘的启动方式 改成 AHCI</p>
</li>
<li><p>修改启动顺序，把U盘的启动顺序放到最上面（此处小心，不要delete任何东西）</p>
</li>
<li><p>完成之后退出重启</p>
</li>
</ol>
<h1 id="3-连接网络"><a href="#3-连接网络" class="headerlink" title="3.连接网络"></a>3.连接网络</h1><ol>
<li><p>进入安装流程后，检查网络：<code>ip a</code></p>
</li>
<li><p>连接网络的3种方式</p>
<ul>
<li>有线连接<br> <code>不会</code></li>
<li>无线连接 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iwctl #进入iwd模式</span><br><span class="line">device list #查看网卡名字，如果没有驱动就不能用</span><br><span class="line">station wlan0 scan #检查扫描网络，输入</span><br><span class="line">station wlan0 get-networks #查看网络名字，假设名字叫BUPT-portal，输入下面一行</span><br><span class="line">station wlan0 connect BUPT-portal #接着输入密码（如果有密码的话）</span><br><span class="line">exit    #退出</span><br></pre></td></tr></table></figure></li>
<li>USB共享网络<ul>
<li>插上USB，手机上点击共享</li>
<li>记得在之后挂载系统后安装usb驱动，<code>pacman -S usbmuxd</code></li>
</ul>
</li>
</ul>
</li>
<li><p>同步时间 <code>timedatectl set-ntp true</code></p>
</li>
</ol>
<h1 id="4-硬盘分区"><a href="#4-硬盘分区" class="headerlink" title="4.硬盘分区"></a>4.硬盘分区</h1><ol>
<li><p>检查硬盘,执行<code>lsblk</code>(之前划分好的空间不会显示)</p>
</li>
<li><p>因为之前划好的空间在”nvme0n1”上，所以执行<code>cfdisk /dev/nvme0n1</code>，进入一个交互界面</p>
</li>
<li><p>在之前分出的空间上建立两个分区，一个500M,后续用来挂载 “&#x2F;boot&#x2F;efi”,剩下的挂载到”&#x2F;“下 ( 懒得分home,swap了 ,swap和休眠功能有关), 最后要输入yes确认</p>
</li>
<li><p>分区格式化</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/nvme0n1p2    (boot分区必须使用fat32格式,分区号根据实际情况修改)</span><br><span class="line">mkfs.ext4 /dev/nvme0n1p1    (/ 和 /home 一般使用ext4分区格式)</span><br></pre></td></tr></table></figure></li>
<li><p>分区挂载</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount /dev/nvme0n1p1 /mnt    (将 / 分区挂载到 live系统中的 /mnt 目录，此时 /mnt 目录就是我们所安装系统的 / 目录)</span><br><span class="line">mkdir -p /mnt/boot/efi    (在新系统的 / 目录中新建 efi 文件夹，-p 参数表示递归创建)</span><br><span class="line">mount /dev/nvme0n1p2 /mnt/boot/efi    (将 boot 分区挂载到efi文件夹)</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查，执行<code>lsblk</code>检查分区情况</p>
</li>
</ol>
<h1 id="5-安装系统"><a href="#5-安装系统" class="headerlink" title="5.安装系统"></a>5.安装系统</h1><ol>
<li>换源，两种方法<ul>
<li><code>reflector --country China --age 72 --sort rate --protocol https --save /etc/pacman.d/mirrorlist</code></li>
<li>替换&#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist为以下任选其一  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server = https://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.dgut.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.nju.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirror.redrock.team/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span><br><span class="line">Server = https://mirrors.xjtu.edu.cn/archlinux/$repo/os/$arch</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>安装内核，三种可选</li>
</ol>
<blockquote>
<p>这里需要提前说一下，linux-zen 内核不支持 nvidia 显卡，有这个需求的就别装了，如果是原版 linux 内核的话，就要做好随时滚挂的准备，最近的 5.18 内核更新就会导致 nvidia-5.15 版本驱动失效无法开机（需要在启动选项中添加ibt&#x3D;off），如果你希望稳定使用，就选择 linux-lts 内核和linux-lts-headers，并安装相应的 nvidia-lts 驱动（后面会有详细说明），不过不用太担心，即便是系统安装完成，你也可以随时切换自己想要的内核版本。</p>
</blockquote>
<ul>
<li>普通内核(linux linux-headers)</li>
<li><strong>lts稳定版内核(linux-lts linux-lts-headers)</strong></li>
<li>zen内核(linux-zen,linux-zen-headers)（高性能）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base linux linux-headers linux-firmware base-devel （usbmuxd）</span><br><span class="line">#或者</span><br><span class="line">pacstrap /mnt base linux-lts linux-lts-headers linux-firmware base-devel （usbmuxd）</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>写入分区表并检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">cat /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入新系统，<code>arch-chroot /mnt</code></p>
</li>
</ol>
<h1 id="6-设置新系统"><a href="#6-设置新系统" class="headerlink" title="6.设置新系统"></a>6.设置新系统</h1><ol>
<li><p>要不要换源？按理说之前换的是安装系统的源而不是新系统的</p>
</li>
<li><p>安装软件</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S neovim iwd ttf-dejavu sudo bluez usbmuxd networkmanager dhcpcd wqy-zenhei ntfs-3g</span><br></pre></td></tr></table></figure></li>
<li><p>设置时区时间</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime    (设置时区为上海)</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置语言</p>
<ol>
<li><p>输入<code>nvim /etc/locale.gen</code>，删除【en_US.UTF-8】和【zh_CN.UTF-8】两项前面的“#”，保存。（如果有其他语言需求也可以自行取消注释，比如台湾地区和港澳地区）</p>
</li>
<li><p>输入<code>locale-gen</code></p>
</li>
<li><p>输入<code>echo LANG=en_US.UTF-8 &gt;&gt; /etc/locale.conf</code></p>
</li>
</ol>
</li>
<li><p>输入<code>passwd</code>设置root用户密码</p>
</li>
<li><p>设置主机名<code>echo thinkbook14p &gt;&gt; /etc/hostname</code></p>
</li>
<li><p>设置网络</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br><span class="line">::1 localhost</span><br><span class="line">127.0.1.1 thinkbook14p.localdomain thinkbook14p</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装引导，重启系统</p>
<ol>
<li>安装引导 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S grub efibootmgr   (安装grub)</span><br><span class="line">grub-install /dev/nvme0n1    (超级大坑，注意选择的是整个硬盘，而不是boot分区)</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg (创建grub配置文件)</span><br></pre></td></tr></table></figure></li>
<li>重启系统(确保已经安装usbmuxd,可以用<code>pacman -Q</code>查看已安装的包 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit    (退出新系统，回到live系统)</span><br><span class="line">umount -R /mnt    (递归卸载 /mnt 中的磁盘)</span><br><span class="line">reboot    (重启)</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<h1 id="7-进入新系统"><a href="#7-进入新系统" class="headerlink" title="7.进入新系统"></a>7.进入新系统</h1><ol>
<li><p>激活服务,因为没有网卡驱动，后面装好后再连接，先用usb共享网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start iwd.service</span><br><span class="line">systemctl enable iwd.service</span><br><span class="line">systemctl start systemd-resolved.service</span><br><span class="line">systemctl enable systemd-resolved.service</span><br><span class="line">systemctl enable bluetooth.service</span><br><span class="line">systemctl enable NetworkManager</span><br><span class="line">systemctl enable dhcpcd</span><br></pre></td></tr></table></figure></li>
<li><p>安装硬件驱动</p>
<ol>
<li>CPU编码 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S intel-ucode    (intel的cpu装这个)</span><br><span class="line">pacman -S amd-ucode    (amd的cpu装这个)</span><br></pre></td></tr></table></figure></li>
<li>显卡驱动<blockquote>
<p>这里举两个例子，我的笔记本，i7-11代，搭配intel核显以及3050显卡，所以安装前两个。我的台式机，e3-1230垃圾CPU，搭配HD6950显卡，所以装第三个。nvidia-dkms 与 nvidia-lts 不兼容，如果装lts驱动的话无需安装dkms 。注意：nvidia驱动的安装与前面选择的内核有关，如果你安装的是linux-lts内核，那么需要将nvidia更换为nvidia-lts，linux-zen不支持nvidia显卡（务必对号入座），如果你选择安装新内核，则需要修改一下ibt&#x3D;off ，否则无法进入系统</p>
</blockquote>
</li>
</ol>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S xf86-video-intel（Intel集成显卡驱动，用Intel核显就装，否则不用装）</span><br><span class="line">pacman -S xf86-video-amdgpu (AMD集成显卡驱动，用amd显卡的就装)</span><br><span class="line">pacman -S mesa nvidia(-lts) nvidia-settings nvidia-dkms nvidia-utils nvidia-prime（nvidia显卡驱动，用nvidia显卡就装，否则不用装）</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>声卡驱动(忘了怎么装得了) <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S alsa-utils pulseaudio pulseaudio-alsa pulseaudio-bluetooth</span><br></pre></td></tr></table></figure>
<blockquote>
<p>输入“vim &#x2F;etc&#x2F;modprobe.d&#x2F;disable_dmic.conf”，把下面的文字打进去，保存:<br><code>options snd_hda_intel dmic_detect=0</code></p>
</blockquote>
</li>
</ol>
</li>
<li><p>创建用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash wadekiny    (添加一个名为wadekiny的用户进入wheel用户组，并将bash作为启动命令)</span><br><span class="line">passwd wadekiny    (设置密码，和设置root是类似的)</span><br></pre></td></tr></table></figure></li>
<li><p>增加sudo权限<code>nvim /etc/sudoers</code></p>
<ol>
<li>找到： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## User privilege specification</span><br><span class="line">##</span><br><span class="line">root ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line">## Uncomment to allow members of group wheel to execute any command</span><br><span class="line"># %wheel ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line">## Same thing without a password</span><br><span class="line"># %wheel ALL=(ALL:ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure></li>
<li>去掉注释: ‘# %wheel ALL&#x3D;(ALL:ALL) ALL’ 或 ‘# %wheel ALL&#x3D;(ALL:ALL) NOPASSWD: ALL’<blockquote>
<p>这里说一下，取消“# %wheel ALL&#x3D;(ALL:ALL) NOPASSWD: ALL”前的“# ”也是可以的，区别就在于，取消这一行后，wheel组的用户使用 sudo 就不用输密码了，如果你是新手，不建议这么做，如果你是老鸟，可以考虑取消NOPASSWD 所在的这一行。（我取消的是NOPASWD这行，图方便）</p>
</blockquote>
</li>
</ol>
</li>
<li><p>重启</p>
</li>
</ol>
<h1 id="8-安装图形化界面"><a href="#8-安装图形化界面" class="headerlink" title="8.安装图形化界面"></a>8.安装图形化界面</h1><h2 id="安装Xorg"><a href="#安装Xorg" class="headerlink" title="安装Xorg"></a>安装Xorg</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xorg xorg-xinit xorg-server</span><br></pre></td></tr></table></figure>

<h2 id="安装DWM"><a href="#安装DWM" class="headerlink" title="安装DWM"></a>安装DWM</h2><blockquote>
<p><a href="https://github.com/wadekiny/dwm">https://github.com/wadekiny/dwm</a></p>
</blockquote>
<p>在用户登录时，读取文件的顺序：</p>
<ol>
<li>读取<code>/etc/profile</code>的设置，对所有用户有效<ul>
<li>然后根据其的内容，读取额外的存档, 如<code>/etc/profile.d</code>,<code>/etc/inputrc</code></li>
</ul>
</li>
<li>根据登录账号，读取<code>~/.bash_profile</code><ul>
<li>若读取失败，则读取<code>~/.bash_login</code></li>
<li>若读取失败，则读取<code>~/.profile</code></li>
</ul>
</li>
<li>根据登录账号，读取<code>~/.bashrc</code></li>
<li>登录到了<code>tty1</code></li>
<li>如果想进入dwm或i3，需要手动执行<code>startx</code></li>
<li>startx 读取<code>~/.xinitrc</code></li>
</ol>
<p>所以需要在.xinitrc中加入<code>exec dwm</code>，实现在启动<code>startx</code>后，自动进入dwm</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>arch</tag>
      </tags>
  </entry>
  <entry>
    <title>R7000P安装ubuntu18.04不能调节亮度</title>
    <url>/2021/02/12/linux/linux/R7000P-bright/</url>
    <content><![CDATA[<p><a href="https://github.com/wu58430/R7000-brightness-control">https://github.com/wu58430/R7000-brightness-control</a></p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim插件</title>
    <url>/2021/01/02/linux/linux/Vim%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="图标问题"><a href="#图标问题" class="headerlink" title="图标问题"></a>图标问题</h1><p>airline的图标需要安装nerd font字体<br>powerline 可以匹配行高？</p>
<h1 id="auto-fcitx-vim"><a href="#auto-fcitx-vim" class="headerlink" title="auto-fcitx-vim"></a>auto-fcitx-vim</h1><ul>
<li>方法1：装插件</li>
<li>方法2：在 <code>init.vim</code> 添加代码</li>
</ul>
<p><strong>reference</strong>: <a href="https://wiki.archlinux.org/index.php/fcitx">https://wiki.archlinux.org/index.php/fcitx</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;##### auto fcitx  ###########</span><br><span class="line">let g:input_toggle = 1</span><br><span class="line">function! fcitx2en()</span><br><span class="line">   let s:input_status = system(&quot;fcitx-remote&quot;)</span><br><span class="line">   if s:input_status == 2</span><br><span class="line">      let g:input_toggle = 1</span><br><span class="line">      let l:a = system(&quot;fcitx-remote -c&quot;)</span><br><span class="line">   endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">function! fcitx2zh()</span><br><span class="line">   let s:input_status = system(&quot;fcitx-remote&quot;)</span><br><span class="line">   if s:input_status != 2 &amp;&amp; g:input_toggle == 1</span><br><span class="line">      let l:a = system(&quot;fcitx-remote -o&quot;)</span><br><span class="line">      let g:input_toggle = 0</span><br><span class="line">   endif</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">set ttimeoutlen=150</span><br><span class="line">&quot;退出插入模式</span><br><span class="line">autocmd insertleave * call fcitx2en()</span><br><span class="line">&quot;进入插入模式</span><br><span class="line">autocmd insertenter * call fcitx2zh()</span><br><span class="line">&quot;##### auto fcitx end ######</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>alacritty-yml</title>
    <url>/2021/04/13/linux/linux/alacritty-yml/</url>
    <content><![CDATA[<h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><p><strong>NOTE</strong>: alacritty可以通过添加ppa的方式，使用apt来安装，这样比github上给的方法要简便</p>
<h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Configuration for Alacritty, the GPU enhanced terminal emulator.</span><br><span class="line"></span><br><span class="line"># Import additional configuration files</span><br><span class="line">#</span><br><span class="line"># Imports are loaded in order, skipping all missing files, with the importing</span><br><span class="line"># file being loaded last. If a field is already present in a previous import, it</span><br><span class="line"># will be replaced.</span><br><span class="line">#</span><br><span class="line"># All imports must either be absolute paths starting with `/`, or paths relative</span><br><span class="line"># to the user&#x27;s home directory starting with `~/`.</span><br><span class="line">#import:</span><br><span class="line">#  - /path/to/alacritty.yml</span><br><span class="line"></span><br><span class="line"># Any items in the `env` entry below will be added as</span><br><span class="line"># environment variables. Some entries may override variables</span><br><span class="line"># set by alacritty itself.</span><br><span class="line">#env:</span><br><span class="line">  # TERM variable</span><br><span class="line">  #</span><br><span class="line">  # This value is used to set the `$TERM` environment variable for</span><br><span class="line">  # each instance of Alacritty. If it is not present, alacritty will</span><br><span class="line">  # check the local terminfo database and use `alacritty` if it is</span><br><span class="line">  # available, otherwise `xterm-256color` is used.</span><br><span class="line">  #TERM: alacritty</span><br><span class="line"></span><br><span class="line">window:</span><br><span class="line">  # Window dimensions (changes require restart)</span><br><span class="line">  #</span><br><span class="line">  # Number of lines/columns (not pixels) in the terminal. The number of columns</span><br><span class="line">  # must be at least `2`, while using a value of `0` for columns and lines will</span><br><span class="line">  # fall back to the window manager&#x27;s recommended size.</span><br><span class="line">  #dimensions:</span><br><span class="line">  #  columns: 0</span><br><span class="line">  #  lines: 0</span><br><span class="line"></span><br><span class="line">  # Window position (changes require restart)</span><br><span class="line">  #</span><br><span class="line">  # Specified in number of pixels.</span><br><span class="line">  # If the position is not set, the window manager will handle the placement.</span><br><span class="line">  #position:</span><br><span class="line">  #  x: 0</span><br><span class="line">  #  y: 0</span><br><span class="line"></span><br><span class="line">  # Window padding (changes require restart)</span><br><span class="line">  #</span><br><span class="line">  # Blank space added around the window in pixels. This padding is scaled</span><br><span class="line">  # by DPI and the specified value is always added at both opposing sides.</span><br><span class="line">  #padding:</span><br><span class="line">  #  x: 0</span><br><span class="line">  #  y: 0</span><br><span class="line"></span><br><span class="line">  # Spread additional padding evenly around the terminal content.</span><br><span class="line">  #dynamic_padding: false</span><br><span class="line"></span><br><span class="line">  # Window decorations</span><br><span class="line">  #</span><br><span class="line">  # Values for `decorations`:</span><br><span class="line">  #     - full: Borders and title bar</span><br><span class="line">  #     - none: Neither borders nor title bar</span><br><span class="line">  #</span><br><span class="line">  # Values for `decorations` (macOS only):</span><br><span class="line">  #     - transparent: Title bar, transparent background and title bar buttons</span><br><span class="line">  #     - buttonless: Title bar, transparent background and no title bar buttons</span><br><span class="line">  decorations: none</span><br><span class="line"></span><br><span class="line">  # Startup Mode (changes require restart)</span><br><span class="line">  #</span><br><span class="line">  # Values for `startup_mode`:</span><br><span class="line">  #   - Windowed</span><br><span class="line">  #   - Maximized</span><br><span class="line">  #   - Fullscreen</span><br><span class="line">  #</span><br><span class="line">  # Values for `startup_mode` (macOS only):</span><br><span class="line">  #   - SimpleFullscreen</span><br><span class="line">  #startup_mode: Windowed</span><br><span class="line"></span><br><span class="line">  # Window title</span><br><span class="line">  #title: Alacritty</span><br><span class="line"></span><br><span class="line">  # Allow terminal applications to change Alacritty&#x27;s window title.</span><br><span class="line">  #dynamic_title: true</span><br><span class="line"></span><br><span class="line">  # Window class (Linux/BSD only):</span><br><span class="line">  #class:</span><br><span class="line">    # Application instance name</span><br><span class="line">    #instance: Alacritty</span><br><span class="line">    # General application class</span><br><span class="line">    #general: Alacritty</span><br><span class="line"></span><br><span class="line">  # GTK theme variant (Linux/BSD only)</span><br><span class="line">  #</span><br><span class="line">  # Override the variant of the GTK theme. Commonly supported values are `dark`</span><br><span class="line">  # and `light`. Set this to `None` to use the default theme variant.</span><br><span class="line">  #gtk_theme_variant: None</span><br><span class="line">  gtk_theme_variant: dark</span><br><span class="line"></span><br><span class="line">#scrolling:</span><br><span class="line">  # Maximum number of lines in the scrollback buffer.</span><br><span class="line">  # Specifying &#x27;0&#x27; will disable scrolling.</span><br><span class="line">  #history: 10000</span><br><span class="line"></span><br><span class="line">  # Scrolling distance multiplier.</span><br><span class="line">  #multiplier: 3</span><br><span class="line"></span><br><span class="line"># Font configuration</span><br><span class="line">font:</span><br><span class="line">  # Normal (roman) font face</span><br><span class="line">  normal:</span><br><span class="line">    # Font family</span><br><span class="line">    #</span><br><span class="line">    # Default:</span><br><span class="line">    #   - (macOS) Menlo</span><br><span class="line">    #   - (Linux/BSD) monospace</span><br><span class="line">    #   - (Windows) Consolas</span><br><span class="line">    #   tips: mono is useful for airline.vim</span><br><span class="line">    family: CodeNewRoman Nerd Font Mono</span><br><span class="line">    #family: Consolas Nerd Font</span><br><span class="line">    #family: Consolas Nerd Font book</span><br><span class="line"></span><br><span class="line">    # The `style` can be specified to pick a specific face.</span><br><span class="line">    #style: Regular</span><br><span class="line"></span><br><span class="line">  # Bold font face</span><br><span class="line">  #bold:</span><br><span class="line">    # Font family</span><br><span class="line">    #</span><br><span class="line">    # If the bold family is not specified, it will fall back to the</span><br><span class="line">    # value specified for the normal font.</span><br><span class="line">    #family: monospace</span><br><span class="line">    #family: CodeNewRoman Nerd Font</span><br><span class="line"></span><br><span class="line">    # The `style` can be specified to pick a specific face.</span><br><span class="line">    #style: Bold</span><br><span class="line"></span><br><span class="line">  # Italic font face</span><br><span class="line">  #italic:</span><br><span class="line">    # Font family</span><br><span class="line">    #</span><br><span class="line">    # If the italic family is not specified, it will fall back to the</span><br><span class="line">    # value specified for the normal font.</span><br><span class="line">    #family: monospace</span><br><span class="line">    #family: CodeNewRoman Nerd Font</span><br><span class="line"></span><br><span class="line">    # The `style` can be specified to pick a specific face.</span><br><span class="line">    #style: Italic</span><br><span class="line"></span><br><span class="line">  # Bold italic font face</span><br><span class="line">  #bold_italic:</span><br><span class="line">    # Font family</span><br><span class="line">    #</span><br><span class="line">    # If the bold italic family is not specified, it will fall back to the</span><br><span class="line">    # value specified for the normal font.</span><br><span class="line">    #family: monospace</span><br><span class="line">    #family: CodeNewRoman Nerd Font</span><br><span class="line"></span><br><span class="line">    # The `style` can be specified to pick a specific face.</span><br><span class="line">    #style: Bold Italic</span><br><span class="line"></span><br><span class="line">  # Point size</span><br><span class="line">  # 16 -- 5</span><br><span class="line">  size: 15.5</span><br><span class="line"></span><br><span class="line">  # Offset is the extra space around each character. `offset.y` can be thought</span><br><span class="line">  # of as modifying the line spacing, and `offset.x` as modifying the letter</span><br><span class="line">  # spacing.</span><br><span class="line">  offset:</span><br><span class="line">    x: 0</span><br><span class="line">    y: 5</span><br><span class="line"></span><br><span class="line">  # Glyph offset determines the locations of the glyphs within their cells with</span><br><span class="line">  # the default being at the bottom. Increasing `x` moves the glyph to the</span><br><span class="line">  # right, increasing `y` moves the glyph upward.</span><br><span class="line">  glyph_offset:</span><br><span class="line">    x: 0</span><br><span class="line">    y: 0</span><br><span class="line"></span><br><span class="line">  # Thin stroke font rendering (macOS only)</span><br><span class="line">  #</span><br><span class="line">  # Thin strokes are suitable for retina displays, but for non-retina screens</span><br><span class="line">  # it is recommended to set `use_thin_strokes` to `false`.</span><br><span class="line">  # use_thin_strokes: true</span><br><span class="line"></span><br><span class="line"># If `true`, bold text is drawn using the bright color variants.</span><br><span class="line">draw_bold_text_with_bright_colors: true</span><br><span class="line"></span><br><span class="line"># Colors (Tomorrow Night)</span><br><span class="line">colors:</span><br><span class="line">  # Default colors</span><br><span class="line">  primary:</span><br><span class="line">  #  background: &#x27;#1d1f21&#x27;</span><br><span class="line">  #  foreground: &#x27;#c5c8c6&#x27;</span><br><span class="line"></span><br><span class="line">      #background: &#x27;0x282a36&#x27;</span><br><span class="line">      #foreground: &#x27;0xf8f8f2&#x27;</span><br><span class="line"></span><br><span class="line">    background: &#x27;#222222&#x27;</span><br><span class="line">    foreground: &#x27;0xf8f8f2&#x27;</span><br><span class="line"></span><br><span class="line">    # Bright and dim foreground colors</span><br><span class="line">    #</span><br><span class="line">    # The dimmed foreground color is calculated automatically if it is not</span><br><span class="line">    # present. If the bright foreground color is not set, or</span><br><span class="line">    # `draw_bold_text_with_bright_colors` is `false`, the normal foreground</span><br><span class="line">    # color will be used.</span><br><span class="line">    #dim_foreground: &#x27;#828482&#x27;</span><br><span class="line">    #bright_foreground: &#x27;#eaeaea&#x27;</span><br><span class="line">  cursor:</span><br><span class="line">    text: &#x27;0x44475a&#x27;</span><br><span class="line">    cursor: &#x27;0xf8f8f2&#x27;</span><br><span class="line"></span><br><span class="line">  # Cursor colors</span><br><span class="line">  #</span><br><span class="line">  # Colors which should be used to draw the terminal cursor.</span><br><span class="line">  #</span><br><span class="line">  # Allowed values are CellForeground/CellBackground, which reference the</span><br><span class="line">  # affected cell, or hexadecimal colors like #ff00ff.</span><br><span class="line">  #cursor:</span><br><span class="line">  #  text: CellBackground</span><br><span class="line">  #  cursor: CellForeground</span><br><span class="line"></span><br><span class="line">  # Vi mode cursor colors</span><br><span class="line">  #</span><br><span class="line">  # Colors for the cursor when the vi mode is active.</span><br><span class="line">  #</span><br><span class="line">  # Allowed values are CellForeground/CellBackground, which reference the</span><br><span class="line">  # affected cell, or hexadecimal colors like #ff00ff.</span><br><span class="line">  #vi_mode_cursor:</span><br><span class="line">  #  text: CellBackground</span><br><span class="line">  #  cursor: CellForeground</span><br><span class="line"></span><br><span class="line">  # Search colors</span><br><span class="line">  #</span><br><span class="line">  # Colors used for the search bar and match highlighting.</span><br><span class="line">  #search:</span><br><span class="line">    # Allowed values are CellForeground/CellBackground, which reference the</span><br><span class="line">    # affected cell, or hexadecimal colors like #ff00ff.</span><br><span class="line">    #matches:</span><br><span class="line">    #  foreground: &#x27;#000000&#x27;</span><br><span class="line">    #  background: &#x27;#ffffff&#x27;</span><br><span class="line">    #focused_match:</span><br><span class="line">    #  foreground: CellBackground</span><br><span class="line">    #  background: CellForeground</span><br><span class="line"></span><br><span class="line">    #bar:</span><br><span class="line">    #  background: &#x27;#c5c8c6&#x27;</span><br><span class="line">    #  foreground: &#x27;#1d1f21&#x27;</span><br><span class="line"></span><br><span class="line">  # Keyboard hints</span><br><span class="line">  #hints:</span><br><span class="line">    # Fist character in the hint label</span><br><span class="line">    #</span><br><span class="line">    # Allowed values are CellForeground/CellBackground, which reference the</span><br><span class="line">    # affected cell, or hexadecimal colors like #ff00ff.</span><br><span class="line">    #start:</span><br><span class="line">    #  foreground: &#x27;#1d1f21&#x27;</span><br><span class="line">    #  background: &#x27;#e9ff5e&#x27;</span><br><span class="line"></span><br><span class="line">    # All characters after the first one in the hint label</span><br><span class="line">    #</span><br><span class="line">    # Allowed values are CellForeground/CellBackground, which reference the</span><br><span class="line">    # affected cell, or hexadecimal colors like #ff00ff.</span><br><span class="line">    #end:</span><br><span class="line">    #  foreground: &#x27;#e9ff5e&#x27;</span><br><span class="line">    #  background: &#x27;#1d1f21&#x27;</span><br><span class="line"></span><br><span class="line">  # Line indicator</span><br><span class="line">  #</span><br><span class="line">  # Color used for the indicator displaying the position in history during</span><br><span class="line">  # search and vi mode.</span><br><span class="line">  #</span><br><span class="line">  # By default, these will use the opposing primary color.</span><br><span class="line">  #line_indicator:</span><br><span class="line">  #  foreground: None</span><br><span class="line">  #  background: None</span><br><span class="line"></span><br><span class="line">  # Selection colors</span><br><span class="line">  #</span><br><span class="line">  # Colors which should be used to draw the selection area.</span><br><span class="line">  #</span><br><span class="line">  # Allowed values are CellForeground/CellBackground, which reference the</span><br><span class="line">  # affected cell, or hexadecimal colors like #ff00ff.</span><br><span class="line">  #selection:</span><br><span class="line">  #  text: CellBackground</span><br><span class="line">  #  background: CellForeground</span><br><span class="line"></span><br><span class="line">  normal:</span><br><span class="line">    black:   &#x27;0x000000&#x27;</span><br><span class="line">    red:     &#x27;0xff5555&#x27;</span><br><span class="line">    green:   &#x27;0x50fa7b&#x27;</span><br><span class="line">    yellow:  &#x27;0xf1fa8c&#x27;</span><br><span class="line">    blue:    &#x27;0xbd93f9&#x27;</span><br><span class="line">    magenta: &#x27;0xff79c6&#x27;</span><br><span class="line">    cyan:    &#x27;0x8be9fd&#x27;</span><br><span class="line">    white:   &#x27;0xbfbfbf&#x27;</span><br><span class="line"></span><br><span class="line">  # Bright colors</span><br><span class="line">  bright:</span><br><span class="line">    black:   &#x27;0x4d4d4d&#x27;</span><br><span class="line">    red:     &#x27;0xff6e67&#x27;</span><br><span class="line">    green:   &#x27;0x5af78e&#x27;</span><br><span class="line">    yellow:  &#x27;0xf4f99d&#x27;</span><br><span class="line">    blue:    &#x27;0xcaa9fa&#x27;</span><br><span class="line">    magenta: &#x27;0xff92d0&#x27;</span><br><span class="line">    cyan:    &#x27;0x9aedfe&#x27;</span><br><span class="line">    white:   &#x27;0xe6e6e6&#x27;</span><br><span class="line"></span><br><span class="line">  # Dim colors</span><br><span class="line">  #</span><br><span class="line">  # If the dim colors are not set, they will be calculated automatically based</span><br><span class="line">  # on the `normal` colors.</span><br><span class="line">  dim:</span><br><span class="line">    black:   &#x27;0x14151b&#x27;</span><br><span class="line">    red:     &#x27;0xff2222&#x27;</span><br><span class="line">    green:   &#x27;0x1ef956&#x27;</span><br><span class="line">    yellow:  &#x27;0xebf85b&#x27;</span><br><span class="line">    blue:    &#x27;0x4d5b86&#x27;</span><br><span class="line">    magenta: &#x27;0xff46b0&#x27;</span><br><span class="line">    cyan:    &#x27;0x59dffc&#x27;</span><br><span class="line">    white:   &#x27;0xe6e6d1&#x27;</span><br><span class="line"></span><br><span class="line">  # Indexed Colors</span><br><span class="line">  #</span><br><span class="line">  # The indexed colors include all colors from 16 to 256.</span><br><span class="line">  # When these are not set, they&#x27;re filled with sensible defaults.</span><br><span class="line">  #</span><br><span class="line">  # Example:</span><br><span class="line">  #   `- &#123; index: 16, color: &#x27;0xff00ff&#x27; &#125;`</span><br><span class="line">  #</span><br><span class="line">  indexed_colors: []</span><br><span class="line">  # Normal colors</span><br><span class="line">  # normal:</span><br><span class="line">  #   black:   &#x27;#1d1f21&#x27;</span><br><span class="line">  #   red:     &#x27;#cc6666&#x27;</span><br><span class="line">  #   green:   &#x27;#b5bd68&#x27;</span><br><span class="line">  #   yellow:  &#x27;#f0c674&#x27;</span><br><span class="line">  #   blue:    &#x27;#81a2be&#x27;</span><br><span class="line">  #   magenta: &#x27;#b294bb&#x27;</span><br><span class="line">  #   cyan:    &#x27;#8abeb7&#x27;</span><br><span class="line">  #   white:   &#x27;#c5c8c6&#x27;</span><br><span class="line"></span><br><span class="line">  # # Bright colors</span><br><span class="line">  # bright:</span><br><span class="line">  #   black:   &#x27;#666666&#x27;</span><br><span class="line">  #   red:     &#x27;#d54e53&#x27;</span><br><span class="line">  #   green:   &#x27;#b9ca4a&#x27;</span><br><span class="line">  #   yellow:  &#x27;#e7c547&#x27;</span><br><span class="line">  #   blue:    &#x27;#7aa6da&#x27;</span><br><span class="line">  #   magenta: &#x27;#c397d8&#x27;</span><br><span class="line">  #   cyan:    &#x27;#70c0b1&#x27;</span><br><span class="line">  #   white:   &#x27;#eaeaea&#x27;</span><br><span class="line"></span><br><span class="line">  # # Dim colors</span><br><span class="line">  # #</span><br><span class="line">  # # If the dim colors are not set, they will be calculated automatically based</span><br><span class="line">  # # on the `normal` colors.</span><br><span class="line">  # dim:</span><br><span class="line">  #   black:   &#x27;#131415&#x27;</span><br><span class="line">  #   red:     &#x27;#864343&#x27;</span><br><span class="line">  #   green:   &#x27;#777c44&#x27;</span><br><span class="line">  #   yellow:  &#x27;#9e824c&#x27;</span><br><span class="line">  #   blue:    &#x27;#556a7d&#x27;</span><br><span class="line">  #   magenta: &#x27;#75617b&#x27;</span><br><span class="line">  #   cyan:    &#x27;#5b7d78&#x27;</span><br><span class="line">  #   white:   &#x27;#828482&#x27;</span><br><span class="line"></span><br><span class="line">  # Indexed Colors</span><br><span class="line">  #</span><br><span class="line">  # The indexed colors include all colors from 16 to 256.</span><br><span class="line">  # When these are not set, they&#x27;re filled with sensible defaults.</span><br><span class="line">  #</span><br><span class="line">  # Example:</span><br><span class="line">  #   `- &#123; index: 16, color: &#x27;#ff00ff&#x27; &#125;`</span><br><span class="line">  #</span><br><span class="line">  #indexed_colors: []</span><br><span class="line"></span><br><span class="line"># Bell</span><br><span class="line">#</span><br><span class="line"># The bell is rung every time the BEL control character is received.</span><br><span class="line">#bell:</span><br><span class="line">  # Visual Bell Animation</span><br><span class="line">  #</span><br><span class="line">  # Animation effect for flashing the screen when the visual bell is rung.</span><br><span class="line">  #</span><br><span class="line">  # Values for `animation`:</span><br><span class="line">  #   - Ease</span><br><span class="line">  #   - EaseOut</span><br><span class="line">  #   - EaseOutSine</span><br><span class="line">  #   - EaseOutQuad</span><br><span class="line">  #   - EaseOutCubic</span><br><span class="line">  #   - EaseOutQuart</span><br><span class="line">  #   - EaseOutQuint</span><br><span class="line">  #   - EaseOutExpo</span><br><span class="line">  #   - EaseOutCirc</span><br><span class="line">  #   - Linear</span><br><span class="line">  #animation: EaseOutExpo</span><br><span class="line"></span><br><span class="line">  # Duration of the visual bell flash in milliseconds. A `duration` of `0` will</span><br><span class="line">  # disable the visual bell animation.</span><br><span class="line">  #duration: 0</span><br><span class="line"></span><br><span class="line">  # Visual bell animation color.</span><br><span class="line">  #color: &#x27;#ffffff&#x27;</span><br><span class="line"></span><br><span class="line">  # Bell Command</span><br><span class="line">  #</span><br><span class="line">  # This program is executed whenever the bell is rung.</span><br><span class="line">  #</span><br><span class="line">  # When set to `command: None`, no command will be executed.</span><br><span class="line">  #</span><br><span class="line">  # Example:</span><br><span class="line">  #   command:</span><br><span class="line">  #     program: notify-send</span><br><span class="line">  #     args: [&quot;Hello, World!&quot;]</span><br><span class="line">  #</span><br><span class="line">  #command: None</span><br><span class="line"></span><br><span class="line"># Background opacity</span><br><span class="line">#</span><br><span class="line"># Window opacity as a floating point number from `0.0` to `1.0`.</span><br><span class="line"># The value `0.0` is completely transparent and `1.0` is opaque.</span><br><span class="line">background_opacity: 0.99</span><br><span class="line"></span><br><span class="line">#selection:</span><br><span class="line">  # This string contains all characters that are used as separators for</span><br><span class="line">  # &quot;semantic words&quot; in Alacritty.</span><br><span class="line">  #semantic_escape_chars: &quot;,│`|:\&quot;&#x27; ()[]&#123;&#125;&lt;&gt;\t&quot;</span><br><span class="line"></span><br><span class="line">  # When set to `true`, selected text will be copied to the primary clipboard.</span><br><span class="line">  #save_to_clipboard: false</span><br><span class="line"></span><br><span class="line">#cursor:</span><br><span class="line">  # Cursor style</span><br><span class="line">  #style:</span><br><span class="line">    # Cursor shape</span><br><span class="line">    #</span><br><span class="line">    # Values for `shape`:</span><br><span class="line">    #   - ▇ Block</span><br><span class="line">    #   - _ Underline</span><br><span class="line">    #   - | Beam</span><br><span class="line">    #shape: Block</span><br><span class="line"></span><br><span class="line">    # Cursor blinking state</span><br><span class="line">    #</span><br><span class="line">    # Values for `blinking`:</span><br><span class="line">    #   - Never: Prevent the cursor from ever blinking</span><br><span class="line">    #   - Off: Disable blinking by default</span><br><span class="line">    #   - On: Enable blinking by default</span><br><span class="line">    #   - Always: Force the cursor to always blink</span><br><span class="line">    #blinking: Off</span><br><span class="line"></span><br><span class="line">  # Vi mode cursor style</span><br><span class="line">  #</span><br><span class="line">  # If the vi mode cursor style is `None` or not specified, it will fall back to</span><br><span class="line">  # the style of the active value of the normal cursor.</span><br><span class="line">  #</span><br><span class="line">  # See `cursor.style` for available options.</span><br><span class="line">  #vi_mode_style: None</span><br><span class="line"></span><br><span class="line">  # Cursor blinking interval in milliseconds.</span><br><span class="line">  #blink_interval: 750</span><br><span class="line"></span><br><span class="line">  # If this is `true`, the cursor will be rendered as a hollow box when the</span><br><span class="line">  # window is not focused.</span><br><span class="line">  #unfocused_hollow: true</span><br><span class="line"></span><br><span class="line">  # Thickness of the cursor relative to the cell width as floating point number</span><br><span class="line">  # from `0.0` to `1.0`.</span><br><span class="line">  #thickness: 0.15</span><br><span class="line"></span><br><span class="line"># Live config reload (changes require restart)</span><br><span class="line">#live_config_reload: true</span><br><span class="line"></span><br><span class="line"># Shell</span><br><span class="line">#</span><br><span class="line"># You can set `shell.program` to the path of your favorite shell, e.g.</span><br><span class="line"># `/bin/fish`. Entries in `shell.args` are passed unmodified as arguments to the</span><br><span class="line"># shell.</span><br><span class="line">#</span><br><span class="line"># Default:</span><br><span class="line">#   - (macOS) /bin/bash --login</span><br><span class="line">#   - (Linux/BSD) user login shell</span><br><span class="line">#   - (Windows) powershell</span><br><span class="line">#shell:</span><br><span class="line">#  program: /bin/bash</span><br><span class="line">#  args:</span><br><span class="line">#    - --login</span><br><span class="line"></span><br><span class="line"># Startup directory</span><br><span class="line">#</span><br><span class="line"># Directory the shell is started in. If this is unset, or `None`, the working</span><br><span class="line"># directory of the parent process will be used.</span><br><span class="line">#working_directory: None</span><br><span class="line"></span><br><span class="line"># Send ESC (\x1b) before characters when alt is pressed.</span><br><span class="line">#alt_send_esc: true</span><br><span class="line"></span><br><span class="line">#mouse:</span><br><span class="line">  # Click settings</span><br><span class="line">  #</span><br><span class="line">  # The `double_click` and `triple_click` settings control the time</span><br><span class="line">  # alacritty should wait for accepting multiple clicks as one double</span><br><span class="line">  # or triple click.</span><br><span class="line">  #double_click: &#123; threshold: 300 &#125;</span><br><span class="line">  #triple_click: &#123; threshold: 300 &#125;</span><br><span class="line"></span><br><span class="line">  # If this is `true`, the cursor is temporarily hidden when typing.</span><br><span class="line">  #hide_when_typing: false</span><br><span class="line"></span><br><span class="line">  #url:</span><br><span class="line">    # URL launcher</span><br><span class="line">    #</span><br><span class="line">    # This program is executed when clicking on a text which is recognized as a</span><br><span class="line">    # URL. The URL is always added to the command as the last parameter.</span><br><span class="line">    #</span><br><span class="line">    # When set to `launcher: None`, URL launching will be disabled completely.</span><br><span class="line">    #</span><br><span class="line">    # Default:</span><br><span class="line">    #   - (macOS) open</span><br><span class="line">    #   - (Linux/BSD) xdg-open</span><br><span class="line">    #   - (Windows) cmd /c start &quot;&quot;</span><br><span class="line">    #launcher:</span><br><span class="line">    #  program: xdg-open</span><br><span class="line">    #  args: []</span><br><span class="line"></span><br><span class="line">    # URL modifiers</span><br><span class="line">    #</span><br><span class="line">    # These are the modifiers that need to be held down for opening URLs when</span><br><span class="line">    # clicking on them. The available modifiers are documented in the key</span><br><span class="line">    # binding section.</span><br><span class="line">    #modifiers: None</span><br><span class="line"></span><br><span class="line"># Regex hints</span><br><span class="line">#</span><br><span class="line"># Terminal hints can be used to find text in the visible part of the terminal</span><br><span class="line"># and pipe it to other applications.</span><br><span class="line">#hints:</span><br><span class="line">  # Keys used for the hint labels.</span><br><span class="line">  #alphabet: &quot;jfkdls;ahgurieowpq&quot;</span><br><span class="line"></span><br><span class="line">  # List with all available hints</span><br><span class="line">  #</span><br><span class="line">  # The fields `command`, `binding.key` and `binding.mods` accept the same</span><br><span class="line">  # values as they do in the `key_bindings` section.</span><br><span class="line">  #</span><br><span class="line">  # Example</span><br><span class="line">  #</span><br><span class="line">  # enabled:</span><br><span class="line">  #   - regex: &quot;alacritty/alacritty#\\d*&quot;</span><br><span class="line">  #     command: firefox</span><br><span class="line">  #     binding:</span><br><span class="line">  #       key: G</span><br><span class="line">  #       mods: Control|Shift</span><br><span class="line">  #enabled: []</span><br><span class="line"></span><br><span class="line"># Mouse bindings</span><br><span class="line">#</span><br><span class="line"># Mouse bindings are specified as a list of objects, much like the key</span><br><span class="line"># bindings further below.</span><br><span class="line">#</span><br><span class="line"># To trigger mouse bindings when an application running within Alacritty</span><br><span class="line"># captures the mouse, the `Shift` modifier is automatically added as a</span><br><span class="line"># requirement.</span><br><span class="line">#</span><br><span class="line"># Each mouse binding will specify a:</span><br><span class="line">#</span><br><span class="line"># - `mouse`:</span><br><span class="line">#</span><br><span class="line">#   - Middle</span><br><span class="line">#   - Left</span><br><span class="line">#   - Right</span><br><span class="line">#   - Numeric identifier such as `5`</span><br><span class="line">#</span><br><span class="line"># - `action` (see key bindings)</span><br><span class="line">#</span><br><span class="line"># And optionally:</span><br><span class="line">#</span><br><span class="line"># - `mods` (see key bindings)</span><br><span class="line">#mouse_bindings:</span><br><span class="line">#  - &#123; mouse: Middle, action: PasteSelection &#125;</span><br><span class="line"></span><br><span class="line"># Key bindings</span><br><span class="line">#</span><br><span class="line"># Key bindings are specified as a list of objects. For example, this is the</span><br><span class="line"># default paste binding:</span><br><span class="line">#</span><br><span class="line"># `- &#123; key: V, mods: Control|Shift, action: Paste &#125;`</span><br><span class="line">#</span><br><span class="line"># Each key binding will specify a:</span><br><span class="line">#</span><br><span class="line"># - `key`: Identifier of the key pressed</span><br><span class="line">#</span><br><span class="line">#    - A-Z</span><br><span class="line">#    - F1-F24</span><br><span class="line">#    - Key0-Key9</span><br><span class="line">#</span><br><span class="line">#    A full list with available key codes can be found here:</span><br><span class="line">#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants</span><br><span class="line">#</span><br><span class="line">#    Instead of using the name of the keys, the `key` field also supports using</span><br><span class="line">#    the scancode of the desired key. Scancodes have to be specified as a</span><br><span class="line">#    decimal number. This command will allow you to display the hex scancodes</span><br><span class="line">#    for certain keys:</span><br><span class="line">#</span><br><span class="line">#       `showkey --scancodes`.</span><br><span class="line">#</span><br><span class="line"># Then exactly one of:</span><br><span class="line">#</span><br><span class="line"># - `chars`: Send a byte sequence to the running application</span><br><span class="line">#</span><br><span class="line">#    The `chars` field writes the specified string to the terminal. This makes</span><br><span class="line">#    it possible to pass escape sequences. To find escape codes for bindings</span><br><span class="line">#    like `PageUp` (`&quot;\x1b[5~&quot;`), you can run the command `showkey -a` outside</span><br><span class="line">#    of tmux. Note that applications use terminfo to map escape sequences back</span><br><span class="line">#    to keys. It is therefore required to update the terminfo when changing an</span><br><span class="line">#    escape sequence.</span><br><span class="line">#</span><br><span class="line"># - `action`: Execute a predefined action</span><br><span class="line">#</span><br><span class="line">#   - ToggleViMode</span><br><span class="line">#   - SearchForward</span><br><span class="line">#       Start searching toward the right of the search origin.</span><br><span class="line">#   - SearchBackward</span><br><span class="line">#       Start searching toward the left of the search origin.</span><br><span class="line">#   - Copy</span><br><span class="line">#   - Paste</span><br><span class="line">#   - IncreaseFontSize</span><br><span class="line">#   - DecreaseFontSize</span><br><span class="line">#   - ResetFontSize</span><br><span class="line">#   - ScrollPageUp</span><br><span class="line">#   - ScrollPageDown</span><br><span class="line">#   - ScrollHalfPageUp</span><br><span class="line">#   - ScrollHalfPageDown</span><br><span class="line">#   - ScrollLineUp</span><br><span class="line">#   - ScrollLineDown</span><br><span class="line">#   - ScrollToTop</span><br><span class="line">#   - ScrollToBottom</span><br><span class="line">#   - ClearHistory</span><br><span class="line">#       Remove the terminal&#x27;s scrollback history.</span><br><span class="line">#   - Hide</span><br><span class="line">#       Hide the Alacritty window.</span><br><span class="line">#   - Minimize</span><br><span class="line">#       Minimize the Alacritty window.</span><br><span class="line">#   - Quit</span><br><span class="line">#       Quit Alacritty.</span><br><span class="line">#   - ToggleFullscreen</span><br><span class="line">#   - SpawnNewInstance</span><br><span class="line">#       Spawn a new instance of Alacritty.</span><br><span class="line">#   - ClearLogNotice</span><br><span class="line">#       Clear Alacritty&#x27;s UI warning and error notice.</span><br><span class="line">#   - ClearSelection</span><br><span class="line">#       Remove the active selection.</span><br><span class="line">#   - ReceiveChar</span><br><span class="line">#   - None</span><br><span class="line">#</span><br><span class="line"># - Vi mode exclusive actions:</span><br><span class="line">#</span><br><span class="line">#   - Open</span><br><span class="line">#       Open URLs at the cursor location with the launcher configured in</span><br><span class="line">#       `url.launcher`.</span><br><span class="line">#   - ToggleNormalSelection</span><br><span class="line">#   - ToggleLineSelection</span><br><span class="line">#   - ToggleBlockSelection</span><br><span class="line">#   - ToggleSemanticSelection</span><br><span class="line">#       Toggle semantic selection based on `selection.semantic_escape_chars`.</span><br><span class="line">#</span><br><span class="line"># - Vi mode exclusive cursor motion actions:</span><br><span class="line">#</span><br><span class="line">#   - Up</span><br><span class="line">#       One line up.</span><br><span class="line">#   - Down</span><br><span class="line">#       One line down.</span><br><span class="line">#   - Left</span><br><span class="line">#       One character left.</span><br><span class="line">#   - Right</span><br><span class="line">#       One character right.</span><br><span class="line">#   - First</span><br><span class="line">#       First column, or beginning of the line when already at the first column.</span><br><span class="line">#   - Last</span><br><span class="line">#       Last column, or beginning of the line when already at the last column.</span><br><span class="line">#   - FirstOccupied</span><br><span class="line">#       First non-empty cell in this terminal row, or first non-empty cell of</span><br><span class="line">#       the line when already at the first cell of the row.</span><br><span class="line">#   - High</span><br><span class="line">#       Top of the screen.</span><br><span class="line">#   - Middle</span><br><span class="line">#       Center of the screen.</span><br><span class="line">#   - Low</span><br><span class="line">#       Bottom of the screen.</span><br><span class="line">#   - SemanticLeft</span><br><span class="line">#       Start of the previous semantically separated word.</span><br><span class="line">#   - SemanticRight</span><br><span class="line">#       Start of the next semantically separated word.</span><br><span class="line">#   - SemanticLeftEnd</span><br><span class="line">#       End of the previous semantically separated word.</span><br><span class="line">#   - SemanticRightEnd</span><br><span class="line">#       End of the next semantically separated word.</span><br><span class="line">#   - WordLeft</span><br><span class="line">#       Start of the previous whitespace separated word.</span><br><span class="line">#   - WordRight</span><br><span class="line">#       Start of the next whitespace separated word.</span><br><span class="line">#   - WordLeftEnd</span><br><span class="line">#       End of the previous whitespace separated word.</span><br><span class="line">#   - WordRightEnd</span><br><span class="line">#       End of the next whitespace separated word.</span><br><span class="line">#   - Bracket</span><br><span class="line">#       Character matching the bracket at the cursor&#x27;s location.</span><br><span class="line">#   - SearchNext</span><br><span class="line">#       Beginning of the next match.</span><br><span class="line">#   - SearchPrevious</span><br><span class="line">#       Beginning of the previous match.</span><br><span class="line">#   - SearchStart</span><br><span class="line">#       Start of the match to the left of the vi mode cursor.</span><br><span class="line">#   - SearchEnd</span><br><span class="line">#       End of the match to the right of the vi mode cursor.</span><br><span class="line">#</span><br><span class="line"># - Search mode exclusive actions:</span><br><span class="line">#   - SearchFocusNext</span><br><span class="line">#       Move the focus to the next search match.</span><br><span class="line">#   - SearchFocusPrevious</span><br><span class="line">#       Move the focus to the previous search match.</span><br><span class="line">#   - SearchConfirm</span><br><span class="line">#   - SearchCancel</span><br><span class="line">#   - SearchClear</span><br><span class="line">#       Reset the search regex.</span><br><span class="line">#   - SearchDeleteWord</span><br><span class="line">#       Delete the last word in the search regex.</span><br><span class="line">#   - SearchHistoryPrevious</span><br><span class="line">#       Go to the previous regex in the search history.</span><br><span class="line">#   - SearchHistoryNext</span><br><span class="line">#       Go to the next regex in the search history.</span><br><span class="line">#</span><br><span class="line"># - macOS exclusive actions:</span><br><span class="line">#   - ToggleSimpleFullscreen</span><br><span class="line">#       Enter fullscreen without occupying another space.</span><br><span class="line">#</span><br><span class="line"># - Linux/BSD exclusive actions:</span><br><span class="line">#</span><br><span class="line">#   - CopySelection</span><br><span class="line">#       Copy from the selection buffer.</span><br><span class="line">#   - PasteSelection</span><br><span class="line">#       Paste from the selection buffer.</span><br><span class="line">#</span><br><span class="line"># - `command`: Fork and execute a specified command plus arguments</span><br><span class="line">#</span><br><span class="line">#    The `command` field must be a map containing a `program` string and an</span><br><span class="line">#    `args` array of command line parameter strings. For example:</span><br><span class="line">#       `&#123; program: &quot;alacritty&quot;, args: [&quot;-e&quot;, &quot;vttest&quot;] &#125;`</span><br><span class="line">#</span><br><span class="line"># And optionally:</span><br><span class="line">#</span><br><span class="line"># - `mods`: Key modifiers to filter binding actions</span><br><span class="line">#</span><br><span class="line">#    - Command</span><br><span class="line">#    - Control</span><br><span class="line">#    - Option</span><br><span class="line">#    - Super</span><br><span class="line">#    - Shift</span><br><span class="line">#    - Alt</span><br><span class="line">#</span><br><span class="line">#    Multiple `mods` can be combined using `|` like this:</span><br><span class="line">#       `mods: Control|Shift`.</span><br><span class="line">#    Whitespace and capitalization are relevant and must match the example.</span><br><span class="line">#</span><br><span class="line"># - `mode`: Indicate a binding for only specific terminal reported modes</span><br><span class="line">#</span><br><span class="line">#    This is mainly used to send applications the correct escape sequences</span><br><span class="line">#    when in different modes.</span><br><span class="line">#</span><br><span class="line">#    - AppCursor</span><br><span class="line">#    - AppKeypad</span><br><span class="line">#    - Search</span><br><span class="line">#    - Alt</span><br><span class="line">#    - Vi</span><br><span class="line">#</span><br><span class="line">#    A `~` operator can be used before a mode to apply the binding whenever</span><br><span class="line">#    the mode is *not* active, e.g. `~Alt`.</span><br><span class="line">#</span><br><span class="line"># Bindings are always filled by default, but will be replaced when a new</span><br><span class="line"># binding with the same triggers is defined. To unset a default binding, it can</span><br><span class="line"># be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for</span><br><span class="line"># a no-op if you do not wish to receive input characters for that binding.</span><br><span class="line">#</span><br><span class="line"># If the same trigger is assigned to multiple actions, all of them are executed</span><br><span class="line"># in the order they were defined in.</span><br><span class="line">#key_bindings:</span><br><span class="line">  #- &#123; key: Paste,                                       action: Paste          &#125;</span><br><span class="line">  #- &#123; key: Copy,                                        action: Copy           &#125;</span><br><span class="line">  #- &#123; key: L,         mods: Control,                    action: ClearLogNotice &#125;</span><br><span class="line">  #- &#123; key: L,         mods: Control, mode: ~Vi|~Search, chars: &quot;\x0c&quot;          &#125;</span><br><span class="line">  #- &#123; key: PageUp,    mods: Shift,   mode: ~Alt,        action: ScrollPageUp,  &#125;</span><br><span class="line">  #- &#123; key: PageDown,  mods: Shift,   mode: ~Alt,        action: ScrollPageDown &#125;</span><br><span class="line">  #- &#123; key: Home,      mods: Shift,   mode: ~Alt,        action: ScrollToTop,   &#125;</span><br><span class="line">  #- &#123; key: End,       mods: Shift,   mode: ~Alt,        action: ScrollToBottom &#125;</span><br><span class="line"></span><br><span class="line">  # Vi Mode</span><br><span class="line">  #- &#123; key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom          &#125;</span><br><span class="line">  #- &#123; key: Space,  mods: Shift|Control, mode: ~Search,    action: ToggleViMode            &#125;</span><br><span class="line">  #- &#123; key: Escape,                      mode: Vi|~Search, action: ClearSelection          &#125;</span><br><span class="line">  #- &#123; key: I,                           mode: Vi|~Search, action: ScrollToBottom          &#125;</span><br><span class="line">  #- &#123; key: I,                           mode: Vi|~Search, action: ToggleViMode            &#125;</span><br><span class="line">  #- &#123; key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            &#125;</span><br><span class="line">  #- &#123; key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            &#125;</span><br><span class="line">  #- &#123; key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          &#125;</span><br><span class="line">  #- &#123; key: G,                           mode: Vi|~Search, action: ScrollToTop             &#125;</span><br><span class="line">  #- &#123; key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          &#125;</span><br><span class="line">  #- &#123; key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            &#125;</span><br><span class="line">  #- &#123; key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          &#125;</span><br><span class="line">  #- &#123; key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        &#125;</span><br><span class="line">  #- &#123; key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      &#125;</span><br><span class="line">  #- &#123; key: Y,                           mode: Vi|~Search, action: Copy                    &#125;</span><br><span class="line">  #- &#123; key: Y,                           mode: Vi|~Search, action: ClearSelection          &#125;</span><br><span class="line">  #- &#123; key: Copy,                        mode: Vi|~Search, action: ClearSelection          &#125;</span><br><span class="line">  #- &#123; key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   &#125;</span><br><span class="line">  #- &#123; key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     &#125;</span><br><span class="line">  #- &#123; key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    &#125;</span><br><span class="line">  #- &#123; key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection &#125;</span><br><span class="line">  #- &#123; key: Return,                      mode: Vi|~Search, action: Open                    &#125;</span><br><span class="line">  #- &#123; key: K,                           mode: Vi|~Search, action: Up                      &#125;</span><br><span class="line">  #- &#123; key: J,                           mode: Vi|~Search, action: Down                    &#125;</span><br><span class="line">  #- &#123; key: H,                           mode: Vi|~Search, action: Left                    &#125;</span><br><span class="line">  #- &#123; key: L,                           mode: Vi|~Search, action: Right                   &#125;</span><br><span class="line">  #- &#123; key: Up,                          mode: Vi|~Search, action: Up                      &#125;</span><br><span class="line">  #- &#123; key: Down,                        mode: Vi|~Search, action: Down                    &#125;</span><br><span class="line">  #- &#123; key: Left,                        mode: Vi|~Search, action: Left                    &#125;</span><br><span class="line">  #- &#123; key: Right,                       mode: Vi|~Search, action: Right                   &#125;</span><br><span class="line">  #- &#123; key: Key0,                        mode: Vi|~Search, action: First                   &#125;</span><br><span class="line">  #- &#123; key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    &#125;</span><br><span class="line">  #- &#123; key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           &#125;</span><br><span class="line">  #- &#123; key: H,      mods: Shift,         mode: Vi|~Search, action: High                    &#125;</span><br><span class="line">  #- &#123; key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  &#125;</span><br><span class="line">  #- &#123; key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     &#125;</span><br><span class="line">  #- &#123; key: B,                           mode: Vi|~Search, action: SemanticLeft            &#125;</span><br><span class="line">  #- &#123; key: W,                           mode: Vi|~Search, action: SemanticRight           &#125;</span><br><span class="line">  #- &#123; key: E,                           mode: Vi|~Search, action: SemanticRightEnd        &#125;</span><br><span class="line">  #- &#123; key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                &#125;</span><br><span class="line">  #- &#123; key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               &#125;</span><br><span class="line">  #- &#123; key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            &#125;</span><br><span class="line">  #- &#123; key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 &#125;</span><br><span class="line">  #- &#123; key: Slash,                       mode: Vi|~Search, action: SearchForward           &#125;</span><br><span class="line">  #- &#123; key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          &#125;</span><br><span class="line">  #- &#123; key: N,                           mode: Vi|~Search, action: SearchNext              &#125;</span><br><span class="line">  #- &#123; key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          &#125;</span><br><span class="line"></span><br><span class="line">  # Search Mode</span><br><span class="line">  #- &#123; key: Return,                mode: Search|Vi,  action: SearchConfirm         &#125;</span><br><span class="line">  #- &#123; key: Escape,                mode: Search,     action: SearchCancel          &#125;</span><br><span class="line">  #- &#123; key: C,      mods: Control, mode: Search,     action: SearchCancel          &#125;</span><br><span class="line">  #- &#123; key: U,      mods: Control, mode: Search,     action: SearchClear           &#125;</span><br><span class="line">  #- &#123; key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      &#125;</span><br><span class="line">  #- &#123; key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious &#125;</span><br><span class="line">  #- &#123; key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     &#125;</span><br><span class="line">  #- &#123; key: Up,                    mode: Search,     action: SearchHistoryPrevious &#125;</span><br><span class="line">  #- &#123; key: Down,                  mode: Search,     action: SearchHistoryNext     &#125;</span><br><span class="line">  #- &#123; key: Return,                mode: Search|~Vi, action: SearchFocusNext       &#125;</span><br><span class="line">  #- &#123; key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   &#125;</span><br><span class="line"></span><br><span class="line">  # (Windows, Linux, and BSD only)</span><br><span class="line">  #- &#123; key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            &#125;</span><br><span class="line">  #- &#123; key: C,              mods: Control|Shift,                   action: Copy             &#125;</span><br><span class="line">  #- &#123; key: F,              mods: Control|Shift, mode: ~Search,    action: SearchForward    &#125;</span><br><span class="line">  #- &#123; key: B,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   &#125;</span><br><span class="line">  #- &#123; key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   &#125;</span><br><span class="line">  #- &#123; key: Insert,         mods: Shift,                           action: PasteSelection   &#125;</span><br><span class="line">  #- &#123; key: Key0,           mods: Control,                         action: ResetFontSize    &#125;</span><br><span class="line">  #- &#123; key: Equals,         mods: Control,                         action: IncreaseFontSize &#125;</span><br><span class="line">  #- &#123; key: Plus,           mods: Control,                         action: IncreaseFontSize &#125;</span><br><span class="line">  #- &#123; key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize &#125;</span><br><span class="line">  #- &#123; key: Minus,          mods: Control,                         action: DecreaseFontSize &#125;</span><br><span class="line">  #- &#123; key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize &#125;</span><br><span class="line"></span><br><span class="line">  # (Windows only)</span><br><span class="line">  #- &#123; key: Return,   mods: Alt,           action: ToggleFullscreen &#125;</span><br><span class="line"></span><br><span class="line">  # (macOS only)</span><br><span class="line">  #- &#123; key: K,              mods: Command, mode: ~Vi|~Search, chars: &quot;\x0c&quot;            &#125;</span><br><span class="line">  #- &#123; key: K,              mods: Command, mode: ~Vi|~Search, action: ClearHistory     &#125;</span><br><span class="line">  #- &#123; key: Key0,           mods: Command,                    action: ResetFontSize    &#125;</span><br><span class="line">  #- &#123; key: Equals,         mods: Command,                    action: IncreaseFontSize &#125;</span><br><span class="line">  #- &#123; key: Plus,           mods: Command,                    action: IncreaseFontSize &#125;</span><br><span class="line">  #- &#123; key: NumpadAdd,      mods: Command,                    action: IncreaseFontSize &#125;</span><br><span class="line">  #- &#123; key: Minus,          mods: Command,                    action: DecreaseFontSize &#125;</span><br><span class="line">  #- &#123; key: NumpadSubtract, mods: Command,                    action: DecreaseFontSize &#125;</span><br><span class="line">  #- &#123; key: V,              mods: Command,                    action: Paste            &#125;</span><br><span class="line">  #- &#123; key: C,              mods: Command,                    action: Copy             &#125;</span><br><span class="line">  #- &#123; key: C,              mods: Command, mode: Vi|~Search,  action: ClearSelection   &#125;</span><br><span class="line">  #- &#123; key: H,              mods: Command,                    action: Hide             &#125;</span><br><span class="line">  #- &#123; key: M,              mods: Command,                    action: Minimize         &#125;</span><br><span class="line">  #- &#123; key: Q,              mods: Command,                    action: Quit             &#125;</span><br><span class="line">  #- &#123; key: W,              mods: Command,                    action: Quit             &#125;</span><br><span class="line">  #- &#123; key: N,              mods: Command,                    action: SpawnNewInstance &#125;</span><br><span class="line">  #- &#123; key: F,              mods: Command|Control,            action: ToggleFullscreen &#125;</span><br><span class="line">  #- &#123; key: F,              mods: Command, mode: ~Search,     action: SearchForward    &#125;</span><br><span class="line">  #- &#123; key: B,              mods: Command, mode: ~Search,     action: SearchBackward   &#125;</span><br><span class="line"></span><br><span class="line">#debug:</span><br><span class="line">  # Display the time it takes to redraw each frame.</span><br><span class="line">  #render_timer: false</span><br><span class="line"></span><br><span class="line">  # Keep the log file after quitting Alacritty.</span><br><span class="line">  #persistent_logging: false</span><br><span class="line"></span><br><span class="line">  # Log level</span><br><span class="line">  #</span><br><span class="line">  # Values for `log_level`:</span><br><span class="line">  #   - Off</span><br><span class="line">  #   - Error</span><br><span class="line">  #   - Warn</span><br><span class="line">  #   - Info</span><br><span class="line">  #   - Debug</span><br><span class="line">  #   - Trace</span><br><span class="line">  #log_level: Warn</span><br><span class="line"></span><br><span class="line">  # Print all received window events.</span><br><span class="line">  #print_events: false</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>case-and-tab</title>
    <url>/2021/04/13/linux/linux/case-and-tab/</url>
    <content><![CDATA[<h2 id="终端忽略大小写"><a href="#终端忽略大小写" class="headerlink" title="终端忽略大小写"></a>终端忽略大小写</h2><p><code>~/.inputrc</code>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set completion-ignore-case on</span><br></pre></td></tr></table></figure>

<h2 id="Tab自动补全"><a href="#Tab自动补全" class="headerlink" title="Tab自动补全"></a>Tab自动补全</h2><p><code>/etc/bash.bashrc</code>, 找到以下代码，取消注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#enable bash completion in interactive shells</span><br><span class="line">#if ! shopt -oq posix; then</span><br><span class="line">#      if [-f  /usr/share/bash-completion/bash_completion ]; then</span><br><span class="line">#          . /usr/share/bash-completion/bash_completion</span><br><span class="line">#      elif [ -f /etc/bash_completion]; then</span><br><span class="line">#           . /etc/bash_completion</span><br><span class="line">#      fi</span><br><span class="line">#fi</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>chown-chgrp</title>
    <url>/2021/04/13/linux/linux/chown-chgrp/</url>
    <content><![CDATA[<p><strong>reference</strong>: <a href="https://www.cnblogs.com/wanglijun/p/8657809.html">https://www.cnblogs.com/wanglijun/p/8657809.html</a></p>
<h2 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h2><ol>
<li><p>chgrp：更改文件属组</p>
<p> 语法：</p>
<p> chgrp [-R] 属组名文件名</p>
<p> 参数选项</p>
<p> -R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p>
<p>  如: </p>
<p> chgrp -R daokr test  更改 test的 目录属于组daokr  但是daokr用户无法修改该目录文件</p>
</li>
<li><p>chown：更改文件属主，也可以同时更改文件属组</p>
<p> 语法：</p>
<p> chown [–R] 属主名 文件名<br> chown [-R] 属主名：属组名 文件名</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>chown</tag>
        <tag>chgrp</tag>
      </tags>
  </entry>
  <entry>
    <title>报错：bash:no such file or directory</title>
    <url>/2021/04/13/linux/linux/bash-r-no-such-file-or-directory/</url>
    <content><![CDATA[<p><strong>reference</strong>: <a href="https://www.cnblogs.com/Cqlismy/p/12888768.html">https://www.cnblogs.com/Cqlismy/p/12888768.html</a></p>
<ul>
<li><p>提示： <code>/usr/bin/env: ‘bash\r’: No such file or directory</code></p>
</li>
<li><p>原因：文件格式</p>
</li>
<li><p>解决：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ nvim make.sh </span><br><span class="line"></span><br><span class="line">:set ff</span><br></pre></td></tr></table></figure>

<p>  显示：<code>fileformat=dos</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:set ff=unix</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>chsh-PAM-problem</title>
    <url>/2021/04/04/linux/linux/chsh-PAM-problem/</url>
    <content><![CDATA[<h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>更换shell遇到的问题</p>
<p>使用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[sudo] password for wadekiny:</span><br><span class="line">Password:</span><br><span class="line">chsh: PAM: Authentication failure</span><br></pre></td></tr></table></figure>

<p>让我输入了两次密码，然后提示验证失败。后发现去掉<code>sudo</code>后直接使用命令，不会出现错误</p>
<h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><ol>
<li>直接改<code>/etc/passwd</code>文件，找到<code>:/home/wadekiny:/bin/bash</code>(因人而异)</li>
<li>直接把bash改为zsh，重启后生效</li>
</ol>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>fzf 模糊文件查找</title>
    <url>/2022/07/09/linux/linux/fzf/</url>
    <content><![CDATA[<h1 id="安装-fzf"><a href="#安装-fzf" class="headerlink" title="安装 fzf"></a>安装 fzf</h1><p><img src="/./fzf/fzf.png" alt="fzf"></p>
<p><a href="https://github.com/junegunn/fzf#preview-window">https://github.com/junegunn/fzf#preview-window</a></p>
<h1 id="更改-为触发器"><a href="#更改-为触发器" class="headerlink" title="更改 \ 为触发器"></a>更改 <code>\</code> 为触发器</h1><p><code>~/.zshrc</code> 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export FZF_COMPLETION_TRIGGER=&#x27;\&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="预览功能"><a href="#预览功能" class="headerlink" title="预览功能"></a>预览功能</h1><h2 id="安装bat"><a href="#安装bat" class="headerlink" title="安装bat"></a>安装bat</h2><p><a href="https://github.com/sharkdp/bat">https://github.com/sharkdp/bat</a></p>
<h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p><code>~/.zshrc</code> 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export FZF_DEFAULT_OPTS=&#x27;--preview &quot;bat --style=numbers --color=always --line-range :500 &#123;&#125;&quot;&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="/./fzf/batpreview.png" alt="batpreview"></p>
<h1 id="搜索隐藏文件"><a href="#搜索隐藏文件" class="headerlink" title="搜索隐藏文件"></a>搜索隐藏文件</h1><h2 id="安装fd"><a href="#安装fd" class="headerlink" title="安装fd"></a>安装fd</h2><p><a href="https://github.com/sharkdp/fd">https://github.com/sharkdp/fd</a></p>
<h2 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h2><p><code>~/.zshrc</code> 中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export FZF_DEFAULT_COMMAND=&#x27;fd --type f --hidden --follow --exclude .git&#x27;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>fzf</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-blog搭建</title>
    <url>/2021/04/13/linux/linux/hexo-blog/</url>
    <content><![CDATA[<h1 id="Install-hexo-blog"><a href="#Install-hexo-blog" class="headerlink" title="Install hexo blog"></a>Install hexo blog</h1><ol>
<li><p>Install nodejs from here: <a href="http://nodejs.cn/">http://nodejs.cn/</a></p>
</li>
<li><p>Now we have a tool named <code>npm</code>, install <code>cnpm</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g cnpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir BLOG</span><br><span class="line">cd BLOG</span><br><span class="line">sudo cnpm install -g hexo</span><br></pre></td></tr></table></figure>
</li>
<li><p>Init and serve hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/BLOG</span><br><span class="line">hexo init </span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Some-functions-and-bugs"><a href="#Some-functions-and-bugs" class="headerlink" title="Some functions and bugs"></a>Some functions and bugs</h1><p><strong>NOTE: All operations (such as installing) are done in the BLOG directory</strong>: <code>~/BLOG</code></p>
<h2 id="Multi-folder-in-‘-post’"><a href="#Multi-folder-in-‘-post’" class="headerlink" title="Multi folder in ‘_post’"></a>Multi folder in ‘_post’</h2><p><img src="/./hexo-blog/multifolder.png" alt="multifolder"></p>
<h2 id="Latex"><a href="#Latex" class="headerlink" title="Latex"></a>Latex</h2><p><strong>reference</strong>: <a href="https://blog.csdn.net/crazy_scott/article/details/79293576">https://blog.csdn.net/crazy_scott/article/details/79293576</a></p>
<ol>
<li><p>Install a plugin</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-math --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>Change the rendering engine</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm uninstall hexo-renderer-marked --save</span><br><span class="line">cnpm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>Resolveing semantic conflicts between <code>Latex</code> and <code>Markdown</code></p>
<p> path: <code>node_modules\kramed\lib\rules\inline.js</code></p>
<p> line11:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br></pre></td></tr></table></figure>

<p> line20:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure>
</li>
<li><p>Edit config file</p>
<p> Edit <strong>theme’s</strong> <code>_congfig.yml</code>, modify or append it:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">enable: true</span><br><span class="line">per_page: true</span><br><span class="line">#cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span><br><span class="line">cdn: //cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure>

<p> In addition: I have append a piece of code in <code>~/BLOG/_config.yml</code>, it may be useful</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">enable: true</span><br><span class="line">per_page: true</span><br></pre></td></tr></table></figure>
</li>
<li><p>Write an article</p>
<p> remember to set <code>true</code> in the front-matter</p>
<p> for example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo-blog</span><br><span class="line">date: 2021-04-13 18:50:33</span><br><span class="line">tags: [hexo]</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Insert-Image"><a href="#Insert-Image" class="headerlink" title="Insert Image"></a>Insert Image</h2><p><strong>reference</strong>: <a href="https://www.jianshu.com/p/f72aaad7b852">https://www.jianshu.com/p/f72aaad7b852</a></p>
<ol>
<li>Install a plugin</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>Edit config file</p>
<p> Modify <strong>hexo’s</strong> <code>_config.yml</code> </p>
<p> set <code>post_asset_folder</code> to <code>true</code></p>
</li>
<li><p>Modify a piece of code</p>
<p> path: <code>node_modules/hexo-asset-image/index.js</code></p>
<p> Replace the content with the following code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">var cheerio = require(&#x27;cheerio&#x27;);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line">function getPosition(str, m, i) &#123;</span><br><span class="line">  return str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(&#x27;.&#x27;);</span><br><span class="line">hexo.extend.filter.register(&#x27;after_post_render&#x27;, function(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  if(config.post_asset_folder)&#123;</span><br><span class="line">        var link = data.permalink;</span><br><span class="line">    if(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(link, &#x27;/&#x27;, 1) + 1;</span><br><span class="line">    else</span><br><span class="line">       var beginPos = getPosition(link, &#x27;/&#x27;, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><br><span class="line">    var endPos = link.lastIndexOf(&#x27;/&#x27;) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [&#x27;excerpt&#x27;, &#x27;more&#x27;, &#x27;content&#x27;];</span><br><span class="line">    for(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"></span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: false,</span><br><span class="line">        xmlMode: false,</span><br><span class="line">        lowerCaseTags: false,</span><br><span class="line">        decodeEntities: false</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(&#x27;img&#x27;).each(function()&#123;</span><br><span class="line">        if ($(this).attr(&#x27;src&#x27;))&#123;</span><br><span class="line">            // For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span><br><span class="line">            var src = $(this).attr(&#x27;src&#x27;).replace(&#x27;\\&#x27;, &#x27;/&#x27;);</span><br><span class="line">            if(!/http[s]*.*|\/\/.*/.test(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.test(src)) &#123;</span><br><span class="line">              // For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span><br><span class="line">              // In addition, to support multi-level local directory.</span><br><span class="line">              var linkArray = link.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">                return elem != &#x27;&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              var srcArray = src.split(&#x27;/&#x27;).filter(function(elem)&#123;</span><br><span class="line">                return elem != &#x27;&#x27; &amp;&amp; elem != &#x27;.&#x27;;</span><br><span class="line">              &#125;);</span><br><span class="line">              if(srcArray.length &gt; 1)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(&#x27;/&#x27;);</span><br><span class="line">              $(this).attr(&#x27;src&#x27;, config.root + link + src);</span><br><span class="line">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span><br><span class="line">            console.info&amp;&amp;console.info($(this));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Delpoy-to-Github"><a href="#Delpoy-to-Github" class="headerlink" title="Delpoy to Github"></a>Delpoy to Github</h2><p><strong>reference</strong>: <a href="https://www.jianshu.com/p/e70b4ca63115">https://www.jianshu.com/p/e70b4ca63115</a></p>
<ol>
<li><p>Create a repository: <code>username.github.io</code></p>
</li>
<li><p>Modify the config file</p>
<p> <strong>hexo’s</strong> <code>_config.yml</code>, append this piece of code:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    #repo: https://gitee.com/wadekiny/wadekiny.gitee.io.git</span><br><span class="line">    repo: https://github.com/wadekiny/wadekiny.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
</li>
<li><p>Install a plugin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>Config git (username and email)</p>
</li>
<li><p>Run it</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Cursor-effect"><a href="#Cursor-effect" class="headerlink" title="Cursor effect"></a>Cursor effect</h2><p><strong>reference</strong>: <a href="https://blog.csdn.net/qq_42889280/article/details/103087564">https://blog.csdn.net/qq_42889280/article/details/103087564</a></p>
<p>In order to improve the response speed without using it.</p>
<h2 id="Animation-effect-NexT"><a href="#Animation-effect-NexT" class="headerlink" title="Animation effect (NexT)"></a>Animation effect (NexT)</h2><p>In order to improve the response speed without using it.</p>
<p>Modify <strong>NexT’s</strong> <code>_config.yml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">motion:</span><br><span class="line">    enable: false</span><br></pre></td></tr></table></figure>

<h2 id="Modify-article-area-width-NexT"><a href="#Modify-article-area-width-NexT" class="headerlink" title="Modify article area width (NexT)"></a>Modify article area width (NexT)</h2><p><strong>reference</strong>: <a href="https://blog.csdn.net/csdnSR/article/details/78300820">https://blog.csdn.net/csdnSR/article/details/78300820</a></p>
<p>Append to <code>~/BLOG/themes/next/source/css/_schemes/Pisces/_layout.styl</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">header&#123; width: 90% !important; &#125;</span><br><span class="line">header.post-header &#123;</span><br><span class="line">  width: auto !important;</span><br><span class="line">&#125;</span><br><span class="line">.container .main-inner &#123; width: 90%; &#125;</span><br><span class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</span><br><span class="line"></span><br><span class="line">.header &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.container .main-inner &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    width: auto !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content-wrap &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    width: 100% !important;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    width: 100% !important;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="‘Next-page’-display-problem"><a href="#‘Next-page’-display-problem" class="headerlink" title="‘Next page’ display problem"></a>‘Next page’ display problem</h2><p>Modify <code>~/BLOG/themes/next/layout/_partials/pagination.swig</code></p>
<p>Change to:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  &lt;nav class=&quot;pagination&quot;&gt;</span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: &#x27;&lt;&#x27;,</span><br><span class="line">        next_text: &#x27;&gt;&#x27;,</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Local-Search-Function"><a href="#Local-Search-Function" class="headerlink" title="Local Search Function"></a>Local Search Function</h2><ol>
<li><p>install the plugin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/BLOG</span><br><span class="line">cnpm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>modify the <code>_config.yml</code></p>
<p>append:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">     <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">     <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">     <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">     <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>modify the theme <code>_config.yml</code></p>
<p>find the <code>local search</code>, and set <code>enable</code> to <code>true</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">  <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="Config-themes"><a href="#Config-themes" class="headerlink" title="Config themes"></a>Config themes</h1><h2 id="Fluid-layout"><a href="#Fluid-layout" class="headerlink" title="Fluid layout"></a>Fluid layout</h2><p>open the blog website, press <code>F12</code> to see more details </p>
<p>delete the left-side-blank-bar:</p>
<p><code>BLOG/themes/hexo-theme-fluid/layout/post.ejs</code>line 9:<br>change <code>col-lg-2</code> to <code>col-lg-0</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;side-col d-none d-lg-block col-lg-0&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><code>BLOG/themes/hexo-theme-fluid/layout/post.ejs</code>line 88:<br>change <code>col-lg-2</code> to <code>col-lg-4</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;side-col d-none d-lg-block col-lg-4&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>before:<br><img src="/./hexo-blog/collg2.png" alt="collg2"></p>
<p>after:<br><img src="/./hexo-blog/collg0-4.png" alt="collg0-4"></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>init-vim</title>
    <url>/2021/04/13/linux/linux/init-vim/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let mapleader = &quot;;&quot;      &quot; 定义&lt;leader&gt;键</span><br><span class="line">set nocompatible         &quot; 设置不兼容原始vi模式</span><br><span class="line">filetype on              &quot; 设置开启文件类型侦测</span><br><span class="line">filetype plugin on       &quot; 设置加载对应文件类型的插件</span><br><span class="line">set noeb                 &quot; 关闭错误的提示</span><br><span class="line">syntax enable            &quot; 开启语法高亮功能</span><br><span class="line">set t_Co=256             &quot; 开启256色支持</span><br><span class="line">set cmdheight=1          &quot; 设置命令行的高度</span><br><span class="line">&quot;set cmdheight=2          &quot; 设置命令行的高度</span><br><span class="line">set showcmd              &quot; select模式下显示选中的行数</span><br><span class="line">set ruler                &quot; 总是显示光标位置</span><br><span class="line">set laststatus=2         &quot; 总是显示状态栏</span><br><span class="line">set number               &quot; 开启行号显示</span><br><span class="line">set relativenumber       &quot; 特殊行号</span><br><span class="line">set cursorline           &quot; 高亮显示当前行</span><br><span class="line">set whichwrap+=&lt;,&gt;,h,l   &quot; 设置光标键跨行</span><br><span class="line">set ttimeoutlen=100        &quot; 设置&lt;ESC&gt;键响应时间</span><br><span class="line">set virtualedit=block,onemore   &quot; 允许光标出现在最后一个字符的后面</span><br><span class="line">set mouse=a</span><br><span class="line">set hidden</span><br><span class="line">set updatetime=100</span><br><span class="line">set shortmess+=c</span><br><span class="line">set numberwidth=1</span><br><span class="line">set fdm=marker</span><br><span class="line">set scrolloff=5</span><br><span class="line">filetype plugin on</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; 代码缩进和排版</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">set autoindent           &quot; 设置自动缩进</span><br><span class="line">set cindent              &quot; 设置使用C/C++语言的自动缩进方式</span><br><span class="line">set cinoptions=g0,:0,N-s,(0    &quot; 设置C/C++语言的具体缩进方式</span><br><span class="line">set smartindent          &quot; 智能的选择对其方式</span><br><span class="line">filetype indent on       &quot; 自适应不同语言的智能缩进</span><br><span class="line">set expandtab            &quot; 将制表符扩展为空格</span><br><span class="line">set tabstop=4            &quot; 设置编辑时制表符占用空格数</span><br><span class="line">set shiftwidth=4         &quot; 设置格式化时制表符占用空格数</span><br><span class="line">set softtabstop=4        &quot; 设置4个空格为制表符 set smarttab             &quot; 在行和段开始处使用制表符 set wrap                 &quot; 折行</span><br><span class="line">set backspace=2          &quot; 使用回车键正常处理indent,eol,start等</span><br><span class="line">set sidescroll=10        &quot; 设置向右滚动字符数</span><br><span class="line">set nofoldenable         &quot; 禁用折叠代码</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; 代码补全</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">set wildmenu             &quot; vim自身命名行模式智能补全</span><br><span class="line">set completeopt-=preview &quot; 补全时不显示窗口，只显示补全列表</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; 搜索设置</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">set hlsearch            &quot; 高亮显示搜索结果</span><br><span class="line">set incsearch           &quot; 开启实时搜索功能</span><br><span class="line">set ignorecase          &quot; 搜索时大小写不敏感</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; 缓存设置</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">set nobackup            &quot; 设置不备份</span><br><span class="line">set noswapfile          &quot; 禁止生成临时文件</span><br><span class="line">set autoread            &quot; 文件在vim之外修改过，自动重新读入</span><br><span class="line">set autowrite           &quot; 设置自动保存</span><br><span class="line">set confirm             &quot; 在处理未保存或只读文件的时候，弹出确认</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; 编码设置</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">set langmenu=zh_CN.UTF-8</span><br><span class="line">set helplang=cn</span><br><span class="line">set termencoding=utf-8</span><br><span class="line">set encoding=utf8</span><br><span class="line">set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030</span><br><span class="line"></span><br><span class="line">&quot;记住上次位置</span><br><span class="line">au BufReadPost * if line(&quot;&#x27;\&quot;&quot;) &gt; 1 &amp;&amp; line(&quot;&#x27;\&quot;&quot;) &lt;= line(&quot;$&quot;) | exe &quot;normal! g&#x27;\&quot;&quot; | endif</span><br><span class="line"></span><br><span class="line">&quot;撤销记忆</span><br><span class="line">if has(&#x27;persistent_undo&#x27;)</span><br><span class="line">	set undofile</span><br><span class="line">	set undodir=~/.config/nvim/tmp/undo,.</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;pluginstall</span><br><span class="line">call plug#begin(&#x27;~/.config/nvim/plugged&#x27;)</span><br><span class="line">&quot;input-------------------------------</span><br><span class="line">Plug &#x27;vim-scripts/fcitx.vim&#x27;</span><br><span class="line">Plug &#x27;easymotion/vim-easymotion&#x27;</span><br><span class="line">Plug &#x27;jiangmiao/auto-pairs&#x27;</span><br><span class="line">Plug &#x27;junegunn/vim-peekaboo&#x27;</span><br><span class="line">Plug &#x27;mg979/vim-visual-multi&#x27;</span><br><span class="line">Plug &#x27;gcmt/wildfire.vim&#x27;</span><br><span class="line">Plug &#x27;tpope/vim-surround&#x27;</span><br><span class="line"></span><br><span class="line">&quot;display-------------------------------</span><br><span class="line">Plug &#x27;scrooloose/nerdtree&#x27;</span><br><span class="line">Plug &#x27;vim-airline/vim-airline&#x27;</span><br><span class="line">&quot;Plug &#x27;vim-airline/vim-airline-themes&#x27;</span><br><span class="line">&quot;Plug &#x27;itchyny/lightline.vim&#x27;</span><br><span class="line">Plug &#x27;kevinhwang91/rnvimr&#x27;</span><br><span class="line"></span><br><span class="line">&quot;themes</span><br><span class="line">Plug &#x27;joshdick/onedark.vim&#x27;</span><br><span class="line">Plug &#x27;tomasr/molokai&#x27;</span><br><span class="line">Plug &#x27;altercation/vim-colors-solarized&#x27;</span><br><span class="line">Plug &#x27;KabbAmine/yowish.vim&#x27;</span><br><span class="line"></span><br><span class="line">Plug &#x27;ryanoasis/vim-devicons&#x27;</span><br><span class="line">Plug &#x27;machakann/vim-highlightedyank&#x27;</span><br><span class="line">Plug &#x27;preservim/tagbar&#x27;</span><br><span class="line">Plug &#x27;jszakmeister/markdown2ctags&#x27; &quot;(use pip to install, it&#x27;s not a vim plugin)</span><br><span class="line"></span><br><span class="line">&quot; problem</span><br><span class="line">Plug &#x27;lvht/tagbar-markdown&#x27;</span><br><span class="line">Plug &#x27;xolox/vim-misc&#x27;</span><br><span class="line">Plug &#x27;xolox/vim-easytags&#x27;</span><br><span class="line"></span><br><span class="line">&quot;complete---------------------------</span><br><span class="line">&quot;Plug &#x27;Valloric/YouCompleteMe&#x27;</span><br><span class="line">Plug &#x27;neoclide/coc.nvim&#x27;, &#123;&#x27;branch&#x27;: &#x27;release&#x27;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;markdown---------------------------</span><br><span class="line">&quot;Plug &#x27;iamcco/markdown-preview.nvim&#x27;, &#123; &#x27;do&#x27;: &#x27;cd app &amp;&amp; yarn install&#x27;  &#125;</span><br><span class="line">Plug &#x27;iamcco/markdown-preview.nvim&#x27;, &#123; &#x27;do&#x27;: &#123; -&gt; mkdp#util#install() &#125;, &#x27;for&#x27;: [&#x27;markdown&#x27;, &#x27;vim-plug&#x27;]&#125;</span><br><span class="line">Plug &#x27;godlygeek/tabular&#x27;</span><br><span class="line">Plug &#x27;plasticboy/vim-markdown&#x27; </span><br><span class="line">Plug &#x27;dhruvasagar/vim-table-mode&#x27;</span><br><span class="line">Plug &#x27;mzlogin/vim-markdown-toc&#x27;</span><br><span class="line">Plug &#x27;ferrine/md-img-paste.vim&#x27;</span><br><span class="line">&quot;Plug &#x27;suan/vim-instant-markdown&#x27;, &#123;&#x27;for&#x27;: &#x27;markdown&#x27;&#125;</span><br><span class="line">&quot;Plug &#x27;iamcco/mathjax-support-for-mkdp&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line">&quot;coc install</span><br><span class="line">let g:coc_global_extensions = [</span><br><span class="line">    \&#x27;coc-marketplace&#x27;, </span><br><span class="line">    \&#x27;coc-json&#x27;, </span><br><span class="line">    \&#x27;coc-clangd&#x27;,</span><br><span class="line">    \&#x27;coc-vimlsp&#x27;,</span><br><span class="line">    \&#x27;coc-actions&#x27;,</span><br><span class="line">    \&#x27;coc-pyright&#x27;,</span><br><span class="line">    \]</span><br><span class="line">&quot;\&#x27;coc-pyright&#x27;,</span><br><span class="line">&quot;\&#x27;coc-jedi&#x27;,</span><br><span class="line"></span><br><span class="line"> &quot;vim-highlightedyank</span><br><span class="line">let g:highlightedyank_highlight_duration = 400</span><br><span class="line"></span><br><span class="line">&quot; colod-theme</span><br><span class="line">&quot;</span><br><span class="line">set background=dark</span><br><span class="line"></span><br><span class="line">colorscheme yowish </span><br><span class="line">let g:yowish = &#123;&#125;</span><br><span class="line">let g:yowish.option1 = &#x27;foo&#x27;</span><br><span class="line">let g:yowish.option2 = 0</span><br><span class="line"></span><br><span class="line">&quot;</span><br><span class="line">&quot;let g:onedark_termcolors=256</span><br><span class="line">&quot;colorscheme onedark </span><br><span class="line">&quot;</span><br><span class="line">&quot;colorscheme molokai </span><br><span class="line">&quot;let g:rehash256 = 1</span><br><span class="line">&quot;let g:molokai_original = 1</span><br><span class="line">&quot;</span><br><span class="line">&quot;colorscheme desert</span><br><span class="line">&quot;</span><br><span class="line">&quot;let g:solarized_termcolors=256</span><br><span class="line">&quot;colorscheme solarized </span><br><span class="line"></span><br><span class="line">&quot;&quot; airline</span><br><span class="line">&quot;let g:airline_theme=&quot;onedark&quot;</span><br><span class="line">let g:airline_powerline_fonts = 1</span><br><span class="line">let g:airline#extensions#tabline#enabled = 1</span><br><span class="line">if !exists(&#x27;g:airline_symbols&#x27;)</span><br><span class="line">    let g:airline_symbols = &#123;&#125;</span><br><span class="line">endif</span><br><span class="line">&quot;&quot;insert mode, press &lt;c-v&gt;u + 4-digit code</span><br><span class="line">&quot;&quot;in alacritty, size = 15, offset: y=5, icons work fine</span><br><span class="line">let g:airline_left_sep = &#x27;&#x27;</span><br><span class="line">&quot;let g:airline_left_alt_sep = &#x27;&#x27;</span><br><span class="line">&quot;let g:airline_right_sep = &#x27;&#x27;</span><br><span class="line">&quot;let g:airline_right_alt_sep = &#x27;&#x27;</span><br><span class="line">&quot;</span><br><span class="line">&quot;let g:airline_left_sep = &#x27;&#x27;</span><br><span class="line">&quot;let g:airline_right_alt_sep = &#x27;|&#x27;</span><br><span class="line">&quot;</span><br><span class="line">&quot;let g:airline_left_sep = &#x27;&#x27;</span><br><span class="line">&quot;let g:airline_left_alt_sep = &#x27;&#x27;</span><br><span class="line">&quot;let g:airline_right_sep = &#x27;&#x27;</span><br><span class="line">&quot;let g:airline_right_sep = &#x27;&#x27;</span><br><span class="line">&quot;let g:airline_right_alt_sep = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&quot; 24color</span><br><span class="line">if (empty($TMUX))</span><br><span class="line">  if (has(&quot;nvim&quot;))</span><br><span class="line">    &quot;For Neovim 0.1.3 and 0.1.4 &lt; https://github.com/neovim/neovim/pull/2198 &gt;</span><br><span class="line">    let $NVIM_TUI_ENABLE_TRUE_COLOR=1</span><br><span class="line">  endif</span><br><span class="line">  &quot;For Neovim &gt; 0.1.5 and Vim &gt; patch 7.4.1799 &lt; https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 &gt;</span><br><span class="line">  &quot;Based on Vim patch 7.4.1770 (`guicolors` option) &lt; https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd &gt;</span><br><span class="line">  &quot; &lt; https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 &gt;</span><br><span class="line">  if (has(&quot;termguicolors&quot;))</span><br><span class="line">    set termguicolors</span><br><span class="line">  endif</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">&quot; easymotion</span><br><span class="line">let g:EasyMotion_smartcase = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; markdown preview===================================</span><br><span class="line">&quot; set to 1, nvim will open the preview window after entering the markdown buffer</span><br><span class="line">&quot; default: 0</span><br><span class="line">let g:mkdp_auto_start = 0</span><br><span class="line"></span><br><span class="line">&quot; set to 1, the nvim will auto close current preview window when change</span><br><span class="line">&quot; from markdown buffer to another buffer</span><br><span class="line">&quot; default: 1</span><br><span class="line">let g:mkdp_auto_close = 0</span><br><span class="line"></span><br><span class="line">&quot; set to 1, the vim will refresh markdown when save the buffer or</span><br><span class="line">&quot; leave from insert mode, default 0 is auto refresh markdown as you edit or</span><br><span class="line">&quot; move the cursor</span><br><span class="line">&quot; default: 0</span><br><span class="line">let g:mkdp_refresh_slow = 0</span><br><span class="line"></span><br><span class="line">&quot; set to 1, the MarkdownPreview command can be use for all files,</span><br><span class="line">&quot; by default it can be use in markdown file</span><br><span class="line">&quot; default: 0</span><br><span class="line">let g:mkdp_command_for_global = 0</span><br><span class="line"></span><br><span class="line">&quot; set to 1, preview server available to others in your network</span><br><span class="line">&quot; by default, the server listens on localhost (127.0.0.1)</span><br><span class="line">&quot; default: 0</span><br><span class="line">let g:mkdp_open_to_the_world = 0</span><br><span class="line"></span><br><span class="line">&quot; use custom IP to open preview page</span><br><span class="line">&quot; useful when you work in remote vim and preview on local browser</span><br><span class="line">&quot; more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9</span><br><span class="line">&quot; default empty</span><br><span class="line">let g:mkdp_open_ip = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&quot; specify browser to open preview page</span><br><span class="line">&quot; default: &#x27;&#x27;</span><br><span class="line">let g:mkdp_browser = &#x27;firefox&#x27;</span><br><span class="line"></span><br><span class="line">&quot; set to 1, echo preview page url in command line when open preview page</span><br><span class="line">&quot; default is 0</span><br><span class="line">let g:mkdp_echo_preview_url = 0</span><br><span class="line"></span><br><span class="line">&quot; a custom vim function name to open preview page</span><br><span class="line">&quot; this function will receive url as param</span><br><span class="line">&quot; default is empty</span><br><span class="line">let g:mkdp_browserfunc = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&quot; options for markdown render</span><br><span class="line">&quot; mkit: markdown-it options for render</span><br><span class="line">&quot; katex: katex options for math</span><br><span class="line">&quot; uml: markdown-it-plantuml options</span><br><span class="line">&quot; maid: mermaid options</span><br><span class="line">&quot; disable_sync_scroll: if disable sync scroll, default 0</span><br><span class="line">&quot; sync_scroll_type: &#x27;middle&#x27;, &#x27;top&#x27; or &#x27;relative&#x27;, default value is &#x27;middle&#x27;</span><br><span class="line">&quot;   middle: mean the cursor position alway show at the middle of the preview page</span><br><span class="line">&quot;   top: mean the vim top viewport alway show at the top of the preview page</span><br><span class="line">&quot;   relative: mean the cursor position alway show at the relative positon of the preview page</span><br><span class="line">&quot; hide_yaml_meta: if hide yaml metadata, default is 1</span><br><span class="line">&quot; sequence_diagrams: js-sequence-diagrams options</span><br><span class="line">&quot; content_editable: if enable content editable for preview page, default: v:false</span><br><span class="line">&quot; disable_filename: if disable filename header for preview page, default: 0</span><br><span class="line">let g:mkdp_preview_options = &#123;</span><br><span class="line">    \ &#x27;mkit&#x27;: &#123;&#125;,</span><br><span class="line">    \ &#x27;katex&#x27;: &#123;&#125;,</span><br><span class="line">    \ &#x27;uml&#x27;: &#123;&#125;,</span><br><span class="line">    \ &#x27;maid&#x27;: &#123;&#125;,</span><br><span class="line">    \ &#x27;disable_sync_scroll&#x27;: 0,</span><br><span class="line">    \ &#x27;sync_scroll_type&#x27;: &#x27;middle&#x27;,</span><br><span class="line">    \ &#x27;hide_yaml_meta&#x27;: 1,</span><br><span class="line">    \ &#x27;sequence_diagrams&#x27;: &#123;&#125;,</span><br><span class="line">    \ &#x27;flowchart_diagrams&#x27;: &#123;&#125;,</span><br><span class="line">    \ &#x27;content_editable&#x27;: v:false,</span><br><span class="line">    \ &#x27;disable_filename&#x27;: 0</span><br><span class="line">    \ &#125;</span><br><span class="line"></span><br><span class="line">&quot; use a custom markdown style must be absolute path</span><br><span class="line">&quot; like &#x27;/Users/username/markdown.css&#x27; or expand(&#x27;~/markdown.css&#x27;)</span><br><span class="line">let g:mkdp_markdown_css = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&quot; use a custom highlight style must absolute path</span><br><span class="line">&quot; like &#x27;/Users/username/highlight.css&#x27; or expand(&#x27;~/highlight.css&#x27;)</span><br><span class="line">let g:mkdp_highlight_css = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&quot; use a custom port to start server or random for empty</span><br><span class="line">let g:mkdp_port = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">&quot; preview page title</span><br><span class="line">&quot; $&#123;name&#125; will be replace with the file name</span><br><span class="line">let g:mkdp_page_title = &#x27;「$&#123;name&#125;」&#x27;</span><br><span class="line"></span><br><span class="line">&quot; recognized filetypes</span><br><span class="line">&quot; these filetypes will have MarkdownPreview... commands</span><br><span class="line">let g:mkdp_filetypes = [&#x27;markdown&#x27;]</span><br><span class="line"></span><br><span class="line">&quot; vim.markdown</span><br><span class="line">let g:vim_markdown_math = 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; markdown2ctags</span><br><span class="line">&quot; !!!remember to set the ctagsbin</span><br><span class="line">let g:tagbar_type_markdown = &#123;</span><br><span class="line">    \ &#x27;ctagstype&#x27;: &#x27;markdown&#x27;,</span><br><span class="line">    \ &#x27;ctagsbin&#x27; : &#x27;~/.config/nvim/plugged/markdown2ctags/markdown2ctags.py&#x27;,</span><br><span class="line">    \ &#x27;ctagsargs&#x27; : &#x27;-f - --sort=yes --sro=»&#x27;,</span><br><span class="line">    \ &#x27;kinds&#x27; : [</span><br><span class="line">        \ &#x27;s:sections&#x27;,</span><br><span class="line">        \ &#x27;i:images&#x27;</span><br><span class="line">    \ ],</span><br><span class="line">    \ &#x27;sro&#x27; : &#x27;»&#x27;,</span><br><span class="line">    \ &#x27;kind2scope&#x27; : &#123;</span><br><span class="line">        \ &#x27;s&#x27; : &#x27;section&#x27;,</span><br><span class="line">    \ &#125;,</span><br><span class="line">    \ &#x27;sort&#x27;: 0,</span><br><span class="line">\ &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;======================================================================================================</span><br><span class="line">&quot;shortcut key</span><br><span class="line">&quot;======================================================================================================</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; VIM快捷键</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">nnoremap &lt;leader&gt;h :noh&lt;cr&gt;</span><br><span class="line">nnoremap &lt;space&gt;h :bp&lt;cr&gt;</span><br><span class="line">nnoremap &lt;space&gt;l :bn&lt;cr&gt;</span><br><span class="line">nnoremap &lt;space&gt;d :bd&lt;cr&gt;</span><br><span class="line">nnoremap &lt;c-a&gt;  gg&lt;s-v&gt;G</span><br><span class="line">vnoremap Y &quot;+y</span><br><span class="line"></span><br><span class="line">&quot;termnal模式下 退出插入模式</span><br><span class="line">tnoremap &lt;Esc&gt; &lt;C-\&gt;&lt;C-n&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; 缩进文本</span><br><span class="line">nnoremap &lt;tab&gt; V&gt;</span><br><span class="line">nnoremap &lt;s-tab&gt; V&lt;</span><br><span class="line">vnoremap &lt;tab&gt; &gt;gv</span><br><span class="line">vnoremap &lt;s-tab&gt; &lt;gv</span><br><span class="line"></span><br><span class="line">&quot;分屏调整 m是alt</span><br><span class="line">nnoremap &lt;m-l&gt; &lt;c-w&gt;5&gt;</span><br><span class="line">nnoremap &lt;m-k&gt; &lt;c-w&gt;5+</span><br><span class="line">nnoremap &lt;m-h&gt; &lt;c-w&gt;5&lt;</span><br><span class="line">nnoremap &lt;m-j&gt; &lt;c-w&gt;5-</span><br><span class="line"></span><br><span class="line">&quot;&quot; 分屏切换 </span><br><span class="line">nnoremap &lt;c-h&gt; &lt;c-w&gt;h</span><br><span class="line">nnoremap &lt;c-j&gt; &lt;c-w&gt;j</span><br><span class="line">nnoremap &lt;c-k&gt; &lt;c-w&gt;k</span><br><span class="line">nnoremap &lt;c-l&gt; &lt;c-w&gt;l</span><br><span class="line"></span><br><span class="line">inoremap &lt;c-h&gt; &lt;esc&gt;&lt;c-w&gt;h</span><br><span class="line">inoremap &lt;c-j&gt; &lt;esc&gt;&lt;c-w&gt;j</span><br><span class="line">inoremap &lt;c-k&gt; &lt;esc&gt;&lt;c-w&gt;k</span><br><span class="line">inoremap &lt;c-l&gt; &lt;esc&gt;&lt;c-w&gt;l</span><br><span class="line"></span><br><span class="line">tnoremap &lt;c-h&gt; &lt;C-\&gt;&lt;C-n&gt;&lt;c-w&gt;h</span><br><span class="line">tnoremap &lt;c-j&gt; &lt;C-\&gt;&lt;C-n&gt;&lt;c-w&gt;j</span><br><span class="line">tnoremap &lt;c-k&gt; &lt;C-\&gt;&lt;C-n&gt;&lt;c-w&gt;k</span><br><span class="line">tnoremap &lt;c-l&gt; &lt;C-\&gt;&lt;C-n&gt;&lt;c-w&gt;l</span><br><span class="line"></span><br><span class="line">&quot; 编辑vimrc</span><br><span class="line">nnoremap &lt;leader&gt;e :edit $MYVIMRC&lt;cr&gt;                               </span><br><span class="line">nnoremap &lt;c-s&gt; :w&lt;cr&gt;</span><br><span class="line">&quot; 重新加载vimrc文件</span><br><span class="line">nnoremap &lt;leader&gt;r :source $MYVIMRC&lt;cr&gt;</span><br><span class="line"></span><br><span class="line">&quot; nerdtree</span><br><span class="line">nnoremap &lt;silent&gt; ff :NERDTreeToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot;easymotion f是vim自带当前行找字母</span><br><span class="line">map &lt;leader&gt;w &lt;Plug&gt;(easymotion-bd-w)</span><br><span class="line"></span><br><span class="line">&quot; ranger in vim (rnvimr)</span><br><span class="line">nnoremap &lt;silent&gt; &lt;leader&gt;f :RnvimrToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; coc.nvim</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">&quot; Use tab for trigger completion with characters ahead and navigate.</span><br><span class="line">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt;</span><br><span class="line">      \ pumvisible() ? &quot;\&lt;C-n&gt;&quot; :</span><br><span class="line">      \ &lt;SID&gt;check_back_space() ? &quot;\&lt;TAB&gt;&quot; :</span><br><span class="line">      \ coc#refresh()</span><br><span class="line">inoremap &lt;expr&gt;&lt;S-TAB&gt; pumvisible() ? &quot;\&lt;C-p&gt;&quot; : &quot;\&lt;C-h&gt;&quot;</span><br><span class="line"></span><br><span class="line">function! s:check_back_space() abort</span><br><span class="line">  let col = col(&#x27;.&#x27;) - 1</span><br><span class="line">  return !col || getline(&#x27;.&#x27;)[col - 1]  =~# &#x27;\s&#x27;</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">&quot; Use &lt;c-space&gt; to trigger completion.</span><br><span class="line">inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-space&gt; coc#refresh()</span><br><span class="line"></span><br><span class="line">&quot; Make &lt;CR&gt; auto-select the first completion item and notify coc.nvim to</span><br><span class="line">&quot; format on enter, &lt;cr&gt; could be remapped by other vim plugin</span><br><span class="line">inoremap &lt;silent&gt;&lt;expr&gt; &lt;cr&gt; pumvisible() ? coc#_select_confirm(): &quot;\&lt;C-g&gt;u\&lt;CR&gt;\&lt;c-r&gt;=coc#on_enter()\&lt;CR&gt;&quot;</span><br><span class="line"></span><br><span class="line">&quot; Use `[g` and `]g` to navigate diagnostics</span><br><span class="line">&quot; Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.</span><br><span class="line">nmap &lt;silent&gt; [g &lt;Plug&gt;(coc-diagnostic-prev)</span><br><span class="line">nmap &lt;silent&gt; ]g &lt;Plug&gt;(coc-diagnostic-next)</span><br><span class="line"></span><br><span class="line">&quot; GoTo code navigation.</span><br><span class="line">nmap &lt;silent&gt; gd &lt;Plug&gt;(coc-definition)</span><br><span class="line">nmap &lt;silent&gt; gy &lt;Plug&gt;(coc-type-definition)</span><br><span class="line">nmap &lt;silent&gt; gi &lt;Plug&gt;(coc-implementation)</span><br><span class="line">nmap &lt;silent&gt; gr &lt;Plug&gt;(coc-references)</span><br><span class="line"></span><br><span class="line">nmap rn &lt;Plug&gt;(coc-rename)</span><br><span class="line"></span><br><span class="line">&quot; Applying codeAction to the selected region.</span><br><span class="line">&quot; Example: `&lt;leader&gt;aap` for current paragraph</span><br><span class="line">xmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)</span><br><span class="line">nmap &lt;leader&gt;a  &lt;Plug&gt;(coc-codeaction-selected)</span><br><span class="line"></span><br><span class="line">&quot; markdown preview ===============</span><br><span class="line">nmap mo &lt;Plug&gt;MarkdownPreview</span><br><span class="line">nmap mc &lt;Plug&gt;MarkdownPreviewStop</span><br><span class="line">nmap mm &lt;Plug&gt;MarkdownPreviewToggle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot; markdown image paste</span><br><span class="line">&quot; latex see github</span><br><span class="line">&quot;autocmd FileType markdown nmap &lt;buffer&gt;&lt;silent&gt; &lt;leader&gt;p :call mdip#MarkdownClipboardImage()&lt;CR&gt;</span><br><span class="line">&quot;let g:mdip_imgdir_intext = &#x27;./md_images_&#x27; . expand(&#x27;%:r&#x27;)</span><br><span class="line">&quot;let g:mdip_imgdir = &#x27;./md_images_&#x27; . expand(&#x27;%:r&#x27;)</span><br><span class="line">&quot;let g:mdip_imgname = &#x27;image&#x27;</span><br><span class="line"></span><br><span class="line">function! MdPasteImage() </span><br><span class="line">    let g:mdip_imgdir_intext = &#x27;./&#x27; . expand(&#x27;%:r&#x27;)</span><br><span class="line">    let g:mdip_imgdir = &#x27;./&#x27; . expand(&#x27;%:r&#x27;)</span><br><span class="line">    &quot;echo g:mdip_imgdir</span><br><span class="line">    &quot;echo g:mdip_imgdir_intext</span><br><span class="line">    call mdip#MarkdownClipboardImage()</span><br><span class="line"></span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">autocmd FileType markdown nmap &lt;buffer&gt;&lt;silent&gt; &lt;leader&gt;p :call MdPasteImage()&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;  ctags==========================</span><br><span class="line">nmap F :TagbarToggle&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; autocmd</span><br><span class="line">&quot;    coc </span><br><span class="line">autocmd CursorHold * silent call CocActionAsync(&#x27;highlight&#x27;)</span><br><span class="line"></span><br><span class="line">&quot;    nerdtree   </span><br><span class="line">&quot;autocmd VimEnter * NERDTree | wincmd l</span><br><span class="line">&quot;au BufEnter * if winnr(&#x27;$&#x27;) == 1 &amp;&amp; exists(&#x27;b:NERDTree&#x27;) &amp;&amp; b:NERDTree.isTabTree() | quit | endif</span><br><span class="line">&quot;    tagbar</span><br><span class="line">&quot;au BufEnter *.py :TagbarToggle</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu软件安装位置</title>
    <url>/2022/02/14/linux/linux/my-software/</url>
    <content><![CDATA[<ul>
<li><p>~&#x2F;ProgramFiles  手动编译或下载下来的可执行文件<br>  &#x2F;usr&#x2F;local&#x2F;bin      放ProgramFiles里bin文件的软连接或直接复制</p>
</li>
<li><p>&#x2F;opt  手动下载下来的deb安装位置</p>
</li>
<li><p>&#x2F;usr&#x2F;bin  系统软件 apt安装的软件</p>
</li>
</ul>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>nmcli 网络连接</title>
    <url>/2022/06/26/linux/linux/nmcli/</url>
    <content><![CDATA[<h1 id="查看网卡信息"><a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 查看所有网卡的信息</span><br><span class="line">nmcli device</span><br></pre></td></tr></table></figure>

<h1 id="连接一个新-WiFi"><a href="#连接一个新-WiFi" class="headerlink" title="连接一个新 WiFi"></a>连接一个新 WiFi</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 显示可以搜索到的WiFi</span><br><span class="line">nmcli device wifi list </span><br><span class="line"></span><br><span class="line">// 连接wifi</span><br><span class="line">nmcli device connect $ssid password $password</span><br></pre></td></tr></table></figure>

<h1 id="连接和断开WiFi"><a href="#连接和断开WiFi" class="headerlink" title="连接和断开WiFi"></a>连接和断开WiFi</h1><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// 显示网络连接信息</span><br><span class="line">nmcli c  </span><br><span class="line">// 连接</span><br><span class="line">nmcli c up $ssid</span><br><span class="line">// 断开</span><br><span class="line">nmcli c down $ssid</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>network-manager</tag>
        <tag>wifi</tag>
      </tags>
  </entry>
  <entry>
    <title>ranger配置</title>
    <url>/2021/04/02/linux/linux/ranger-config/</url>
    <content><![CDATA[<h1 id="ranger安装"><a href="#ranger安装" class="headerlink" title="ranger安装"></a>ranger安装</h1><ul>
<li>方法1: <code>pip install ranger-fm</code></li>
<li>方法2: …</li>
</ul>
<h2 id="建立配置文件"><a href="#建立配置文件" class="headerlink" title="建立配置文件"></a>建立配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ranger --copy-config=all</span></span><br></pre></td></tr></table></figure>

<p>在<code>~/.zshrc</code>中添加（如果用的是bash，就添加到<code>~/.bashrc</code>）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export RANGER_LOAD_DEFAULT_RC FALSE</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>ranger</tag>
      </tags>
  </entry>
  <entry>
    <title>oh-my-zsh</title>
    <url>/2021/04/13/linux/linux/ohmyzsh/</url>
    <content><![CDATA[<h1 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h1><p><strong>reference</strong>: <a href="https://zhuanlan.zhihu.com/p/58073103">https://zhuanlan.zhihu.com/p/58073103</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<p>通过<code>oh-my-zsh</code>  <code>.zshrc</code>, 配置zsh</p>
<h1 id="zshrc"><a href="#zshrc" class="headerlink" title=".zshrc"></a>.zshrc</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># If you come from bash you might have to change your $PATH.</span><br><span class="line"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span><br><span class="line"></span><br><span class="line"># Path to your oh-my-zsh installation.</span><br><span class="line">export ZSH=$HOME/.oh-my-zsh</span><br><span class="line"></span><br><span class="line"># Set name of the theme to load --- if set to &quot;random&quot;, it will</span><br><span class="line"># load a random theme each time oh-my-zsh is loaded, in which case,</span><br><span class="line"># to know which specific one was loaded, run: echo $RANDOM_THEME</span><br><span class="line"># See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span><br><span class="line">#ZSH_THEME=&quot;my&quot;</span><br><span class="line">ZSH_THEME=&quot;my2&quot;</span><br><span class="line">#ZSH_THEME=&quot;robbyrussell&quot;</span><br><span class="line"></span><br><span class="line"># Set list of themes to pick from when loading at random</span><br><span class="line"># Setting this variable when ZSH_THEME=random will cause zsh to load</span><br><span class="line"># a theme from this variable instead of looking in $ZSH/themes/</span><br><span class="line"># If set to an empty array, this variable will have no effect.</span><br><span class="line"># ZSH_THEME_RANDOM_CANDIDATES=( &quot;robbyrussell&quot; &quot;agnoster&quot; )</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to use case-sensitive completion.</span><br><span class="line"># CASE_SENSITIVE=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to use hyphen-insensitive completion.</span><br><span class="line"># Case-sensitive completion must be off. _ and - will be interchangeable.</span><br><span class="line"># HYPHEN_INSENSITIVE=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to disable bi-weekly auto-update checks.</span><br><span class="line"># DISABLE_AUTO_UPDATE=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to automatically update without prompting.</span><br><span class="line"># DISABLE_UPDATE_PROMPT=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to change how often to auto-update (in days).</span><br><span class="line"># export UPDATE_ZSH_DAYS=13</span><br><span class="line"></span><br><span class="line"># Uncomment the following line if pasting URLs and other text is messed up.</span><br><span class="line"># DISABLE_MAGIC_FUNCTIONS=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to disable colors in ls.</span><br><span class="line"># DISABLE_LS_COLORS=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to disable auto-setting terminal title.</span><br><span class="line"># DISABLE_AUTO_TITLE=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to enable command auto-correction.</span><br><span class="line"># ENABLE_CORRECTION=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line to display red dots whilst waiting for completion.</span><br><span class="line"># Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)</span><br><span class="line"># See https://github.com/ohmyzsh/ohmyzsh/issues/5765</span><br><span class="line"># COMPLETION_WAITING_DOTS=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line if you want to disable marking untracked files</span><br><span class="line"># under VCS as dirty. This makes repository status check for large repositories</span><br><span class="line"># much, much faster.</span><br><span class="line"># DISABLE_UNTRACKED_FILES_DIRTY=&quot;true&quot;</span><br><span class="line"></span><br><span class="line"># Uncomment the following line if you want to change the command execution time</span><br><span class="line"># stamp shown in the history command output.</span><br><span class="line"># You can set one of the optional three formats:</span><br><span class="line"># &quot;mm/dd/yyyy&quot;|&quot;dd.mm.yyyy&quot;|&quot;yyyy-mm-dd&quot;</span><br><span class="line"># or set a custom format using the strftime function format specifications,</span><br><span class="line"># see &#x27;man strftime&#x27; for details.</span><br><span class="line"># HIST_STAMPS=&quot;mm/dd/yyyy&quot;</span><br><span class="line"></span><br><span class="line"># Would you like to use another custom folder than $ZSH/custom?</span><br><span class="line"># ZSH_CUSTOM=/path/to/new-custom-folder</span><br><span class="line"></span><br><span class="line"># Which plugins would you like to load?</span><br><span class="line"># Standard plugins can be found in $ZSH/plugins/</span><br><span class="line"># Custom plugins may be added to $ZSH_CUSTOM/plugins/</span><br><span class="line"># Example format: plugins=(rails git textmate ruby lighthouse)</span><br><span class="line"># Add wisely, as too many plugins slow down shell startup.</span><br><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-syntax-highlighting </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">source $ZSH/oh-my-zsh.sh</span><br><span class="line"></span><br><span class="line"># User configuration</span><br><span class="line"></span><br><span class="line"># export MANPATH=&quot;/usr/local/man:$MANPATH&quot;</span><br><span class="line"></span><br><span class="line"># You may need to manually set your language environment</span><br><span class="line"># export LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line"># Preferred editor for local and remote sessions</span><br><span class="line"># if [[ -n $SSH_CONNECTION ]]; then</span><br><span class="line">#   export EDITOR=&#x27;vim&#x27;</span><br><span class="line"># else</span><br><span class="line">#   export EDITOR=&#x27;mvim&#x27;</span><br><span class="line"># fi</span><br><span class="line"></span><br><span class="line"># Compilation flags</span><br><span class="line"># export ARCHFLAGS=&quot;-arch x86_64&quot;</span><br><span class="line"></span><br><span class="line"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span><br><span class="line"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span><br><span class="line"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span><br><span class="line"># For a full list of active aliases, run `alias`.</span><br><span class="line">#</span><br><span class="line"># Example aliases</span><br><span class="line"># alias zshconfig=&quot;mate ~/.zshrc&quot;</span><br><span class="line"># alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### ranger #####</span><br><span class="line">export RANGER_LOAD_DEFAULT_RC=FALSE</span><br><span class="line"></span><br><span class="line">##### node #####</span><br><span class="line">export PATH=$PATH:~/ProgramFiles/node/node-v14.16.0-linux-x64/bin</span><br><span class="line"></span><br><span class="line">##### pip3 #####</span><br><span class="line">export PATH=$PATH:~/.local/bin</span><br><span class="line"></span><br><span class="line"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span><br><span class="line"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span><br><span class="line">__conda_setup=&quot;$(&#x27;/home/wadekiny/workspace/anaconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)&quot;</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    eval &quot;$__conda_setup&quot;</span><br><span class="line">else</span><br><span class="line">    if [ -f &quot;/home/wadekiny/workspace/anaconda3/etc/profile.d/conda.sh&quot; ]; then</span><br><span class="line">        . &quot;/home/wadekiny/workspace/anaconda3/etc/profile.d/conda.sh&quot;</span><br><span class="line">    else</span><br><span class="line">        export PATH=&quot;/home/wadekiny/workspace/anaconda3/bin:$PATH&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br><span class="line">unset __conda_setup</span><br><span class="line"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">export TERM=xterm-256color</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04 CapsLock和Esc互换</title>
    <url>/2021/02/12/linux/linux/ubuntu18-04-CapsLock%E5%92%8CEsc%E4%BA%92%E6%8D%A2/</url>
    <content><![CDATA[<p>两种方法：<br>在使用过程中，先试了第一种，发现系统不会自动运行.Xmodmap的内容，需要自己设置。然后试dconf的方法，可以正常使用。后来装上fcitx输入法后，发现失效了，可能是fcitx又调用了.Xmodmap，把.Xmodmap的名字改掉后就可以正常互换了。</p>
<h4 id="使用xmodmap"><a href="#使用xmodmap" class="headerlink" title="使用xmodmap"></a>使用xmodmap</h4><p>安装xmodmap </p>
<p><code>vim ~/.Xmodmap</code></p>
<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clear Lock  </span><br><span class="line">keysym Caps_Lock = Escape  </span><br><span class="line">keysym Escape = Caps_Lock  </span><br><span class="line">add Lock = Caps_Lock  </span><br></pre></td></tr></table></figure>

<p><code>xmodmap .Xmodmap</code></p>
<p>但是这种方法需要设置开机运行xmodmap .Xmodmap</p>
<h4 id="使用dconf"><a href="#使用dconf" class="headerlink" title="使用dconf"></a>使用dconf</h4><p><code>sudo apt install dconf-editor</code><br><code>dconf-editor</code></p>
<p>路径：<code>org / gnome / desktop / input-sources / xkb-options</code><br>把custome value的内容改为：<code>&#39;caps:swapescape&#39;</code><br><img src="/./ubuntu18-04-CapsLock%E5%92%8CEsc%E4%BA%92%E6%8D%A2/ce.png" alt="avatar"></p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu下打包与压缩</title>
    <url>/2021/01/01/linux/linux/ubuntu%E4%B8%8B%E6%89%93%E5%8C%85%E4%B8%8E%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p>linux系统经常使用tar进行归档打包（tar仅仅只能打包），再用gzip，xzip，bzip2等方式压缩（仅仅只能压缩一个文件）<br>详情可在终端下：<code>tar -?</code></p>
<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p>用法：tar [options…] [file]…<br>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -cf archieve.tar foo bar #从文件 foo 和 bar 创建归档文件</span><br><span class="line">tar -tvf archive.tar         #详细列举归档文件 archive.tar</span><br><span class="line">tar -xf archive.tar          #解开归档文件 archive.tar</span><br></pre></td></tr></table></figure>

<p>主要操作模式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-A, --catenate, --concatenate   追加 tar 文件至归档</span><br><span class="line">-c, --create               创建一个新归档</span><br><span class="line">-d, --diff, --compare      找出归档和文件系统的差异</span><br><span class="line">    --delete               从归档(非磁带！)中删除</span><br><span class="line">-r, --append               追加文件至归档结尾</span><br><span class="line">-t, --list                 列出归档内容</span><br><span class="line">    --test-label           测试归档卷标并退出</span><br><span class="line">-u, --update               仅追加比归档中副本更新的文件</span><br><span class="line">-x, --extract, --get       从归档中解出文件</span><br></pre></td></tr></table></figure>

<p>提示性输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-v, --verbose              详细地列出处理的文件</span><br><span class="line">    --warning=KEYWORD      警告控制:</span><br></pre></td></tr></table></figure>

<p>压缩选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-a, --auto-compress              使用归档后缀名来决定压缩程序</span><br><span class="line">-I, --use-compress-program=PROG</span><br><span class="line">                                 通过 PROG 过滤(必须是能接受 -d</span><br><span class="line">                                 选项的程序)</span><br><span class="line">-j, --bzip2                      通过 bzip2 过滤归档</span><br><span class="line">-J, --xz                         通过 xz 过滤归档</span><br><span class="line">    --lzip                       通过 lzip 过滤归档</span><br><span class="line">    --lzma                       通过 xz 过滤归档</span><br><span class="line">    --lzop                       通过 xz 过滤归档</span><br><span class="line">    --no-auto-compress           不使用归档后缀名来决定压缩程序</span><br><span class="line">-z, --gzip, --gunzip, --ungzip   通过 gzip 过滤归档</span><br><span class="line">-Z, --compress, --uncompress     通过 compress 过滤归档</span><br></pre></td></tr></table></figure>

<p>总结：</p>
<ul>
<li>*.tar 用 tar -xvf 解压</li>
<li>*.gz 用 gzip -d或者gunzip 解压</li>
<li><em>.tar.gz和</em>.tgz 用 tar -xzf 解压</li>
<li>*.bz2 用 bzip2 -d或者用bunzip2 解压</li>
<li>*.tar.bz2用tar -xjf 解压</li>
<li>*.Z 用 uncompress 解压</li>
<li>*.tar.Z 用tar -xZf 解压</li>
<li>*.rar 用 unrar e解压</li>
<li>*.zip 用 unzip 解压</li>
</ul>
<hr>
<hr>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>terminator</title>
    <url>/2022/02/27/linux/linux/terminator/</url>
    <content><![CDATA[<h3 id="在-preferences-取消快捷键的绑定"><a href="#在-preferences-取消快捷键的绑定" class="headerlink" title="在 preferences 取消快捷键的绑定"></a>在 preferences 取消快捷键的绑定</h3><blockquote>
<p><a href="https://github.com/gnome-terminator/terminator/issues/423">https://github.com/gnome-terminator/terminator/issues/423</a></p>
</blockquote>
<p>I don’t know if resetting a variable to its default value is possible atm besides deleting the changed bind from the config, but you can unset a keybinding by <code>double clicking</code> it then hitting <code>Backspace</code>.</p>
<p>无需去 ~&#x2F;.config&#x2F;terminator&#x2F;config 里一个个敲<br>更改完会自动添加到里面</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>vim:buffer window tab</title>
    <url>/2021/01/01/linux/linux/vim%E4%B8%AD%E7%9A%84buffer-window-tab/</url>
    <content><![CDATA[<h2 id="buffer-window-tab-分别是什么"><a href="#buffer-window-tab-分别是什么" class="headerlink" title="buffer  window  tab 分别是什么"></a>buffer  window  tab 分别是什么</h2><p><strong>参考vim的help文件</strong><br>A buffer is the in-memory text of a file<br>A window is a viewport on a buffer<br>A tab page is a collection of windows.</p>
<h3 id="Window"><a href="#Window" class="headerlink" title="Window:"></a>Window:</h3><p>A window is a viewport onto a buffer. You can use mutiple windows on one buffer, or several windows on different buffers.</p>
<p>A screen contains one or more windows, separated by status lines and with the<br>command line at the bottom.</p>
<p>for example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">             screen</span><br><span class="line">+-------------------------------+</span><br><span class="line">| window 1      | window 2      |</span><br><span class="line">|               |               |</span><br><span class="line">|               |               |</span><br><span class="line">|= status line =|= status line =|</span><br><span class="line">| window 3                      |</span><br><span class="line">|                               |</span><br><span class="line">|                               |</span><br><span class="line">|==== status line ==============|</span><br><span class="line">|command line                   |</span><br><span class="line">+-------------------------------+</span><br></pre></td></tr></table></figure>

<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>A buffer is a file loaded into memory for editing. The original file remains unchanged until you write the buffer to the file.</p>
<p>A buffer can be in one of three states:</p>
<ol>
<li>active: the buffer is displayed in a window. If there is a file for this buffer, it has been read into the buffer. The buffer may have been modified since then and thus be different from the file.</li>
<li>hidden: the buffer is not displayed. If ther is a file for this buffer, it has been read into the buffer. Otherwise it is the same as an active buffer, you just cannot see it.</li>
<li>inactive: the buffer is not displayed and does not contain anything. Options for the buffer are remembered if the file was once loaded. It can contain marks from the shada file. But the buffer doesn’t contain text.</li>
</ol>
<p>In brief:</p>
<table>
<thead>
<tr>
<th>state</th>
<th>displayed in window</th>
<th>loaded</th>
<th>“:buffers” show</th>
</tr>
</thead>
<tbody><tr>
<td>active</td>
<td>yes</td>
<td>yes</td>
<td>‘a’</td>
</tr>
<tr>
<td>hidden</td>
<td>no</td>
<td>yes</td>
<td>‘h’</td>
</tr>
<tr>
<td>inactive</td>
<td>no</td>
<td>no</td>
<td>‘ ‘</td>
</tr>
</tbody></table>
<h3 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h3><p>A tab page holds one or more windows.  You can easily switch between tab pages, so that you have several collections of windows to work on different things.</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>操作文件实际上是操作各个buffer（当新打开一个buffer的时候它不对应任何文件），buffer客观存在（活动、非活动、隐藏），想要看到buffer的内容需要使用window</li>
<li>window实际上是buffer的视窗，想要看到buffer需要通过window，一个window对应一个buffer；也可以同时用多个window看一个buffer（比如需要对比一个文件的两个不同位置），对buffer的修改同时有效</li>
<li>一个tab可以整合多个window，多个window构成一个tab</li>
</ul>
<hr>
<h2 id="vim-中-buffer-window-tab-的操作"><a href="#vim-中-buffer-window-tab-的操作" class="headerlink" title="vim 中 buffer  window  tab 的操作"></a>vim 中 buffer  window  tab 的操作</h2><h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><h4 id="缓冲区列表"><a href="#缓冲区列表" class="headerlink" title="缓冲区列表"></a>缓冲区列表</h4><ol>
<li><code>:ls</code></li>
<li><code>:buffers</code></li>
</ol>
<h4 id="切换缓冲区"><a href="#切换缓冲区" class="headerlink" title="切换缓冲区"></a>切换缓冲区</h4><ol>
<li>上一个　<code>:bp</code></li>
<li>下一个　<code>:bn</code></li>
<li>指定　<code>:b[index]</code></li>
</ol>
<h4 id="删除缓冲区"><a href="#删除缓冲区" class="headerlink" title="删除缓冲区"></a>删除缓冲区</h4><ol>
<li>删除当前　<code>:bd</code></li>
<li>删除指定　<code>:bd[index]</code></li>
</ol>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><h4 id="切分窗口"><a href="#切分窗口" class="headerlink" title="切分窗口"></a>切分窗口</h4><ol>
<li>水平切分<br> 命令：<code>:sp file</code><br> 快捷键：<code>&lt;Ctrl-w&gt; + s</code> </li>
<li>垂直切分<br> 命令： <code>:vsp file</code><br> 快捷键：<code>&lt;Ctrl-w&gt; + v</code></li>
</ol>
<h4 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h4><ol>
<li>关闭活动窗口<br> 命令： <code>:clo  或者 :q</code><br> 快捷键：<code>&lt;Ctrl-w&gt; + c</code></li>
<li>关闭其他窗口<br> 命令： <code>:on</code><br> 快捷键：<code>&lt;Ctrl-w&gt; + o</code></li>
</ol>
<h4 id="切换窗口"><a href="#切换窗口" class="headerlink" title="切换窗口"></a>切换窗口</h4><ol>
<li>窗口间循环切换 <code>&lt;Ctrl-w&gt; + w</code></li>
<li>切换到左边窗口 <code>&lt;Ctrl-w&gt; + h</code></li>
<li>切换到上边窗口 <code>&lt;Ctrl-w&gt; + j</code></li>
<li>切换到下边窗口 <code>&lt;Ctrl-w&gt; + k</code></li>
<li>切换到右边窗口 <code>&lt;Ctrl-w&gt; + l</code></li>
</ol>
<h4 id="调整窗口"><a href="#调整窗口" class="headerlink" title="调整窗口"></a>调整窗口</h4><ol>
<li>增加活动窗口宽度      <code>:vertical res +10  </code> </li>
<li>最大化活动窗口的宽度  <code>&lt;Ctrl-W&gt; + | 　　  </code> </li>
<li>使所有窗口等宽等高    <code>&lt;Ctrl-W&gt; + =       </code> </li>
<li>设置活动窗口高度为N行 <code>[N] + &lt;Ctrl-W&gt; + _ </code> </li>
<li>设置活动窗口宽度为N列 <code>[N] + &lt;Ctrl-W&gt; + | </code> </li>
<li>增加活动窗口高度      <code>:res +10           </code></li>
</ol>
<h3 id="tab"><a href="#tab" class="headerlink" title="tab"></a>tab</h3><ol>
<li>在新标签页中打开 {filename}         <code>:tabe(dit) [filename] </code>	</li>
<li>关闭当前标签页及其中的所有窗口      <code>:tabc(lose)	          </code>  </li>
<li>只保留活动标签页，关闭所有其他标签页<code>:tabo(nly) [filename] </code>	</li>
<li>切换到编号为 {N} 的标签页           <code>:tabn(ext) [N&#125; 	      </code>  </li>
<li>切换到下一标签页                    <code>:tabn(ext) 	          </code>  </li>
<li>切换到上一标签页                    <code>:tabp(revious) 	      </code></li>
</ol>
<hr>
<hr>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>webp2png</title>
    <url>/2022/06/28/linux/linux/webp2png/</url>
    <content><![CDATA[<ol>
<li><p>安装webp工具</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">sudo apt install webp</span><br></pre></td></tr></table></figure>
</li>
<li><p>jpg或png转换为webp:</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">cwebp -q [图像质量] [JPEG/PNG文件名] -o [WebP文件名]</span><br></pre></td></tr></table></figure>
</li>
<li><p>webp转化为png</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">dwebp [WebP文件名] -o [PNG文件名]</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>image</tag>
      </tags>
  </entry>
  <entry>
    <title>报错：dpkg-frontend-is-locked</title>
    <url>/2022/02/14/linux/ubuntu/dpkg-frontend-is-locked/</url>
    <content><![CDATA[<ul>
<li>问题<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo dpkg -i xxxxx.deb</span></span><br><span class="line">dpkg: error: dpkg frontend is locked by another process</span><br></pre></td></tr></table></figure></li>
<li>解决 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo <span class="built_in">rm</span> /var/lib/dpkg/lock-frontend</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04 网络管理方式</title>
    <url>/2021/07/19/linux/ubuntu/network-manager/</url>
    <content><![CDATA[<p>Linux 有两种网络管理方式</p>
<ol>
<li><p>&#x2F;etc&#x2F;network&#x2F;interfaces(&#x2F;etc&#x2F;init.d&#x2F;networking)</p>
</li>
<li><p>Network-Manager</p>
</li>
</ol>
<p>两种管理方式会产生冲突，第一种适合服务器，第二种适合个人电脑</p>
<p>如果Network-Manager发现interfaces被改动，会显示设备未托管</p>
<p>建立dsl连接(先取消自动连接）</p>
<p>sudo pppoeconf</p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>network-manager</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu下firefox不能播放视频</title>
    <url>/2021/06/09/linux/ubuntu/ubuntu-firefox-video/</url>
    <content><![CDATA[<ol>
<li><p>下载 flash 插件，选择 NPAPI 版本<br><a href="https://www.flash.cn/">https://www.flash.cn/</a></p>
</li>
<li><p>解压，切换至解压后的目录</p>
</li>
<li><p>复制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> libflashplayer.so /usr/lib/mozilla/plugins</span><br><span class="line">sudo <span class="built_in">cp</span> -r usr/* /usr</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装解码器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启浏览器</p>
</li>
</ol>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>firefox</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu录屏</title>
    <url>/2022/01/30/linux/ubuntu/ubuntu-recorder/</url>
    <content><![CDATA[<p>如果是gnome3系用户，按下 ctrl + shift + alt + r，出现小红点开始录屏，再按一下结束，默认放到<code>~/Videos</code>下</p>
<p><img src="/ubuntu-recorder/2022-01-30-22-27-55-image.png"></p>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04美化</title>
    <url>/2020/12/31/linux/ubuntu/ubuntu18-04%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="安装gnome-tweaks："><a href="#安装gnome-tweaks：" class="headerlink" title="安装gnome-tweaks："></a>安装gnome-tweaks：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install gnome-tweak-tool  </span><br><span class="line">sudo apt install gnome-shell-extensions</span><br></pre></td></tr></table></figure>

<p>gnome-tweak-tool是主要工具，另外可以安装一些其他的扩展</p>
<h2 id="美化图标，主题，shell"><a href="#美化图标，主题，shell" class="headerlink" title="美化图标，主题，shell"></a>美化图标，主题，shell</h2><p>可以从<a href="https://www.pling.com/browse/cat/135/ord/rating">https://www.pling.com/browse/cat/135/ord/rating</a><br>上下载喜欢的主题图标，解压到<code>/usr/share/icons</code><br>例如：</p>
<ol>
<li>已经下载下来图标tela</li>
<li>将tela文件夹放到<code>/usr/share/icons</code></li>
<li>终端下<code>gnome-tweaks</code></li>
<li>在apperance-&gt;themes-&gt;icons选择tela主题图标</li>
</ol>
<p>主题，shell这些都类似，要自定义shell，需要打开extensions中的User themes。</p>
<h2 id="好用的扩展dash-to-panel"><a href="#好用的扩展dash-to-panel" class="headerlink" title="好用的扩展dash to panel"></a>好用的扩展dash to panel</h2><p>参考了：<a href="https://www.cnblogs.com/feipeng8848/p/12808128.html">https://www.cnblogs.com/feipeng8848/p/12808128.html</a><br>没有和dash to dock 一起使用，之前用dash to dock 也不觉得有多方便。<br>而且状态栏放在最上面每次关浏览器还要瞄准那个X</p>
<ol>
<li>到这里：<a href="https://extensions.gnome.org/extension/1160/dash-to-panel/">https://extensions.gnome.org/extension/1160/dash-to-panel/</a></li>
<li>右边的off点成on，就装上了</li>
<li>然后就可以再gnome-tweaks里找到它了。</li>
</ol>
<h2 id="单独更改Alacritty的图标"><a href="#单独更改Alacritty的图标" class="headerlink" title="单独更改Alacritty的图标"></a>单独更改Alacritty的图标</h2><p>感觉alacritty的图标有点丑，怎么说<br>感觉tela主题的terminal图标就可以</p>
<ol>
<li>先把tela主题的terminal图标复制到要改的图标所在目录</li>
<li>切换到所在目录</li>
<li>给旧图标备份</li>
<li>改新图标名字</li>
</ol>
<p>终端下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cp /usr/share/icons/tela/scalable/apps/terminal.svg  /usr/share/pixmaps</span><br><span class="line">cd /usr/share/pixmaps</span><br><span class="line">sudo mv com.alacritty.Alacritty.svg com.alacritty.Alacrittybackup.svg</span><br><span class="line">sudo mv terminal.svg com.alacritty.Alacritty2.svg</span><br></pre></td></tr></table></figure>

<h2 id="动态桌面壁纸livewallpaper"><a href="#动态桌面壁纸livewallpaper" class="headerlink" title="动态桌面壁纸livewallpaper"></a>动态桌面壁纸livewallpaper</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fyrmir/livewallpaper-daily</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install livewallpaper</span><br><span class="line">sudo apt install livewallpaper-config livewallpaper-indicator</span><br></pre></td></tr></table></figure>

<hr>
<hr>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>gnome</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu18.04进入系统黑屏(R7000P)</title>
    <url>/2021/02/12/linux/ubuntu/ubuntu18-04%E8%BF%9B%E5%85%A5%E7%B3%BB%E7%BB%9F%E9%BB%91%E5%B1%8F-R7000P/</url>
    <content><![CDATA[<h2 id="进桌面环境黑屏，花屏（对于R7000P）"><a href="#进桌面环境黑屏，花屏（对于R7000P）" class="headerlink" title="进桌面环境黑屏，花屏（对于R7000P）"></a>进桌面环境黑屏，花屏（对于R7000P）</h2><p>原因：自带的nouveau驱动和NVIDIA的驱动冲突，导致黑屏。</p>
<p>方法：</p>
<ol>
<li><p>装ubuntu双系统前先关闭secure boot，显卡模式换为可切换（非独显模式）</p>
</li>
<li><p>进入桌面环境后（黑屏），按ctrl alt F2 进入tty2。或选系统时选高级选项，进入recovery mode再进入桌面环境。</p>
</li>
<li><p><code>sudo vim /etc/modprobe.d/blacklist.conf</code><br>最后两行添加（添加到黑名单，不出意外的话以后不需要再动）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br></pre></td></tr></table></figure></li>
</ol>
<p>options nouveau modeset&#x3D;0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">刷新内核</span><br><span class="line">`sudo update-initramfs -u`</span><br><span class="line">重启</span><br><span class="line">`reboot`</span><br><span class="line"></span><br><span class="line">4. 此时应该能够正常显示桌面系统，装NVIDIA显卡驱动</span><br><span class="line">查找推荐的驱动型号，对于RTX2060，有些驱动版本不能支持，太旧的驱动不能用。</span><br><span class="line">`ubuntu-drivers devices`</span><br><span class="line">![avatar](../pictures/udd.png)</span><br><span class="line">这里推荐我用460，开始安装：</span><br><span class="line">`sudo add-apt-repository ppa:graphics-drivers/ppa`</span><br><span class="line">`sudo apt update`</span><br><span class="line">`sudo apt-get install nvidia-460`</span><br><span class="line">`sudo apt-get install mesa-common-dev`</span><br><span class="line">`sudo apt-get install freeglut3-dev`</span><br><span class="line">验证：</span><br><span class="line">`nvidia-smi`</span><br><span class="line">![avatar](../pictures/smi.png)</span><br><span class="line">出现框框则安装成功。</span><br><span class="line">重启</span><br><span class="line">`reboot`</span><br><span class="line"></span><br><span class="line">5. 再次开机发现又卡在开机界面了。重启，进BIOS，切换成独立显卡模式就OK了。 </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu更换软件源</title>
    <url>/2021/02/12/linux/ubuntu/ubuntu%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90/</url>
    <content><![CDATA[<p><code>sudo nvim /etc/apt/sources.list</code></p>
<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
</search>
